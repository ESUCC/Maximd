<?php/**************** CHANGES ***********/// 030324-JL TEAM CODE ADDED TO THE buildOptionListPriv// 040328 // FUNCTIONS ADDED FOR SESIS REPORT// 040328-JL CHANGES TO dispDisability FUNCTION FOR USE WITH SESIS// 030728-JL ADDED UC_SC TO buildOptionListPriv// 030728-JL ADDED UC_SC TO validateAccess/******************************************** Description   : IEP Student Class** Version       : 1.0** Author        : Micah Woods** Author Email  : micah@woods-it.com** Created       : ** Last Modified : *'	========================================================================	INFO:	========================================================================	Object for maintaining student records.	========================================================================	USAGE:	========================================================================	$pkeyObj = new student();	========================================================================	VARIABLE NAMES    VALUES	========================================================================	$xxx				(str) xxx	'****************************************///srs_studentclass My_Classes_Student {	var $arrIssues = array();	var $arrIssuesFatal = array();	var $errorId;	var $errorMsg;		function My_Classes_Student() { }		function select(&$pkey, &$mode, &$arrData, $tableName, $pkeyName, $writeLog = true, $checkout = true, $sqlStmt = "", $forceOverrideAccessLvl=0, $formNumber='', $formStatus='') {				#		# formNumber ADDED 11/03 WITH NEW ACCESS CODE		# PASSING THIS PARAMATER MEANS THAT A STUDENT'S FORM IS BEING ACCESSED		# IT IS PASSED TO THE VALIDATION FUNCTION TO SEE IF THE USER HAS ACCESS TO THIS FORM				global $sessIdUser, $sessUserClass, $sessIdCounty, $sessIdDistrict, $sessIdSchool, $sessCurrentRecord, $keyName, $action, $option, $area, $sub,		$RECORD_CHECKOUT_SECONDS, $ERROR_RECORD_LOCKED, $ERROR_ACCESS_DENIED, $ACCESS_VALIDATION, $FILE_ROOT;				// function will accept a custom SQL statment if needed, but make sure that id_county,		// id_district & id_school are returned for access validation		if (empty($sqlStmt)) {			// build default stmt			$sqlStmt =	"SELECT *,						CASE WHEN name_middle IS NOT NULL THEN name_first || ' ' || name_middle || ' ' || name_last ELSE name_first || ' ' || name_last END AS name_student_full,                        date_part('year',age(dob)) as age,						CASE WHEN address_street2 IS NOT NULL THEN address_street1 || ' ' || address_street2 || ' ' || address_city || ', ' || address_state || ' ' || address_zip ELSE address_street1 || ' ' || address_city || ', ' || address_state || ' ' || address_zip END AS address, 						get_name_county(id_county) as name_county,						get_name_district(id_county, id_district) as name_district,						get_name_school(id_county, id_district, id_school) as name_school,						get_name_personnel(id_case_mgr) as name_case_mgr,						get_name_personnel(id_ei_case_mgr) as name_ei_case_mgr,						get_name_personnel(id_ser_cord) as name_ser_cord\n";			$sqlStmt .= 	"FROM iep_student\n";			$sqlStmt .= 	"WHERE id_student = '$pkey';\n";		}		//print( "stmt = $sqlStmt");		// execute select		//$result = My_Classes_iepFunctionGeneral::xmlRpcslqExec($sqlStmt, $this->errorId, $this->errorMsg, true, true);        $db = Zend_Registry::get('db');        $result = $db->fetchAll($sqlStmt);		if (false === $result) {			return false;		} else {									#debuglog( "did query successfully!");			$arrData = $result[0];			#debuglog( "Validating access with mode=$mode");			#			# OLD CODE			if( $ACCESS_VALIDATION == false ) { // DEFINED IN PREPEND				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////				//	030909-JL																															//				//	HACK TO ALLOW ACCESS TO FORMS FOR EICM AND SC																						//				//	ADDED $forceOverrideAccessLvl																										//				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////				if($forceOverrideAccessLvl == 0) {					if (!$this->validateAccess($arrData["id_county"], $arrData["id_district"], $arrData["id_school"], $arrData["id_case_mgr"], $arrData["id_list_team"], $arrData["id_list_guardian"], $mode)) {												#debugLog( "validate student access failed!");						return false;					}				} else {					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////					//	030909-JL																														//					//	ALLOW ACCESS WHEN FORCED																										//					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////				}			} else {				#				# NEW VALIDATION CODE 11/3				#				$accessVariablesArr = array(	'area' 		=> $area,												'sub' 		=> $sub,												'mode' 		=> $mode,												'option' 		=> $option,												'formNumber' 		=> $formNumber,												'formStatus' 		=> $formStatus,											);								#writeToLog( $FILE_ROOT.'/validateAccessLog.txt', "\n\nCHECK ACCESS CLASS STUDENT" );				if($forceOverrideAccessLvl==0) { // used when access check is not required. for example, when running the sesis snapshot					if (!$this->accessValidation($arrData['id_student'], $sessIdUser, $accessVariablesArr, $arrData)) {						$this->errorId = $ERROR_ACCESS_DENIED;						#debugLog( "iep_class_student: accessValidation failed!");						return false;					}				}			}			#debuglog( "Validating access with mode=$mode successful!");			// if the record has been selected in edit mode and checkout is true, attempt to lock the record or return a record locked error			if ($mode == "edit" && $checkout) {				if ($mode == "edit" && !empty($arrData['checkout_id_user']) && $arrData['checkout_id_user'] != $sessIdUser && $arrData['checkout_time'] > (time() - $RECORD_CHECKOUT_SECONDS)) {					$this->errorId = $ERROR_RECORD_LOCKED;					$this->errorMsg = $arrData['checkout_id_user'];					return false;				} else {					$sqlStmt  =	"UPDATE $tableName\nSET checkout_id_user = '$sessIdUser', checkout_time = '" . time() . "'\n";					$sqlStmt .= "WHERE $pkeyName = $pkey;\n";                    $result = My_Classes_iepFunctionGeneral::xmlRpcslqExec($sqlStmt, $this->errorId, $this->errorMsg, true, true);                    if (false === $result) {						return false;					} else {						global $sub;						$sessCurrentRecord = time() . ";$sub;$keyName;$pkey;$tableName;$pkeyName";					}				}			}			#debuglog( "select student 2");			if ($writeLog && $action != "save" && $option != "log") {				if ($mode == "view") {					if ($writeLog > 1) {						return true;					}					$logType = 1;				} else {					if ($writeLog > 2) {						return true;					}					$logType = 2;				}					//debuglog( "select student 3");							if (writeLog($pkey, $logType, $tableName, $this->errorId, $this->errorMsg)) {					//debugLog( "select student 4");					return true;				} else {					//debugLog( "select student 5");					return false;				}			} else {				//debuglog( "select student 6");				return true;			}		}	}		/* INSERT or UPDATE record (data should be validated first) */	function save(&$pkey, &$arrFieldList, &$arrData, &$tableName, &$pkeyName, $sqlStmt = "") {		global $sessIdUser;		// if no stmt is supplied, build default stmt		if (empty($sqlStmt)) {			reset($arrFieldList);						if ($pkey) {				//print_r( $arrFieldList );				//print_r( $arrData );				$sqlStmt = $this->buildUpdateStmt($pkey, $arrFieldList, $arrData, $tableName, $pkeyName);			} else {				$sqlStmt = $this->buildInsertStmt($arrFieldList, $arrData, $tableName, $pkeyName);			}		}						// execute stmt#		if('1000254' == $sessIdUser) print( "save student sqlStmt: ".str_replace("\n", " ", $sqlStmt));		$result = My_Classes_iepFunctionGeneral::xmlRpcslqExec($sqlStmt, $this->errorId, $this->errorMsg, true, true);		if(false === $result) {			return false;		} else {			// if new record, get id of record just inserted			if (empty($pkey)) {				$sqlStmt = "SELECT $pkeyName as key FROM $tableName WHERE oid = ".$result['oid'].";";                $result = My_Classes_iepFunctionGeneral::xmlRpcslqExec($sqlStmt, $this->errorId, $this->errorMsg, true, true);                if(false === $result) {					return false;				} else {					$arrData = $result[0];					return $arrData['key'];				}			} else {				$logType = 3;				$tableName = $tableName;				if (writeLog($pkey, $logType, $tableName, $this->errorId, $this->errorMsg)) {                    return true;				} else {					return false;				}			}		}	}		/* DELETE record */	function delete($pkey, $tableName, $pkeyName, &$confirm, &$msgFlag, &$msgType, &$msgText, $sqlStmt = "") {				// validate that it's OK to delete		// <todo> execute select statements on all possible related records and determine if record can be deleted						if ($this->guardianCount($pkey) != 0) {			$msgFlag = 2;			$msgType = "delete";			$msgText = "Sorry, this Student record cannot be deleted because it has been linked to other records in the system. There cannot be any forms or parent records associated with a record that needs to be deleted.";			return true;		}		if (form_count($pkey)) {			$msgFlag = 2;			$msgType = "delete";			$msgText = "Sorry, this Student record can&rsquo;t be deleted because it has forms attached.";			return true;		}				// if confirmed, delete record		// <todo> write additional statment that deletes related log records		if ($confirm) {			if (empty($sqlStmt)) {				// build default stmt//				$sqlStmt  =		"DELETE\n";//				$sqlStmt .= 	"FROM $tableName\n";//				$sqlStmt .= 	"WHERE $pkeyName = $pkey;\n";				$sqlStmt  =		"select remove_student($pkey);\n";			}					// execute stmt            $result = My_Classes_iepFunctionGeneral::xmlRpcslqExec($sqlStmt, $this->errorId, $this->errorMsg, true, true);            if(false === $result) {				return false;			} else {				return true;			}		} else {			$msgFlag = 1;			$msgType = "delete";			$msgText = "Do you really want to permanently <span style=\"text-decoration:underline;\" class=\"btbRed\">DELETE</span> this Student?";			return true;		}	}		/* step through the field list array and performs the appropriate functions to validate data */	function validate(&$arrFieldList, &$arrData, &$valid, &$fatal) {			include_once("iep_function_validate.inc");		while (list($fieldName, $value) = each($arrFieldList)) {			if ($func = $arrFieldList[$fieldName][0]) {				if (method_exists($this, "$func")) {					$this->$func($fieldName, $arrData[$fieldName], $arrFieldList[$fieldName][1], $arrFieldList[$fieldName][2], $arrFieldList[$fieldName][3], $arrData);				} else {					$func($fieldName, $arrData[$fieldName], $arrFieldList[$fieldName][1], $arrFieldList[$fieldName][2], $arrFieldList[$fieldName][3], $arrData, $this->arrIssues, $this->arrIssuesFatal);				}			}		}				$valid = true;		$fatal = false;				if (count($this->arrIssues) || count($this->arrIssuesFatal)) {			$valid = false;			if (count($this->arrIssuesFatal)) {				$fatal = true;			}		}	}		/* build INSERT statement */	function buildInsertStmt(&$arrFieldList, &$arrData, &$tableName, &$pkeyName) {				reset($arrFieldList);				$sqlStmt = 	"INSERT INTO $tableName (id_author, id_author_last_mod, ";		while (list($fieldName, $value) = each($arrFieldList)) {			if ($i++) {				$sqlStmt .= ", ";			}			$sqlStmt .= $fieldName;		}		$sqlStmt .= ")\nVALUES ('0', '0', ";		reset($arrFieldList);		$i = 0;		while (list($fieldName, $value) = each($arrFieldList)) {			if ($i++) {				$sqlStmt .= ", ";			}			$dataElement = addslashes( stripslashes( $arrData[$fieldName] ) );			$sqlStmt .= "'$dataElement'";		}		$sqlStmt .= ");\n";				return $sqlStmt;	}		/* build UPDATE statement */	function buildUpdateStmt(&$pkey, &$arrFieldList, &$arrData, &$tableName, &$pkeyName) {			global $sessIdUser;				reset($arrFieldList);		$sqlStmt = 	"UPDATE $tableName\nSET ";		while (list($fieldName, $value) = each($arrFieldList)) {			if ($i++) {				$sqlStmt .= ", ";			}			$dataElement = addslashes( stripslashes( $arrData[$fieldName] ) );			$sqlStmt .= $fieldName . " = '" . $dataElement . "'";		}		$sqlStmt .= "\nWHERE $pkeyName = $pkey;\n";				return $sqlStmt;	}		/* validate access */	function validateAccess(&$idCounty, &$idDistrict, &$idSchool, &$idCaseMgr, &$idListTeam, &$idListGuardian, &$mode) {		#debugLog("<BR>");		#debugLog("VALIDATE ACCESS");		global $ERROR_ACCESS_DENIED, $sessIdCounty, $sessIdDistrict, $sessIdSchool, $sessIdUser, $sessUserClass, $sessPrivCheckObj, 		$sessIdPersonnelArr, $UC_SA, $UC_ADM, $UC_ASM, $UC_CM, $UC_SC;				$sessUser = new Zend_Session_Namespace('user');		$sessIdUser = $sessUser->sessIdUser;		$UC_SA = 1;		/* added this as a hack 3/4/02. Problem is that current code ties edit-student privilege to edit form, and one		can't be enabled or disabled without the other. Short of changing the interface, this global switch will do the job. */		global $isForm;		/* yet another charming hack, polluting the global namespace to avoid breaking the interface. Problem is that this code		apparently lets all team members create new forms. 8/6/2002 sl		*/		global $canCreate;				$valid = false;				//if ($mode == "view") {			//return true;		//}		if(0) {			if ($sessUserClass == $UC_SA) {				$valid = true;			} elseif ($sessUserClass <= $UC_ADM && $sessIdCounty.$sessIdDistrict == $idCounty.$idDistrict) {				$valid = true;			} elseif ($sessUserClass <= $UC_ASM && $sessIdCounty.$sessIdDistrict.$sessIdSchool == $idCounty.$idDistrict.$idSchool) {				$valid = true;			} elseif ($sessIdUser == $idCaseMgr) {				$valid = true;			}		} else {			// THIS IS THE NEW PRIV CHECK			// edited 2003-03-05 sl/jl to add county			// getPrivClass RETURNS 0 WHEN THERE IS NO ACCESS			//			$privClass = My_Classes_iepFunctionGeneral::getPrivClass($idCounty, $idDistrict, $idSchool);//			Zend_debug::dump($privClass);//			Zend_debug::dump(UC_ASM);//			Zend_debug::dump($idDistrict);//			Zend_debug::dump($idSchool);//			die();						if( $sessIdUser == $idCaseMgr){ // 				$valid = true;				#debugLog("ACCESS - THIS IS THE CASE MANAGER");			}			if( $privClass <= UC_ASM &&  $privClass !=0){ // 				$valid = true;				#debugLog("ACCESS - BASED ON PRIV");			}			// 			if( $sessPrivCheckObj->isUC_SC()){ // // 				$valid = true;// 				#debugLog("ACCESS - BASED ON PRIV");// 			}		}		#debugLog("valid after privCheck: $valid");		#debugLog("idListTeam: $idListTeam");		#debugLog("sessIdUser: $sessIdUser");		#debugLog("mode: $mode");		#debugLog("isForm: $isForm");				//		//		// PATCH PATCH PATCH - JL - 3/3/03		// THIS IS A PATCH USED TO ALLOW ACCESS TO TEAM FORMS BY		// SWITCHING THE IDS IN THE TEAM LIST FROM THE CURRENT ID		// TO THE ID OF THE PERSONNEL MASTER RECORD.		// ============================================================			$tempIdListTeamArr = explode(";", $idListTeam);			for($i=0; $i < count($tempIdListTeamArr); $i++) {				if($tempIdListTeamArr[$i] != '') {					$sqlStmt = "SELECT id_personnel_master FROM iep_personnel WHERE id_personnel = $tempIdListTeamArr[$i] ;";					#debugLog("sqlStmt: ".$sqlStmt);                    $result = My_Classes_iepFunctionGeneral::xmlRpcslqExec($sqlStmt, $this->errorId, $this->errorMsg, true, false);                    if(false === $result) {                    } else {						if(count($result) >0) {							$arrData = $result[0];							$thisMasterID =  $arrData['id_personnel_master'];							#debugLog("OLD: $value | NEW: $thisMasterID");							if($value != $thisMasterID) {								$tempIdListTeamArr[$i] = $thisMasterID;							}						}					}				}			}			$idListTeam = implode($tempIdListTeamArr, ";");		// ============================================================		//		//				if (!$valid && (($mode == "view") || (($mode == "edit") && ($isForm=="true")))) {			// added the check for canCreate. It's set in the Form Center			if (in_array($sessIdUser, explode(";", $idListTeam)) ) {				$valid = true;				#debugLog("ACCESS - ON STUDENT TEAM");			} elseif (in_array($sessIdUser, explode(";", $idListGuardian))) {				$valid = true;				#debugLog("ACCESS - GUARDIAN");			} elseif($privClass == UC_SC) {				$valid = true;				#debugLog("ACCESS - SERVICE COORDINATOR");			}		}				if ( !$valid && $mode == "allowCreateForms" ) {			if (in_array($sessIdUser, explode(";", $idListTeam)) && $canCreate ) {				$valid = true;			} elseif($privClass == UC_SC) {				$valid = true;				#debugLog("ACCESS - SERVICE COORDINATOR");			}		}				if (!$valid) {			$this->errorId = $ERROR_ACCESS_DENIED;			return false;		} else {			#debugLog("return true");			return true;		}	}	function accessValidation($id_student, $id_personnel, $accessVariablesArr, $studentArr = false) {		#		# 11/03 JL new validation through privCheck		#		global $sessPrivCheckObj;		##		#########################################################################################		#		# VALIDATE USER HAS ACCESS TO STUDENT/AREA/SUB		if($sessPrivCheckObj->validateStudentAccess($id_student, $id_personnel, $accessVariablesArr, $studentArr)) { 			$this->id_student = $id_student;			return true;		} else {			return false;		}		#		#		#########################################################################################		##			}	function buildOptionListAccess($id_student, $sessPrivCheckObj) {		#		# EVERYTHING NEEDED IS CONTAINED IN THE PRIVCHECK OBJECT		#        $DOC_ROOT = DOC_ROOT; // set in initialize function and set in application.ini        $NONZEND_ROOT = NONZEND_ROOT; // set in initialize function and set in application.ini		$availableMenus = $sessPrivCheckObj->accessObj->availableTopMenus($sessPrivCheckObj->accessArray, array('view', 'edit', 'delete', 'parents', 'team', 'forms', 'log'));				#		$JS_redirectCode = " onChange=\"javascript:if(this.value) { goToURL('$NONZEND_ROOT', 'student', 'student', 'student', '{$id_student}', '&option=' + this.value) };\">";				require_once('My/Classes/class_form_element.php');		$formInput = new form_element('function', 'return');		$retText = $formInput->form_input_select( 'options', '', true, $JS_redirectCode, array_flip($availableMenus), 'Choose...', '');				return $retText;			}	function buildOptionListPriv(&$pkey, &$idCaseMgr,$privClass, $idListTeam, $currentValue="") {		#debugLog("STUDENT--buildOptionListPriv");				//debugLog("INSIDE BUILDOPTION");		#debugLog("privClass: ".$privClass);		global  $sessIdUser, $area, $DOC_ROOT, $UC_SA, $UC_DM, $UC_ADM, $UC_SM, $UC_ASM, $UC_CM, $UC_SS, $UC_SP, $UC_PG, $UC_SC;			#debugLog("idCaseMgr: ".$idCaseMgr);		#debugLog("privClass: ".$privClass);		#debugLog("sessIdUser: ".$sessIdUser);		// TEAM CODE ADDED 030324-JL		if(in_array($sessIdUser, explode(";", $idListTeam))) {			$arrLabel = array("View Student&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", "Student Forms");			$arrValue = array("view", "forms");		}		switch ($privClass) {			case $UC_SA:			case $UC_DM:			case $UC_ADM:			case $UC_SM:			case $UC_ASM:				$arrLabel = array("View Student&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", "Edit Student", "Parent/Guardians", "Student Team", "Student Forms",  "Student Log", "Delete Student");				$arrValue = array("view", "edit", "parents", "team", "forms", "log", "delete");				break;			case $UC_CM:				if ($sessIdUser == $idCaseMgr) {					$arrLabel = array("View Student&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", "Edit Student", "Parent/Guardians", "Student Team", "Student Forms", "Student Log");					$arrValue = array("view", "edit", "parents", "team", "forms", "log");				} else {					$arrLabel = array("View Student&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", "Parent/Guardians", "Student Team", "Student Forms", "Student Log");					$arrValue = array("view", "parents", "team", "forms", "log");				}				break;			case $UC_SP:			case $UC_SS:				$arrLabel = array("View Student&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", "Parent/Guardians", "Student Team", "Student Forms", "Student Log");				$arrValue = array("view", "parents", "team", "forms", "log");				break;			case $UC_PG:				$arrLabel = array("View Student&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", "Parent/Guardians", "Student Team", "Student Forms", "Student Log");				$arrValue = array("view", "parents", "team", "forms", "log");				break;			case $UC_SC:				$arrLabel = array("View Student&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", "Parent/Guardians", "Student Team", "Student Forms", "Student Log");				$arrValue = array("view", "parents", "team", "forms", "log");				break;		}						$strValueList = "<select name='options'";		$strValueList .= " onChange=\"javascript:if(this.value) { goToURL('$DOC_ROOT', '$area', 'student', 'student', $pkey, '&option=' + this.value) };\">";				if (empty($currentValue)) {			$strValueList .= "<option value=\"\" selected=\"selected\">Choose...</option>";		} else {			$strValueList .= "<option value=\"\">Choose...</option>";		}				$count = count($arrLabel);				for ($i = 0; $i < $count; $i++) {			if ($currentValue == $arrValue[$i]) {				$strValueList .= "<option value=\"$arrValue[$i]\" selected=\"selected\">$arrLabel[$i]</option>";			} else {				$strValueList .= "<option value=\"$arrValue[$i]\">$arrLabel[$i]</option>";			}		}			$strValueList .= "</select>";			return $strValueList;	}	function buildOptionList(&$pkey, &$idCaseMgr, $currentValue="") {		#debugLog("STUDENT--buildOptionList");				global $sessUserMinPriv, $sessIdUser, $area, $DOC_ROOT, $UC_SA, $UC_DM, $UC_ADM, $UC_SM, $UC_ASM, $UC_CM, $UC_SS, $UC_SP, $UC_PG;			switch ($sessUserMinPriv) {			case $UC_SA:			case $UC_DM:			case $UC_ADM:			case $UC_SM:			case $UC_ASM:				$arrLabel = array("View Student&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", "Edit Student", "Parents", "Student Team", "Student Forms",  "Student Log", "Delete Student");				$arrValue = array("view", "edit", "parents", "team", "forms", "log", "delete");				break;			case $UC_CM:				if ($sessIdUser == $idCaseMgr) {					$arrLabel = array("View Student&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", "Edit Student", "Parents", "Student Team", "Student Forms", "Student Log");					$arrValue = array("view", "edit", "parents", "team", "forms", "log");				} else {					$arrLabel = array("View Student&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", "Parents", "Student Team", "Student Forms", "Student Log");					$arrValue = array("view", "parents", "team", "forms", "log");				}				break;			case $UC_SP:			case $UC_SS:				$arrLabel = array("View Student&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", "Parents", "Student Team", "Student Forms", "Student Log");				$arrValue = array("view", "parents", "team", "forms", "log");				break;			case $UC_PG:				$arrLabel = array("View Student&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", "Parents", "Student Team", "Student Forms", "Student Log");				$arrValue = array("view", "parents", "team", "forms", "log");				break;		}		$strValueList = "<select name='options'";		$strValueList .= " onChange=\"javascript:if(this.value) { goToURL('$DOC_ROOT', '$area', 'student', 'student', $pkey, '&option=' + this.value) };\">";				if (empty($currentValue)) {			$strValueList .= "<option value=\"\" selected=\"selected\">Choose...</option>";		} else {			$strValueList .= "<option value=\"\">Choose...</option>";		}				$count = count($arrLabel);				for ($i = 0; $i < $count; $i++) {			if ($currentValue == $arrValue[$i]) {				$strValueList .= "<option value=\"$arrValue[$i]\" selected=\"selected\">$arrLabel[$i]</option>";			} else {				$strValueList .= "<option value=\"$arrValue[$i]\">$arrLabel[$i]</option>";			}		}			$strValueList .= "</select>";			return $strValueList;	}		/* build html select list from array values */	function valueListArray($type, $name, $currentValue, $defaultValue = false, $defaultLabel = false, $attributes = false) {				switch($type) {			case "grade":				$arrLabel = array("EI 0-2", "ECSE (Age 3-5)", "K", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "12+");				$arrValue = array("EI 0-2", "ECSE", "K", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "12+");				break;			case "ethnicGroup":				$arrLabel = array("White, Not Hispanic", "Black, Not Hispanic", "Hispanic", "American Indian / Alaska Native", "Asian / Pacific Islander");				$arrValue = array("A", "B", "C", "D", "E");				break;			case "primaryLanguage":				$arrLabel = array("English", "Spanish", "French", "German", "Japanese", "Chinese", "Brazilian", "Portuguese", "Dutch", "Czech", "Hungarian", "Italian", "Korean", "Other");				$arrValue = array("English", "Spanish", "French", "German", "Japanese", "Chinese", "Brazilian", "Portuguese", "Dutch", "Czech", "Hungarian", "Italian", "Korean", "Other");				break;			case "yn":				$arrLabel = array("Yes", "No");				$arrValue = array("t", "f");				break;			case "yn10":				$arrLabel = array("Yes", "No");				$arrValue = array("1", "0");				break;			case "yn12":				$arrLabel = array("Yes", "No");				$arrValue = array("1", "2");				break;		}			$strHTML = "<select name=\"$name\"";				if (!empty($attributes)) {			$strHTML .= " $attributes";		}				$strHTML .= ">";				if($currentValue == "" && $defaultValue != "") {			$currentValue = $defaultValue;		}			if($defaultLabel != "none") {			$strHTML .= "<option value=\"\" selected=\"selected\">$defaultLabel</option>";		}			$count = count($arrLabel);				for($i = 0; $i < $count; $i++) {			if($currentValue == $arrValue[$i]) {				$strHTML .= "<option value=\"$arrValue[$i]\" selected=\"selected\">$arrLabel[$i]</option>";			} else {				$strHTML .= "<option value=\"$arrValue[$i]\">$arrLabel[$i]</option>";			}		}			$strHTML .= "</select>";			return $strHTML;	}		// display ethnic group	function dispEthnicGroup($ethnicGroup) {			switch($ethnicGroup) {			case "A":				return "White, Not Hispanic";			case "B":				return "Black, Not Hispanic";			case "C":				return "Hispanic";			case "D":				return "American Indian / Alaska Native";			case "E":				return "Asian / Pacific Islander";			default:				return "";		}	}		// display disability// 	function dispDisability($disability) {// 		// 		switch($disability) {// 			case "AU":// 				return "Autism (AU)";// 			case "BD":// 				return "Behavioral Disorder (BD)";// 			case "DB":// 				return "Deaf Blindness (DB)";// 			case "HI":// 				return "Hearing Impairment (HI)";// 			case "MHMI":// 				return "Mental Handicap: Mild (MH:MI)";// 			case "MHMO":// 				return "Mental Handicap: Moderate (MH:MO)";// 			case "MHSP":// 				return "Mental Handicap: Severe/Profound (MH:S/P)";// 			case "MULTI":// 				return "Multiple Impairments (MULTI)";// 			case "OI":// 				return "Orthopedic Impairment (OI)";// 			case "OHI":// 				return "Other Health Impairment (OHI)";// 			case "SLD":// 				return "Specific Learning Disabled (SLD)";// 			case "SLI":// 				return "Speech Language Impairment (SLI)";// 			case "TBI":// 				return "Traumatic Brain Injury (TBI)";// 			case "VI":// 				return "Visual Impairment (VI)";// 			case "DD":// 				return "Developmental Delay (DD)";// 			case "None":// 				return "No disability verified.";// 			default:// 				return "";// 		}// 	}	function dispDisability($theText) {        global $sessIdUser;		if( $theText == "" || empty($theText) ) {			return "none entered";		} else {			//			// THIS ARRAY IS COPPIED FROM STUDENT_FORM_002_P3			$arrLabel = array("Autism (AU)", "Behavioral Disorder (BD)", "Deaf Blindness (DB)", "Hearing Impairment (HI)", "Mental Handicap", "Mental Handicap: Mild (MH:MI)", "Mental Handicap: Moderate (MH:MO)", "Mental Handicap: Severe/Profound (MH:S/P)", "Multiple Impairments (MULTI)", "Orthopedic Impairment (OI)", "Other Health Impairment (OHI)", "Specific Learning Disability (SLD)", "Speech Language Impairment (SLI)", "Traumatic Brain Injury (TBI)", "Visual Impairment (VI)", "Developmental Delay (DD)");			$arrValue = array("AU", "BD", "DB", "HI", "MH", "MHMI", "MHMO", "MHSP", "MULTI", "OI", "OHI", "SLD", "SLI", "TBI", "VI", "DD");						if( false !== ($foundKey = array_search($theText, $arrValue)) ) {				return $arrLabel[$foundKey];	            } else {				return "($theText) value not found";			}					}				/* 		switch($theText) { */		/* 			case "AU": */		/* 				return "Autism (AU)"; */		/* 			case "BD": */		/* 				return "Behavioral Disorder (BD)"; */		/* 			case "DB": */		/* 				return "Deaf Blindness (DB)"; */		/* 			case "HI": */		/* 				return "Hearing Impairment (HI)"; */		/* 			case "MHMI": */		/* 				return "Mental Handicap: Mild (MH:MI)"; */		/* 			case "MHMO": */		/* 				return "Mental Handicap: Moderate (MH:MO)"; */		/* 			case "MHSP": */		/* 				return "Mental Handicap: Severe/Profound (MH:S/P)"; */		/* 			case "MULTI": */		/* 				return "Multiple Impairments (MULTI)"; */		/* 			case "OI": */		/* 				return "Orthopedic Impairment (OI)"; */		/* 			case "OHI": */		/* 				return "Other Health Impairment (OHI)"; */		/* 			case "SLD": */		/* 				return "Specific Learning Disabled (SLD)"; */		/* 			case "SLI": */		/* 				return "Speech Language Impairment (SLI)"; */		/* 			case "TBI": */		/* 				return "Traumatic Brain Injury (TBI)"; */		/* 			case "VI": */		/* 				return "Visual Impairment (VI)"; */		/* 			case "DD": */		/* 				return "Developmental Delay (DD)"; */		/* 			case "None": */		/* 				return "No disability verified."; */		/* 			default: */		/* 				return ""; */		/* 		} */	}		function getNonPublicCounties() {		$sqlStmt = "SELECT id_county, county_name FROM iep_school_non_public group by id_county, county_name order by county_name;";        $result = My_Classes_iepFunctionGeneral::xmlRpcslqExec($sqlStmt, $this->errorId, $this->errorMsg, true, true);        if(false === $result) {			return false;		} else {			if($rowCount = count($result)) {				for($rowNum = 0; $rowNum < $rowCount; $rowNum++) {					//Array					//(					//    [01] => ADAMS					//    [02] => ANTELOPE					//)    				$rowData = $result[$rowNum];					$resultArray[$rowData['county_name']] = $rowData['id_county'];				}				return $resultArray;			} else {				return false;			}		}		}	function getNonPublicDistricts($idCounty) {		$sqlStmt = "SELECT id_district, name FROM iep_school_non_public WHERE agency_record_type_code = 'D' AND id_county = '$idCounty' group by id_district, name order by name;";        $result = My_Classes_iepFunctionGeneral::xmlRpcslqExec($sqlStmt, $this->errorId, $this->errorMsg, true, true);        if(false === $result) {			return false;		} else {			if($rowCount = count($result)) {				for($rowNum = 0; $rowNum < $rowCount; $rowNum++) {					//Array					//(					//    [01] => ADAMS					//    [02] => ANTELOPE					//)    				$rowData = $result[$rowNum];					$resultArray[$rowData['name']] = $rowData['id_district'];				}				return $resultArray;			} else {				return false;			}		}		}	function getNonPublicSchools($idCounty, $idDistrict) {		$sqlStmt = "SELECT id_school, name FROM iep_school_non_public WHERE agency_record_type_code = 'S' AND id_county = '$idCounty' AND id_district = '$idDistrict' group by id_school, name order by name;";        $result = My_Classes_iepFunctionGeneral::xmlRpcslqExec($sqlStmt, $this->errorId, $this->errorMsg, true, true);        if(false === $result) {			return false;		} else {			if($rowCount = count($result)) {				for($rowNum = 0; $rowNum < $rowCount; $rowNum++) {					//Array					//(					//    [01] => ADAMS					//    [02] => ANTELOPE					//)    				$rowData = $result[$rowNum];					$resultArray[$rowData['name']] = $rowData['id_school'];				}				return $resultArray;			} else {				return false;			}		}		}	function guardianCount($student) {		$sqlStmt = "SELECT count(1) as count from iep_guardian where id_student = '$student';";        $result = My_Classes_iepFunctionGeneral::xmlRpcslqExec($sqlStmt, $this->errorId, $this->errorMsg, true, true);        if(false === $result) {			return false;		} else {			$rowData = $result[0];			return $rowData['count'];		}		}	function getGuardians($student) {        // build stmt        $sqlStmt  =	"SELECT *,                    CASE WHEN name_middle IS NOT NULL THEN name_first || ' ' || name_middle || ' ' || name_last ELSE name_first || ' ' || name_last END AS name_full,                    name_last || ', ' || name_first as name_last_first,                    address_street1 || ', ' || address_city || ' ' || CAST(address_state AS TEXT) || ', ' || CAST(address_zip AS TEXT) as address\n";        $sqlStmt .=	"FROM iep_guardian\n";        $sqlStmt .=	"WHERE id_student = '$student'\n";        $sqlStmt .=	"ORDER BY name_last ASC;";//echo "sqlStmt: $sqlStmt<BR>";                $result = My_Classes_iepFunctionGeneral::xmlRpcslqExec($sqlStmt, $this->errorId, $this->errorMsg, true, true);        if(false === $result) {			return false;		} else {	        	        if($rowCount = count($result)) {//                 for($rowNum = 0; $rowNum < $rowCount; $rowNum++) {//                     $resultArray[$rowNum] = $rowData;//                 }                $resultArray = $result;                return $resultArray;			} else {				return false;			}		}		}}