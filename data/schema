bash-3.2$ pg_dump -h iepdata01.unl.edu -d iep_db -U postgres -s
could not change directory to "/root"
pg_dump: server version: 8.1.23; pg_dump version: 8.1.21
pg_dump: aborting because of version mismatch  (Use the -i option to proceed anyway.)
bash-3.2$ pg_dump -h iepdata01.unl.edu -d iep_db -U postgres -s -i
could not change directory to "/root"
pg_dump: server version: 8.1.23; pg_dump version: 8.1.21
pg_dump: proceeding despite version mismatch
--
-- PostgreSQL database dump
--

SET client_encoding = 'SQL_ASCII';
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: 
--

CREATE PROCEDURAL LANGUAGE plpgsql;


SET search_path = public, pg_catalog;

--
-- Name: my_active_ifsps; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE my_active_ifsps AS (
	id_author integer,
	id_author_last_mod integer,
	timestamp_created timestamp without time zone,
	timestamp_last_mod timestamp without time zone,
	status character varying,
	checkout_id_user integer,
	checkout_time integer,
	id_form integer,
	id_student integer,
	name_first character varying,
	name_middle character varying,
	name_last character varying,
	id_county character(2),
	id_district character(4),
	id_school character(3),
	name_county character varying,
	name_district character varying,
	name_school character varying,
	id_case_mgr integer,
	name_case_mgr character varying,
	name_list_guardian character varying,
	date_notice date,
	form_document_root character varying,
	form_version character varying,
	page_status character varying(10),
	id_form_013 integer,
	ifsptype character varying,
	interpreter boolean,
	family_lang character varying,
	sc_name character varying,
	sc_phone character varying,
	sc_address character varying,
	date_family_concerns date,
	family_concerns character varying,
	date_child_strengths date,
	child_strengths character varying,
	tran_con_date date,
	extimated_tran_date date,
	service_sp_conditions character varying,
	service_sp_conditions_yn boolean,
	service_justification character varying,
	parent_understand_content boolean,
	parent_understand_distribition boolean,
	parent_sig_1 character varying,
	parent_sig_1_on_file character varying,
	parent_sig_2 character varying,
	parent_sig_2_on_file character varying,
	parent_date_1 date,
	parent_date_2 date,
	parent_comments character varying,
	parent_sig_on_file_explain character varying,
	dev_vision_desc character varying,
	dev_vision_date date,
	dev_hearing_desc character varying,
	dev_hearing_date date,
	dev_health_status_desc character varying,
	dev_health_status_date date,
	dev_cognitive_desc character varying,
	dev_cognitive_date date,
	dev_communication_desc character varying,
	dev_communication_date date,
	dev_social_desc character varying,
	dev_social_date date,
	dev_self_help_desc character varying,
	dev_self_help_date date,
	dev_fine_motor_desc character varying,
	dev_fine_motor_date date,
	dev_gross_motor_desc character varying,
	dev_gross_motor_date date,
	meeting_date date,
	meeting_date_sent date,
	meeting_date_list character varying,
	meeting_date_sent_list character varying,
	date_mdt date,
	transition_plan boolean,
	transitioned boolean,
	dob date,
	grade character varying,
	eval_date date,
	id_case_mgr_old integer,
	family_lang_second character varying,
	ssn_form character varying,
	medicaid_form character varying,
	dev_vision_checkbox boolean,
	dev_hearing_checkbox boolean,
	dev_health_status_checkbox boolean,
	dev_cognitive_checkbox boolean,
	dev_communication_checkbox boolean,
	dev_social_checkbox boolean,
	dev_self_help_checkbox boolean,
	dev_fine_motor_checkbox boolean,
	dev_gross_motor_checkbox boolean,
	ifsptype_secondary_role character varying,
	version_number integer,
	id_form_013_duped_from integer,
	utf8header boolean
);


ALTER TYPE public.my_active_ifsps OWNER TO postgres;

--
-- Name: piviotlink_row; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE piviotlink_row AS (
	id_student integer,
	unique_id_state bigint,
	status character varying,
	name_county character varying,
	name_district character varying,
	name_school character varying,
	name_case_mgr character varying,
	pub_school_student boolean,
	parental_placement boolean,
	nonpubcounty character(2),
	nonpubdistrict character(4),
	nonpubschool character(3),
	dob date,
	age interval,
	grade character varying,
	gender character varying,
	ethnic_group character(1),
	primary_language character varying,
	ell_student boolean,
	ward boolean,
	address_street1 character varying,
	address_street2 character varying,
	address_city character varying,
	address_state character varying,
	address_zip character varying,
	primary_disability character varying,
	ward_surrogate boolean,
	ward_surrogate_nn boolean,
	student_team_personnel_names character varying,
	student_team_personnel_status character varying,
	date_conference date,
	iep_primary_disability character varying,
	primary_service_location character varying,
	related_service character varying,
	related_service_location character varying,
	special_ed_peer_percent character varying,
	special_ed_non_peer_percent character varying,
	reg_ed_percent character varying,
	assessment_accom character varying,
	date_notice date,
	consent character varying,
	consent_date date,
	date_district_received date,
	date_mdt date,
	mdt_date_notice date,
	initial_verification boolean,
	initial_verification_date date,
	disability_au boolean,
	disability_bd boolean,
	disability_hi boolean,
	disability_db boolean,
	disability_mhmi boolean,
	disability_mhmo boolean,
	disability_mhsp boolean,
	disability_multi boolean,
	disability_oi boolean,
	disability_ohi boolean,
	disability_sld boolean,
	disability_sli_language boolean,
	disability_sli_articulation boolean,
	disability_sli_voice boolean,
	disability_sli_fluency boolean,
	disability_vi character varying,
	disability_dd boolean,
	disability_tbi boolean,
	disability_primary character varying
);


ALTER TYPE public.piviotlink_row OWNER TO postgres;

--
-- Name: cds_name_county(character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION cds_name_county(character) RETURNS character varying
    AS $_$DECLARE 
    ID_COU ALIAS FOR $1;
    cdsSearch RECORD;

BEGIN 
    SELECT INTO cdsSearch name_county FROM iep_school_name WHERE id_county = ID_COU;
    IF NOT FOUND THEN
        RETURN false; 
    ELSE
        RETURN cdsSearch.name_county; 
    END IF;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.cds_name_county(character) OWNER TO postgres;

--
-- Name: cds_name_district(character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION cds_name_district(character, character) RETURNS character varying
    AS $_$DECLARE 
    ID_COU ALIAS FOR $1;
    ID_DIS ALIAS FOR $2;
    cdsSearch RECORD;

BEGIN 
    SELECT INTO cdsSearch name_district FROM iep_school_name WHERE id_county = ID_COU AND id_district = ID_DIS;
    IF NOT FOUND THEN
        RETURN false; 
    ELSE
        RETURN cdsSearch.name_district; 
    END IF;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.cds_name_district(character, character) OWNER TO postgres;

--
-- Name: cds_name_school(character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION cds_name_school(character, character, character) RETURNS character varying
    AS $_$DECLARE 
    ID_COU ALIAS FOR $1;
    ID_DIS ALIAS FOR $2;
    ID_SCH ALIAS FOR $3;
    cdsSearch RECORD;

BEGIN 
    SELECT INTO cdsSearch name_school FROM iep_school_name WHERE id_county = ID_COU AND id_district = ID_DIS AND id_school = ID_SCH;
    IF NOT FOUND THEN
        RETURN false; 
    ELSE
        RETURN cdsSearch.name_school; 
    END IF;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.cds_name_school(character, character, character) OWNER TO postgres;

--
-- Name: change_school_number(character, character, character, character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION change_school_number(character, character, character, character, character, character) RETURNS boolean
    AS $_$DECLARE

    ID_COU_from ALIAS FOR $1;
    ID_DIS_from ALIAS FOR $2;
    ID_SCH_from ALIAS FOR $3;

    ID_COU_to ALIAS FOR $4;
    ID_DIS_to ALIAS FOR $5;
    ID_SCH_to ALIAS FOR $6;

    i integer;
BEGIN 
    
    --RAISE NOTICE 'County From: %', ID_COU_from;
    --RAISE NOTICE 'District From: %', ID_DIS_from;
    --RAISE NOTICE 'School From: %', ID_SCH_from;
    --RAISE NOTICE 'County To: %', ID_COU_to;
    --RAISE NOTICE 'District To: %', ID_DIS_to;
    --RAISE NOTICE 'School To: %', ID_SCH_to;
    --
    -- 20050201 - JLAVERE Currently the trigger for privileges only rebuild SS4 records when the status changes
    -- so updating CDS will not change or cause SS4 to be updated
    --
    update iep_privileges set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;


    --
    -- changing CDS on a student will cause the SS4 triggers to fire
    -- this will recreate SS4 records for the student
    -- this should be done AFTER other functions that do not cause SS4 to rebuild
    -- == running with triggers will remove CM, EICM and SC
    PERFORM disabletriggers('iep_student');
    update iep_student set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    PERFORM enabletriggers('iep_student');
    update iep_student set vere_ss_update = true where id_county = ID_COU_to and id_district = ID_DIS_to and id_school = ID_SCH_to;
    
    --
    -- FORMS
    -- SS4 should not be affected by CDS changes to form
    -- BUT, student forms are designed to update their CDS to match the student whenever they are altered
    -- so forms should be updated after students
    --
    update iep_form_001 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    update iep_form_002 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    update iep_form_003 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    update iep_form_004 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    update iep_form_005 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    update iep_form_006 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    update iep_form_007 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    update iep_form_008 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    update iep_form_009 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    update iep_form_010 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    update iep_form_011 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    update iep_form_012 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    update iep_form_013 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    update iep_form_014 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    update iep_form_015 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    update iep_form_016 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;
    update iep_form_017 set id_county = ID_COU_to, id_district = ID_DIS_to, id_school = ID_SCH_to where id_county = ID_COU_from and id_district = ID_DIS_from and id_school = ID_SCH_from;


    RETURN true;
END;$_$
    LANGUAGE plpgsql IMMUTABLE STRICT;


ALTER FUNCTION public.change_school_number(character, character, character, character, character, character) OWNER TO postgres;

--
-- Name: clearcolumn(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION clearcolumn(text, integer) RETURNS character varying
    AS $_$
declare
    v_list alias for $1;
    v_clearColumn alias for $2;
    v_delim text := ';';
    v_arr text[];
    v_retString varchar := '';
begin
    v_arr := string_to_array(v_list, v_delim);
    for i in array_lower(v_arr, 1)..array_upper(v_arr, 1) loop
        IF (v_clearColumn = i) THEN
            v_retString := v_retString || ';';
        ELSE 
            v_retString := v_retString || v_arr[i]::varchar || ';';
        END IF;
    end loop;
    return v_retString;
end;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.clearcolumn(text, integer) OWNER TO postgres;

--
-- Name: create_cds(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION create_cds() RETURNS "trigger"
    AS $$
DECLARE

BEGIN
    --
    --
    RAISE NOTICE 'id_county: %',NEW.id_county;
    RAISE NOTICE 'id_district: %',NEW.id_district;
    RAISE NOTICE 'id_school: %',NEW.id_school;
    --
    --
    --
    -- INSERT RECORDS
    --
    
INSERT INTO iep_school_name
    (
        id_cds, 
        id_county, 
        id_district, 
        id_school, 
        name_county, 
        name_school, 
        name_district
    ) 
    SELECT 
        c.id_county || d.id_district || NEW.id_school as cds, 
        c.id_county, 
        d.id_district, 
        NEW.id_school, 
        c.name_county,
        NEW.name_school,
        d.name_district 
    FROM 
        iep_county c, 
        iep_district d
    WHERE 
        c.id_county = d.id_county AND 
        c.id_county = NEW.id_county AND 
        d.id_district = NEW.id_district AND 
        c.id_county = NEW.id_county AND 
        d.id_district = NEW.id_district;

    RETURN NEW;
    
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.create_cds() OWNER TO postgres;

--
-- Name: createiepteammembers(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION createiepteammembers(integer) RETURNS boolean
    AS $_$DECLARE
    v_form_id alias for $1;

BEGIN 
    --
    -- UPDATE LANGUAGE TABLE WITH ALL POSSIBLE VALUES
    -- ===========================================================================
        insert into iep_team_member (id_form_004, sortnum, positin_desc) VALUES (v_form_id, 1, 'Parent');
        insert into iep_team_member (id_form_004, sortnum, positin_desc) VALUES (v_form_id, 2, 'Student (whenever appropriate, or if the student is 16 years of age or older)');
        insert into iep_team_member (id_form_004, sortnum, positin_desc) VALUES (v_form_id, 3, 'Regular education teacher');
        insert into iep_team_member (id_form_004, sortnum, positin_desc) VALUES (v_form_id, 4, 'Special education teacher or provider');
        insert into iep_team_member (id_form_004, sortnum, positin_desc) VALUES (v_form_id, 5, 'School district representative');
        insert into iep_team_member (id_form_004, sortnum, positin_desc) VALUES (v_form_id, 6, 'Individual to interpret evaluation results');
        insert into iep_team_member (id_form_004, sortnum, positin_desc) VALUES (v_form_id, 7, 'Service agency representative (If child is receiving services from an approved Service Agency)');
        insert into iep_team_member (id_form_004, sortnum, positin_desc) VALUES (v_form_id, 8, 'Nonpublic representative (if student is attending a nonpublic school)');
        insert into iep_team_member (id_form_004, sortnum, positin_desc) VALUES (v_form_id, 9, 'Other agency representative (when transition services are being provided or will be provided by another agency for children age 14 and older)');
        insert into iep_team_member (id_form_004, sortnum, positin_desc) VALUES (v_form_id, 10,'Speech Language Pathologist');
    -- ===========================================================================

   RETURN true; 
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.createiepteammembers(integer) OWNER TO postgres;

--
-- Name: delete_cds(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION delete_cds() RETURNS "trigger"
    AS $$
DECLARE

BEGIN
    --
    -- DELETE RECORDS
    --
    DELETE FROM iep_school_name where id_cds = OLD.id_county || OLD.id_district || OLD.id_school;
    
    RETURN NEW;
    
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.delete_cds() OWNER TO postgres;

--
-- Name: determine_dupe(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION determine_dupe(id_student_local integer) RETURNS void
    AS $_$
DECLARE

    IDSTUDENTLOCAL                  alias for $1;
    selectStudentsWithLocalIDsql    varchar;
    rec                             record;
    firstRec                        record;
    secRec                         record;
    i                               integer;
    recordsSet                      boolean;
BEGIN
    i := 1;
    recordsSet := false;
    
    selectStudentsWithLocalIDsql := 'SELECT count(1) FROM iep_student  where id_student_local = \'' || IDSTUDENTLOCAL || '\'; ';
    execute selectStudentsWithLocalIDsql into rec;
    RAISE NOTICE 'thecount: %', rec.count;
    
    if rec.count = 2 then
    
    end if;


    selectStudentsWithLocalIDsql := 'SELECT id_student, id_case_mgr, id_student_local, data_source, form_count(id_student) as form_count, status, student_has_parents(id_student) as student_has_parents, student_has_cm(id_student) as student_has_cm FROM iep_student  where id_student_local = \'' || IDSTUDENTLOCAL || '\'; ';
    FOR rec IN EXECUTE selectStudentsWithLocalIDsql     
    LOOP
        RAISE NOTICE 'student id: %', rec.id_student;        
        if i = 1 then
            RAISE NOTICE 'setting rec 1';
            firstRec := rec;
        elseif i = 2 then
            RAISE NOTICE 'setting rec 2';
            secRec := rec;
            recordsSet := true;
        end if;
        i := 1 + 1;
        --execute 'SELECT student_dupe_info(' || rec.id_student || ');';
    END LOOP;
    
    if recordsSet THEN
        RAISE NOTICE 'both records set';
        
        RAISE NOTICE '';
        RAISE NOTICE 'rec 1 id_student: %', firstRec.id_student;
        RAISE NOTICE 'rec 1 id_student_local: %', firstRec.id_student_local;
        RAISE NOTICE 'rec 1 data_source: %', firstRec.data_source;
        RAISE NOTICE 'rec 1 form_count: %', firstRec.form_count;
        RAISE NOTICE 'rec 1 student_has_parents: %', firstRec.student_has_parents;
        RAISE NOTICE 'rec 1 student_has_cm: %', firstRec.student_has_cm;
        RAISE NOTICE 'rec 1 status: %', firstRec.status;
        
        RAISE NOTICE '';
        RAISE NOTICE 'rec 2 id_student: %', secRec.id_student;
        RAISE NOTICE 'rec 2 id_student_local: %', secRec.id_student_local;
        RAISE NOTICE 'rec 2 data_source: %', secRec.data_source;
        RAISE NOTICE 'rec 2 form_count: %', secRec.form_count;
        RAISE NOTICE 'rec 2 student_has_parents: %', secRec.student_has_parents;
        RAISE NOTICE 'rec 2 student_has_cm: %', secRec.student_has_cm;
        RAISE NOTICE 'rec 2 status: %', secRec.status;
        RAISE NOTICE '';
        
        if( firstRec.student_has_parents ) THEN
            
            RAISE NOTICE 'select merge_student sec into first';

            selectStudentsWithLocalIDsql = 'select merge_students(\'' || firstRec.id_student || '\', \'' || secRec.id_student || '\');';
                RAISE NOTICE '%', selectStudentsWithLocalIDsql;
                EXECUTE selectStudentsWithLocalIDsql;
                
            selectStudentsWithLocalIDsql = 'delete from iep_guardian where id_student = (\'' || secRec.id_student || '\');';
                RAISE NOTICE '%', selectStudentsWithLocalIDsql;
                EXECUTE selectStudentsWithLocalIDsql;

            selectStudentsWithLocalIDsql = 'delete from iep_student_team where id_student = (\'' || secRec.id_student || '\');';
                RAISE NOTICE '%', selectStudentsWithLocalIDsql;
                EXECUTE selectStudentsWithLocalIDsql;

            selectStudentsWithLocalIDsql = 'update iep_log set id_student = \'' || firstRec.id_student || '\' where id_student = \'' || secRec.id_student || '\';';
                RAISE NOTICE '%', selectStudentsWithLocalIDsql;
                EXECUTE selectStudentsWithLocalIDsql;

            selectStudentsWithLocalIDsql = 'delete from iep_student where id_student = (\'' || secRec.id_student || '\');';
                RAISE NOTICE '%', selectStudentsWithLocalIDsql;
                EXECUTE selectStudentsWithLocalIDsql;
            
            -- update case manager            
            if (firstRec.id_case_mgr is null and secRec.id_case_mgr is not null) THEN
                -- if first null, use second
                selectStudentsWithLocalIDsql = 'update iep_student set id_case_mgr = \'' || secRec.id_case_mgr || '\' where id_student = \'' || firstRec.id_student || '\';';
                    RAISE NOTICE '%', selectStudentsWithLocalIDsql;
                    EXECUTE selectStudentsWithLocalIDsql;
            END IF;

            -- update data_source            
            if (firstRec.data_source is null and secRec.data_source is not null) THEN
                -- if first null, use second
                selectStudentsWithLocalIDsql = 'update iep_student set data_source = \'' || secRec.data_source || '\' where id_student = \'' || firstRec.id_student || '\';';
                    RAISE NOTICE '%', selectStudentsWithLocalIDsql;
                    EXECUTE selectStudentsWithLocalIDsql;
            END IF;

            -- update status            
            if (firstRec.status != 'Active' and secRec.status = 'Active') THEN
                -- if first null, use second
                selectStudentsWithLocalIDsql = 'update iep_student set status = \'' || secRec.status || '\' where id_student = \'' || firstRec.id_student || '\';';
                    RAISE NOTICE '%', selectStudentsWithLocalIDsql;
                    EXECUTE selectStudentsWithLocalIDsql;
            END IF;


       -- elseif( secRec.data_source is not null and firstRec.data_source is null) THEN
       else
            RAISE NOTICE 'select merge_student first into sec';

            selectStudentsWithLocalIDsql = 'select merge_students(\'' || secRec.id_student || '\', \'' || firstRec.id_student || '\');';
                RAISE NOTICE '%', selectStudentsWithLocalIDsql;
                EXECUTE selectStudentsWithLocalIDsql;

            selectStudentsWithLocalIDsql = 'delete from iep_guardian where id_student = (\'' || firstRec.id_student || '\');';
                RAISE NOTICE '%', selectStudentsWithLocalIDsql;
                EXECUTE selectStudentsWithLocalIDsql;

            selectStudentsWithLocalIDsql = 'delete from iep_student_team where id_student = (\'' || firstRec.id_student || '\');';
                RAISE NOTICE '%', selectStudentsWithLocalIDsql;
                EXECUTE selectStudentsWithLocalIDsql;

            selectStudentsWithLocalIDsql = 'update iep_log set id_student = \'' || secRec.id_student || '\' where id_student = \'' || firstRec.id_student || '\';';
                RAISE NOTICE '%', selectStudentsWithLocalIDsql;
                EXECUTE selectStudentsWithLocalIDsql;

            selectStudentsWithLocalIDsql = 'delete from iep_student where id_student = (\'' || firstRec.id_student || '\');';
                RAISE NOTICE '%', selectStudentsWithLocalIDsql;
                EXECUTE selectStudentsWithLocalIDsql;

            -- update case manager            
            if (secRec.id_case_mgr is null and firstRec.id_case_mgr is not null) THEN
                -- if sec null, use first
                selectStudentsWithLocalIDsql = 'update iep_student set id_case_mgr = \'' || firstRec.id_case_mgr || '\' where id_student = \'' || secRec.id_student || '\';';
                    RAISE NOTICE '%', selectStudentsWithLocalIDsql;
                    EXECUTE selectStudentsWithLocalIDsql;
            END IF;
        
            -- update data_source            
            if (secRec.data_source is null and firstRec.data_source is not null) THEN
                -- if sec null, use first
                selectStudentsWithLocalIDsql = 'update iep_student set data_source = \'' || firstRec.data_source || '\' where id_student = \'' || secRec.id_student || '\';';
                    RAISE NOTICE '%', selectStudentsWithLocalIDsql;
                    EXECUTE selectStudentsWithLocalIDsql;
            END IF;
        
            -- update status            
            if (secRec.status != 'Active' and firstRec.status = 'Active') THEN
                -- if sec null, use first
                selectStudentsWithLocalIDsql = 'update iep_student set status = \'' || firstRec.status || '\' where id_student = \'' || secRec.id_student || '\';';
                    RAISE NOTICE '%', selectStudentsWithLocalIDsql;
                    EXECUTE selectStudentsWithLocalIDsql;
            END IF;
        
        
        end if;
        
    END IF;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.determine_dupe(id_student_local integer) OWNER TO postgres;

--
-- Name: disabletriggers(name); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION disabletriggers(name) RETURNS boolean
    AS $_$
DECLARE
	rel ALIAS FOR $1;
	rows INTEGER;
BEGIN
	UPDATE pg_class SET reltriggers = 0 WHERE relname ~~* rel;
	GET DIAGNOSTICS rows = ROW_COUNT;
	IF rows > 0 THEN
	   RETURN TRUE;
	   ELSE
		RAISE NOTICE 'Relation does not exist';
		      RETURN FALSE;
		      END IF;
END;
$_$
    LANGUAGE plpgsql STRICT;


ALTER FUNCTION public.disabletriggers(name) OWNER TO postgres;

--
-- Name: district_exists(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION district_exists(integer, integer) RETURNS boolean
    AS $_$DECLARE
    ID_COUNTY     alias for $1;
    ID_DISTRICT  alias for $2;
    DISTRICT_REC record;
BEGIN 
    RAISE NOTICE '% ID_COUNTY', ID_COUNTY;
    RAISE NOTICE '% ID_DISTRICT', ID_DISTRICT;
    
    select into DISTRICT_REC count(1) from iep_district where id_county = ID_COUNTY and id_district = ID_DISTRICT ;
    RAISE NOTICE '% districts found', DISTRICT_REC.count;
    if DISTRICT_REC.count > 0 then
        RETURN true;
    else
        return false;
    end if;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.district_exists(integer, integer) OWNER TO postgres;

--
-- Name: dupe_functional_assessment(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dupe_functional_assessment(integer, integer) RETURNS integer
    AS $_$DECLARE
    TABLE_PK                    alias for $1;
    SESS_ID_USER                alias for $2;

    TABLE_NAME                  varchar;
    TABLE_PK_NAME               varchar;
    FIELDS_ELIMINATE            varchar[];
    
    INSERT_RESULT               record;
    v_old_fa                   record;
    newPK                       integer;
    v_fa_00603f2f              boolean;
    v_fa_00603f2f_correctable  boolean;
    
BEGIN 
    TABLE_NAME          := 'iep_form_019';
    TABLE_PK_NAME       := 'id_form_019';
    FIELDS_ELIMINATE    := '{id_form_019, timestamp_created, date_notice, status}';
    
    --
    -- GET A COPY OF THE OLD FA
    --
    SELECT INTO v_old_fa * FROM iep_form_019 where id_form_019 = TABLE_PK;

    --
    -- DUPE THE FA AND GET OID AS REFRENCE
    --
    SELECT INTO INSERT_RESULT dupe_row(TABLE_NAME, TABLE_PK_NAME, TABLE_PK, FIELDS_ELIMINATE) as resOID;
    
    --
    -- THIS CODE WRITES OVER THE EXISTING INSERT_RESULT,
    -- BUT THIS IS OK, BECAUSE ALL WE WANT TO RETAIN IS THE ID_FORM_019
    --
    SELECT INTO INSERT_RESULT id_form_019 FROM iep_form_019 WHERE oid = INSERT_RESULT.resOID;
    
    newPK              := INSERT_RESULT.id_form_019;

    --
    -- UPDATE FIELDS WITH NEW DATA
    --
    UPDATE iep_form_019 
        SET 
            page_status = '0', 
            id_author = SESS_ID_USER, 
            id_author_last_mod = SESS_ID_USER

        WHERE id_form_019 = newPK;

    RETURN newPK;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.dupe_functional_assessment(integer, integer) OWNER TO postgres;

--
-- Name: dupe_identifier(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dupe_identifier(county character varying, district character varying) RETURNS void
    AS $_$
DECLARE

    IDCOUNTY            alias for $1;
    IDDISTRICT          alias for $2;
    selectDupeLocalID   varchar;
    rec                 record;
    i                   integer;
BEGIN
    i := 0;
    
    selectDupeLocalID := 'SELECT id_student_local, count(*) FROM iep_student  where id_student_local is not null and id_county = \'' || IDCOUNTY || '\' and id_district = \'' || IDDISTRICT || '\' GROUP BY id_student_local HAVING count(*) > 1; ';

    RAISE NOTICE 'getKeywordList: %', selectDupeLocalID;
    FOR rec IN EXECUTE selectDupeLocalID     
    LOOP
        
        i := i + 1;
        RAISE NOTICE 'local student id: %: %', rec.id_student_local, i;
        
        execute 'SELECT determine_dupe(\'' || rec.id_student_local || '\');';
        
    END LOOP;
    
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.dupe_identifier(county character varying, district character varying) OWNER TO postgres;

--
-- Name: dupe_iep(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dupe_iep(integer, integer) RETURNS integer
    AS $_$DECLARE
    TABLE_PK            alias for $1;
    SESS_ID_USER        alias for $2;

    TABLE_NAME          varchar;
    TABLE_PK_NAME       varchar;
    FIELDS_ELIMINATE    varchar[];
    
    v_arr text[];

    INSERT_RESULT       record;
    v_old_iep           record;
    v_new_iep           record;
    v_new_pg            record;
    v_new_ac            record;
    v_student           record;
    v_select_result     record;
    newPK               integer;
    daysValue           integer;
    oldDaysValue        varchar;
    pg6Other            varchar;
    pg6RelatedOther     varchar;
    v_participantNames  varchar;
    v_transition_plan   boolean;
BEGIN 
    TABLE_NAME          := 'iep_form_004';
    TABLE_PK_NAME       := 'id_form_004';
    
    -- 20090901 jlavere - clear mips section (fape_consent, pg6_doc_signed_parent, pg6_date_doc_signed_parent, pg6_no_sig_explanation)
    --
    FIELDS_ELIMINATE    := '{supports_location_other, ass_tech_location_other, prog_mod_location_other, supp_service_location_other, related_service_location_other, timestamp_created, id_form_004, date_conference, date_doc_signed_parent, doc_signed_parent, status, primary_service_location_other, extracurricular_nonacademic, necessary_action, received_copy, lps_sig_understand_process, lps_sig_participated, lps_sig_agree, lps_sig_no_agree_reason, lps_sig_understand_purpose, lps_sig_understand_covers, lps_sig_understand_receive, lps_sig_received_rights, no_sig_explanation, page_status, primary_service_from, primary_service_to, related_service_from_date, related_service_to_date, supp_service_from_date, supp_service_to_date, prog_mod_from_date, prog_mod_to_date, ass_tech_from_date, ass_tech_to_date, supports_from_date, supports_to_date, primary_disability_drop_other, fape_consent, pg6_doc_signed_parent, pg6_date_doc_signed_parent, pg6_no_sig_explanation}'; -- primary_disability_drop_other} <- dont leave a space here, ie dont do this ->(primary_disability_drop_other })
    

    --
    -- GET A COPY OF THE OLD IEP
    --
    SELECT INTO v_old_iep * FROM iep_form_004 where id_form_004 = TABLE_PK;
    --RAISE NOTICE 'tran plan: %', v_old_iep.transition_plan;
    
    
    
    --
    -- GET A COPY OF THE STUDENT RECORD
    -- used for TRANSITION PLAN duping
    --
    SELECT INTO v_student date_part('year',age(dob)) as years, date_part('month',age(dob)) as months, date_part('day',age(dob)) as days FROM iep_student where id_student = v_old_iep.id_student;
    IF('t' = v_old_iep.transition_plan OR v_student.years >= 16 OR (v_student.years = 15 and v_student.days > 1)) THEN
        v_transition_plan := true;
    ELSE
        v_transition_plan := false;
    END IF;

    --RAISE NOTICE 'v_transition_plan: %', v_transition_plan;


    --
    -- DUPE THE IEP AND GET OID AS REFRENCE
    --
    SELECT INTO INSERT_RESULT dupe_row(TABLE_NAME, TABLE_PK_NAME, TABLE_PK, FIELDS_ELIMINATE) as resOID;

    --RAISE NOTICE 'resOID: %', INSERT_RESULT.resOID;
    
    SELECT INTO v_new_iep participant_names, primary_service_days_value, primary_service_dpw, id_form_004, related_service_drop, primary_disability_drop FROM iep_form_004 WHERE oid = INSERT_RESULT.resOID;
    newPK              := v_new_iep.id_form_004;


    --RAISE NOTICE 'primary_service_days_value: %', v_new_iep.primary_service_days_value;
    --RAISE NOTICE 'prog_mod_dpw: %', v_new_iep.primary_service_dpw;
    daysValue              := v_new_iep.primary_service_days_value;
    oldDaysValue           := v_new_iep.primary_service_dpw;
    IF(daysValue is null and oldDaysValue is not null) THEN
        daysValue := oldDaysValue;
        --RAISE NOTICE 'is null';
    END IF;


    
    -- ======================================================================
    -- IF primary_disability_drop IS Other (Please Specify)
    -- THEN CLEAR THE FIELD
    -- ======================================================================
    pg6Other           := v_new_iep.primary_disability_drop;
    IF(pg6Other = 'Other (Please Specify)') THEN
        pg6Other           := NULL;
    END IF;
    -- ======================================================================
    -- RAISE NOTICE 'pg6Other: %', pg6Other;

    -- ======================================================================
    -- IF related_service_drop contains Other (Please Specify)
    -- THEN CLEAR THOSE OCCURANCES
    -- contents of the Other field are ALWAYS cleared in the update below - 20050106 - jlavere 
    -- ======================================================================
        pg6RelatedOther           := v_new_iep.related_service_drop;
        pg6RelatedOther           := replace(pg6RelatedOther, 'Other (Please Specify)',  '');
        pg6RelatedOther           := replace(pg6RelatedOther, 'Sign Language Interpreter',  'Interpreting Services');

    -- ======================================================================
    -- RAISE NOTICE 'pg6RelatedOther: %', pg6RelatedOther;
    
    
    --
    -- 20060105 - code to remove the Educator of the hearing impaired on duped ieps from v1
    --
    IF(v_old_iep.version_number = 1) THEN
        SELECT INTO v_select_result clearcolumn(v_new_iep.participant_names, 10);
        v_participantNames := v_select_result.clearcolumn;
    ELSE
        v_participantNames := v_new_iep.participant_names;
    END IF;
    --RAISE NOTICE 'v_participantNames: %', v_participantNames;



    -- build the empty team member rows and populate
    SELECT INTO v_select_result createiepteammembers(newPK);
    IF(v_old_iep.version_number = 1) THEN
        --v_arr := string_to_array(v_new_iep.participant_names, ';');

        --RAISE NOTICE 'v_old_iep row 1 data: %', v_arr[0];

    ELSE
        perform dupe_iep_participants($1, newPK);
    END IF;

    --
    -- UPDATE FIELDS WITH NEW DATA
    --
    -- 20090223 - jlavere - utf8 added 
    --
    UPDATE iep_form_004 
        SET 
            utf8header = true, 
            page_status = '0110101',
            id_author = $2, 
            id_author_last_mod = $2, 
            primary_disability_drop = pg6Other, 
            related_service_drop = pg6RelatedOther,

            primary_service_days_value = daysValue,
            primary_service_dpw = '',
            participant_names = v_participantNames,

            transition_plan = v_transition_plan,

            related_service = ''
        WHERE id_form_004 = newPK;

    SELECT INTO v_new_iep dupe_iep_goals(TABLE_PK, newPK) as check;
    SELECT INTO v_new_ac dupe_iep_accom_checklist(TABLE_PK, newPK) as check;
    --SELECT INTO v_new_pg dupe_iep_progress_reports(TABLE_PK, newPK) as check;
    
    if(v_transition_plan) THEN
        SELECT INTO v_new_iep duplicate_sub_rows(TABLE_PK, newPK, 'iep_form_004_secondary_goal', 'id_form_004_secondary_goal', 'id_form_004', '{id_form_004_secondary_goal}') as check; -- 20080121 jlavere removed service_start, service_end
    END IF;
    --RAISE NOTICE 'check: %', v_new_iep.check;
    RETURN newPK;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.dupe_iep(integer, integer) OWNER TO postgres;

--
-- Name: dupe_iep_accom_checklist(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE or REPLACE FUNCTION dupe_iep_accom_checklist(bigint, bigint) RETURNS boolean
    AS $_$DECLARE
    PK_IEP_OLD          alias for $1;
    PK_IEP_NEW          alias for $2;

    TABLE_NAME          varchar;
    TABLE_PK_NAME       varchar;
    FIELDS_ELIMINATE    varchar[];
    
    REC_GOAL            record;
    INSERT_RESULT       record;
    IEP_REC         record;
    newOID              bigint;
    recIdStudent        integer;
    idCheck             integer;
    
    
BEGIN 
    TABLE_NAME          := 'iep_accom_checklist';
    TABLE_PK_NAME       := 'id_accom_checklist';
    FIELDS_ELIMINATE    := '{id_accom_checklist, timestamp_last_mod, timestamp_created}';

    FOR REC_GOAL IN SELECT * FROM iep_accom_checklist WHERE id_form_004 = PK_IEP_OLD LOOP

        idCheck              := REC_GOAL.id_accom_checklist;
        
        SELECT INTO IEP_REC id_student from iep_form_004 WHERE id_form_004 = PK_IEP_OLD;
        recIdStudent              := IEP_REC.id_student;
        
        -- DUPE THE GOAL AND GET OID AS REFRENCE
        SELECT INTO INSERT_RESULT dupe_row(TABLE_NAME, TABLE_PK_NAME, idCheck, FIELDS_ELIMINATE) as resOID;

        newOID              := INSERT_RESULT.resOID;

        RAISE NOTICE 'newOID: %', newOID;
        RAISE NOTICE 'recIdStudent: %', recIdStudent;

        -- UPDATE FIELDS WITH NEW DATA
        -- specifically, update the new goal with the id of the new iep it will be on
        UPDATE iep_accom_checklist SET id_form_004 = $2 WHERE oid = newOID;

        SELECT INTO INSERT_RESULT * from iep_accom_checklist WHERE oid = newOID and id_student = recIdStudent;
        RAISE NOTICE 'new ID id_accom_checklist: %', INSERT_RESULT.id_accom_checklist;

    END LOOP;    
    RETURN true;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.dupe_iep_accom_checklist(integer, integer) OWNER TO postgres;

--
-- Name: dupe_iep_full(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dupe_iep_full(integer, integer) RETURNS integer
    AS $_$DECLARE
    TABLE_PK            alias for $1;
    SESS_ID_USER        alias for $2;

    TABLE_NAME          varchar;
    TABLE_PK_NAME       varchar;
    FIELDS_ELIMINATE    varchar[];
    
    v_arr text[];

    INSERT_RESULT       record;
    v_old_iep           record;
    v_new_iep           record;
    v_new_pg            record;
    v_new_ac            record;
    v_student           record;
    v_select_result     record;
    newPK               integer;
    daysValue           integer;
    oldDaysValue        varchar;
    pg6Other            varchar;
    pg6RelatedOther     varchar;
    v_participantNames  varchar;
    v_transition_plan   boolean;
BEGIN 
    TABLE_NAME          := 'iep_form_004';
    TABLE_PK_NAME       := 'id_form_004';
    FIELDS_ELIMINATE    := '{id_form_004, status, timestamp_last_mod, timestamp_created}'; -- primary_disability_drop_other} <- dont leave a space here, ie dont do this ->(primary_disability_drop_other })
    

    --
    -- GET A COPY OF THE OLD IEP
    --
    SELECT INTO v_old_iep * FROM iep_form_004 where id_form_004 = TABLE_PK;
    RAISE NOTICE 'version_number: %', v_old_iep.version_number;

    --
    -- GET A COPY OF THE STUDENT RECORD
    -- used for transition plan duping
    --
    SELECT INTO v_student date_part('year',age(dob)) as years, date_part('month',age(dob)) as months, date_part('day',age(dob)) as days FROM iep_student where id_student = v_old_iep.id_student;
    IF(v_student.years >= 16 OR (v_student.years = 15 and v_student.days > 1)) THEN
        v_transition_plan := true;
    ELSE
        v_transition_plan := false;
    END IF;


    --
    -- DUPE THE IEP AND GET OID AS REFRENCE
    --
    SELECT INTO INSERT_RESULT dupe_row(TABLE_NAME, TABLE_PK_NAME, TABLE_PK, FIELDS_ELIMINATE) as resOID;

    --RAISE NOTICE 'resOID: %', INSERT_RESULT.resOID;
    
    SELECT INTO v_new_iep participant_names, primary_service_days_value, primary_service_dpw, id_form_004, related_service_drop, primary_disability_drop FROM iep_form_004 WHERE oid = INSERT_RESULT.resOID;
    newPK              := v_new_iep.id_form_004;


    --RAISE NOTICE 'primary_service_days_value: %', v_new_iep.primary_service_days_value;
    --RAISE NOTICE 'prog_mod_dpw: %', v_new_iep.primary_service_dpw;
    daysValue              := v_new_iep.primary_service_days_value;
    oldDaysValue           := v_new_iep.primary_service_dpw;
    IF(daysValue is null and oldDaysValue is not null) THEN
        daysValue := oldDaysValue;
        --RAISE NOTICE 'is null';
    END IF;


    
    -- ======================================================================
    -- IF primary_disability_drop IS Other (Please Specify)
    -- THEN CLEAR THE FIELD
    -- ======================================================================
    pg6Other           := v_new_iep.primary_disability_drop;
    IF(pg6Other = 'Other (Please Specify)') THEN
        pg6Other           := NULL;
    END IF;
    -- ======================================================================
    
    
    --
    -- 20060105 - code to remove the Educator of the hearing impaired on duped ieps from v1
    --
    IF(v_old_iep.version_number = 1) THEN
        SELECT INTO v_select_result clearcolumn(v_new_iep.participant_names, 10);
        v_participantNames := v_select_result.clearcolumn;
    ELSE
        v_participantNames := v_new_iep.participant_names;
    END IF;



    -- build the empty team member rows and populate
    SELECT INTO v_select_result createiepteammembers(newPK);
    IF(v_old_iep.version_number = 1) THEN

    ELSE
        perform dupe_iep_participants($1, newPK);
    END IF;

    --
    -- UPDATE FIELDS WITH NEW DATA
    --
    RAISE NOTICE 'pre update version_number: %', v_old_iep.version_number;
    
    UPDATE iep_form_004 
        SET 
            id_author = $2, 
            id_author_last_mod = $2,
            version_number = v_old_iep.version_number
        WHERE id_form_004 = newPK;

    SELECT INTO v_new_iep dupe_iep_goals(TABLE_PK, newPK) as check;
    SELECT INTO v_new_pg dupe_iep_progress_reports(TABLE_PK, newPK) as check;

    SELECT INTO v_new_ac dupe_iep_accom_checklist(TABLE_PK, newPK) as check;



    if(v_transition_plan) THEN
        SELECT INTO v_new_iep duplicate_sub_rows(TABLE_PK, newPK, 'iep_form_004_secondary_goal', 'id_form_004_secondary_goal', 'id_form_004', '{id_form_004_secondary_goal}') as check; -- 20080121 jlavere removed service_start, service_end
    END IF;
    RETURN newPK;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.dupe_iep_full(integer, integer) OWNER TO postgres;

--
-- Name: dupe_iep_goals(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dupe_iep_goals(integer, integer) RETURNS boolean
    AS $_$DECLARE
    PK_IEP_OLD          alias for $1;
    PK_IEP_NEW          alias for $2;

    TABLE_NAME          varchar;
    TABLE_PK_NAME       varchar;
    FIELDS_ELIMINATE    varchar[];
    
    REC_GOAL            record;
    INSERT_RESULT       record;
    newOID              integer;
    
    
BEGIN 
    TABLE_NAME          := 'iep_form_004_goal';
    TABLE_PK_NAME       := 'id_form_004_goal';
    FIELDS_ELIMINATE    := '{id_form_004_goal, progress_date1, progress_date2, progress_date3, progress_date4, progress_date5, progress_date6, bug2465_checkedreal, timestamp_last_mod, timestamp_created}';
    
    FOR REC_GOAL IN SELECT * FROM iep_form_004_goal WHERE id_form_004 = PK_IEP_OLD LOOP

        --
        -- DUPE THE GOAL AND GET OID AS REFRENCE
        --
        SELECT INTO INSERT_RESULT dupe_row(TABLE_NAME, TABLE_PK_NAME, REC_GOAL.id_form_004_goal, FIELDS_ELIMINATE) as resOID;
        newOID              := INSERT_RESULT.resOID;
        --RAISE NOTICE 'id_form_004: %', $2;
        --
        -- UPDATE FIELDS WITH NEW DATA
        -- specifically, update the new goal with the id of the new iep it will be on
        --
        UPDATE iep_form_004_goal SET original_iep_id = id_form_004, id_form_004 = $2, savetype = 'dupefunction' WHERE oid = newOID and id_student = REC_GOAL.id_student;

    END LOOP;    
    RETURN true;
END;
$_$
    LANGUAGE plpgsql;

CREATE or replace  FUNCTION dupe_iep_goals_full(integer, integer) RETURNS boolean
    AS $_$DECLARE
    PK_IEP_OLD          alias for $1;
    PK_IEP_NEW          alias for $2;

    TABLE_NAME          varchar;
    TABLE_PK_NAME       varchar;
    FIELDS_ELIMINATE    varchar[];
    
    REC_GOAL            record;
    INSERT_RESULT       record;
    newOID              integer;
    
    
BEGIN 
    TABLE_NAME          := 'iep_form_004_goal';
    TABLE_PK_NAME       := 'id_form_004_goal';
    FIELDS_ELIMINATE    := '{id_form_004_goal, bug2465_checkedreal, timestamp_last_mod, timestamp_created}';
    
    FOR REC_GOAL IN SELECT * FROM iep_form_004_goal WHERE id_form_004 = PK_IEP_OLD LOOP

        --
        -- DUPE THE GOAL AND GET OID AS REFRENCE
        --
        SELECT INTO INSERT_RESULT dupe_row(TABLE_NAME, TABLE_PK_NAME, REC_GOAL.id_form_004_goal, FIELDS_ELIMINATE) as resOID;
        newOID              := INSERT_RESULT.resOID;
        --RAISE NOTICE 'id_form_004: %', $2;
        --
        -- UPDATE FIELDS WITH NEW DATA
        -- specifically, update the new goal with the id of the new iep it will be on
        --
        UPDATE iep_form_004_goal SET original_iep_id = id_form_004, id_form_004 = $2, savetype = 'dupefunction' WHERE oid = newOID and id_student = REC_GOAL.id_student;

    END LOOP;    
    RETURN true;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.dupe_iep_goals(integer, integer) OWNER TO postgres;

--
-- Name: dupe_iep_participants(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dupe_iep_participants(integer, integer) RETURNS boolean
    AS $_$DECLARE
    PK_IEP_OLD          alias for $1;
    PK_IEP_NEW          alias for $2;

    TABLE_NAME          varchar;
    TABLE_PK_NAME       varchar;
    FIELDS_ELIMINATE    varchar[];
    
    REC_PAR            record;
    INSERT_RESULT       record;
    newOID              integer;
    
    
BEGIN 
    TABLE_NAME          := 'iep_form_004_goal';
    TABLE_PK_NAME       := 'id_form_004_goal';
    FIELDS_ELIMINATE    := '{id_form_004_goal, progress_date1, progress_date2, progress_date3, progress_date4, progress_date5, progress_date6, bug2465_checkedreal, timestamp_last_mod, timestamp_created}';
    
    FOR REC_PAR IN SELECT * FROM iep_team_member WHERE id_form_004 = PK_IEP_OLD LOOP

        update iep_team_member set participant_name = REC_PAR.participant_name where id_form_004 = PK_IEP_NEW and sortnum = REC_PAR.sortnum;

    END LOOP;    
    RETURN true;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.dupe_iep_participants(integer, integer) OWNER TO postgres;

--
-- Name: dupe_iep_progress_reports(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE or Replace FUNCTION dupe_iep_progress_reports(integer, integer) RETURNS boolean
    AS $_$DECLARE
    PK_IEP_OLD          alias for $1;
    PK_IEP_NEW          alias for $2;

    TABLE_NAME          varchar;
    TABLE_PK_NAME       varchar;
    FIELDS_ELIMINATE    varchar[];
    
    REC_GOAL            record;
    OLD_GOAL            record;
    INSERT_RESULT       record;
    newOID              integer;
    
    
BEGIN 
    TABLE_NAME          := 'iep_form_010';
    TABLE_PK_NAME       := 'id_form_010';
    FIELDS_ELIMINATE    := '{id_form_010, timestamp_last_mod, timestamp_created}';
    
    FOR REC_GOAL IN SELECT * FROM iep_form_010 WHERE id_form_004 = PK_IEP_OLD LOOP
		
		SELECT INTO OLD_GOAL * FROM iep_form_010 where id_form_010 = REC_GOAL.id_form_010;
		
        --
        -- DUPE THE GOAL AND GET OID AS REFRENCE
        --
        SELECT INTO INSERT_RESULT dupe_row(TABLE_NAME, TABLE_PK_NAME, REC_GOAL.id_form_010, FIELDS_ELIMINATE) as resOID;
        newOID              := INSERT_RESULT.resOID;
        --RAISE NOTICE 'id_form_004: %', $2;
        --
        -- UPDATE FIELDS WITH NEW DATA
        -- specifically, update the new goal with the id of the new iep it will be on
        --
        UPDATE iep_form_010 SET 
        	id_form_004 = $2,
        	version_number = OLD_GOAL.version_number 
        WHERE oid = newOID and id_student = REC_GOAL.id_student;

    END LOOP;    
    RETURN true;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.dupe_iep_progress_reports(integer, integer) OWNER TO postgres;

--
-- Name: dupe_iep_zend(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dupe_iep_zend(integer, integer) RETURNS integer
    AS $_$DECLARE
    TABLE_PK            alias for $1;
    SESS_ID_USER        alias for $2;

    TABLE_NAME          varchar;
    TABLE_PK_NAME       varchar;
    FIELDS_ELIMINATE    varchar[];
    
    v_arr text[];

    INSERT_RESULT       record;
    v_old_iep           record;
    v_new_iep           record;
    v_new_pg            record;
    v_new_ac            record;
    v_student           record;
    v_select_result     record;
    newPK               integer;
    daysValue           integer;
    oldDaysValue        varchar;
    pg6Other            varchar;
    pg6RelatedOther     varchar;
    v_participantNames  varchar;
    v_transition_plan   boolean;
BEGIN 
    TABLE_NAME          := 'iep_form_004';
    TABLE_PK_NAME       := 'id_form_004';
    
    -- 20090901 jlavere - clear mips section (fape_consent, pg6_doc_signed_parent, pg6_date_doc_signed_parent, pg6_no_sig_explanation)
    --
    FIELDS_ELIMINATE    := '{supports_location_other, ass_tech_location_other, prog_mod_location_other, supp_service_location_other, related_service_location_other, timestamp_created, id_form_004, date_conference, date_doc_signed_parent, doc_signed_parent, status, primary_service_location_other, extracurricular_nonacademic, necessary_action, received_copy, lps_sig_understand_process, lps_sig_participated, lps_sig_agree, lps_sig_no_agree_reason, lps_sig_understand_purpose, lps_sig_understand_covers, lps_sig_understand_receive, lps_sig_received_rights, no_sig_explanation, page_status, primary_service_from, primary_service_to, related_service_from_date, related_service_to_date, supp_service_from_date, supp_service_to_date, prog_mod_from_date, prog_mod_to_date, ass_tech_from_date, ass_tech_to_date, supports_from_date, supports_to_date, primary_disability_drop_other, fape_consent, pg6_doc_signed_parent, pg6_date_doc_signed_parent, pg6_no_sig_explanation}'; -- primary_disability_drop_other} <- dont leave a space here, ie dont do this ->(primary_disability_drop_other })
    

    --
    -- GET A COPY OF THE OLD IEP
    --
    SELECT INTO v_old_iep * FROM iep_form_004 where id_form_004 = TABLE_PK;
    --RAISE NOTICE 'tran plan: %', v_old_iep.transition_plan;
    
    
    
    --
    -- GET A COPY OF THE STUDENT RECORD
    -- used for TRANSITION PLAN duping
    --
    SELECT INTO v_student date_part('year',age(dob)) as years, date_part('month',age(dob)) as months, date_part('day',age(dob)) as days FROM iep_student where id_student = v_old_iep.id_student;
    IF('t' = v_old_iep.transition_plan OR v_student.years >= 16 OR (v_student.years = 15 and v_student.days > 1)) THEN
        v_transition_plan := true;
    ELSE
        v_transition_plan := false;
    END IF;

    --RAISE NOTICE 'v_transition_plan: %', v_transition_plan;


    --
    -- DUPE THE IEP AND GET OID AS REFRENCE
    --
    SELECT INTO INSERT_RESULT dupe_row(TABLE_NAME, TABLE_PK_NAME, TABLE_PK, FIELDS_ELIMINATE) as resOID;

    --RAISE NOTICE 'resOID: %', INSERT_RESULT.resOID;
    
    SELECT INTO v_new_iep participant_names, primary_service_days_value, primary_service_dpw, id_form_004, related_service_drop, primary_disability_drop FROM iep_form_004 WHERE oid = INSERT_RESULT.resOID;
    newPK              := v_new_iep.id_form_004;


    --RAISE NOTICE 'primary_service_days_value: %', v_new_iep.primary_service_days_value;
    --RAISE NOTICE 'prog_mod_dpw: %', v_new_iep.primary_service_dpw;
    daysValue              := v_new_iep.primary_service_days_value;
    oldDaysValue           := v_new_iep.primary_service_dpw;
    IF(daysValue is null and oldDaysValue is not null) THEN
        daysValue := oldDaysValue;
        --RAISE NOTICE 'is null';
    END IF;


    
    -- ======================================================================
    -- IF primary_disability_drop IS Other (Please Specify)
    -- THEN CLEAR THE FIELD
    -- ======================================================================
    pg6Other           := v_new_iep.primary_disability_drop;
    IF(pg6Other = 'Other (Please Specify)') THEN
        pg6Other           := NULL;
    END IF;
    -- ======================================================================
    -- RAISE NOTICE 'pg6Other: %', pg6Other;

    -- ======================================================================
    -- IF related_service_drop contains Other (Please Specify)
    -- THEN CLEAR THOSE OCCURANCES
    -- contents of the Other field are ALWAYS cleared in the update below - 20050106 - jlavere 
    -- ======================================================================
        pg6RelatedOther           := v_new_iep.related_service_drop;
        pg6RelatedOther           := replace(pg6RelatedOther, 'Other (Please Specify)',  '');
        pg6RelatedOther           := replace(pg6RelatedOther, 'Sign Language Interpreter',  'Interpreting Services');

    -- ======================================================================
    -- RAISE NOTICE 'pg6RelatedOther: %', pg6RelatedOther;
    
    
    --
    -- 20060105 - code to remove the Educator of the hearing impaired on duped ieps from v1
    --
    IF(v_old_iep.version_number = 1) THEN
        SELECT INTO v_select_result clearcolumn(v_new_iep.participant_names, 10);
        v_participantNames := v_select_result.clearcolumn;
    ELSE
        v_participantNames := v_new_iep.participant_names;
    END IF;
    --RAISE NOTICE 'v_participantNames: %', v_participantNames;



    -- build the empty team member rows and populate
    SELECT INTO v_select_result createiepteammembers(newPK);
    IF(v_old_iep.version_number = 1) THEN
        --v_arr := string_to_array(v_new_iep.participant_names, ';');

        --RAISE NOTICE 'v_old_iep row 1 data: %', v_arr[0];

    ELSE
        perform dupe_iep_participants($1, newPK);
    END IF;

    --
    -- UPDATE FIELDS WITH NEW DATA
    --
    -- 20090223 - jlavere - utf8 added 
    --
    UPDATE iep_form_004 
        SET 
            version_number = 9, 
            utf8header = true, 
            page_status = '0110101',
            id_author = $2, 
            id_author_last_mod = $2, 
            primary_disability_drop = pg6Other, 
            related_service_drop = pg6RelatedOther,

            primary_service_days_value = daysValue,
            primary_service_dpw = '',
            participant_names = v_participantNames,

            transition_plan = v_transition_plan,

            related_service = ''
        WHERE id_form_004 = newPK;

    SELECT INTO v_new_iep dupe_iep_goals(TABLE_PK, newPK) as check;
    SELECT INTO v_new_ac dupe_iep_accom_checklist(TABLE_PK, newPK) as check;
    --SELECT INTO v_new_pg dupe_iep_progress_reports(TABLE_PK, newPK) as check;
    
    if(v_transition_plan) THEN
        SELECT INTO v_new_iep duplicate_sub_rows(TABLE_PK, newPK, 'iep_form_004_secondary_goal', 'id_form_004_secondary_goal', 'id_form_004', '{id_form_004_secondary_goal}') as check; -- 20080121 jlavere removed service_start, service_end
    END IF;
    --RAISE NOTICE 'check: %', v_new_iep.check;
    RETURN newPK;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.dupe_iep_zend(integer, integer) OWNER TO postgres;

--
-- Name: dupe_iep_zend_to_zend(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dupe_iep_zend_to_zend(integer, integer) RETURNS integer
    AS $_$DECLARE
    TABLE_PK            alias for $1;
    SESS_ID_USER        alias for $2;

    TABLE_NAME          varchar;
    TABLE_PK_NAME       varchar;
    FIELDS_ELIMINATE    varchar[];
    
    v_arr text[];

    INSERT_RESULT       record;
    v_old_iep           record;
    v_new_iep           record;
    v_new_pg            record;
    v_new_ac            record;
    v_student           record;
    v_select_result     record;
    newPK               integer;
    daysValue           integer;
    oldDaysValue        varchar;
    pg6Other            varchar;
    pg6RelatedOther     varchar;
    v_participantNames  varchar;
    v_transition_plan   boolean;
    insert_id           integer;
BEGIN 
    TABLE_NAME          := 'iep_form_004';
    TABLE_PK_NAME       := 'id_form_004';
    
    -- 20090901 jlavere - clear mips section (fape_consent, pg6_doc_signed_parent, pg6_date_doc_signed_parent, pg6_no_sig_explanation)
    --
    FIELDS_ELIMINATE    := '{supports_location_other, ass_tech_location_other, prog_mod_location_other, supp_service_location_other, related_service_location_other, timestamp_created, id_form_004, date_conference, date_doc_signed_parent, doc_signed_parent, status, primary_service_location_other, extracurricular_nonacademic, necessary_action, received_copy, lps_sig_understand_process, lps_sig_participated, lps_sig_agree, lps_sig_no_agree_reason, lps_sig_understand_purpose, lps_sig_understand_covers, lps_sig_understand_receive, lps_sig_received_rights, no_sig_explanation, page_status, primary_service_from, primary_service_to, related_service_from_date, related_service_to_date, supp_service_from_date, supp_service_to_date, prog_mod_from_date, prog_mod_to_date, ass_tech_from_date, ass_tech_to_date, supports_from_date, supports_to_date, primary_disability_drop_other, fape_consent, pg6_doc_signed_parent, pg6_date_doc_signed_parent, pg6_no_sig_explanation}'; -- primary_disability_drop_other} <- dont leave a space here, ie dont do this ->(primary_disability_drop_other })
    

    --
    -- GET A COPY OF THE OLD IEP
    --
    SELECT INTO v_old_iep * FROM iep_form_004 where id_form_004 = TABLE_PK;
    --RAISE NOTICE 'tran plan: %', v_old_iep.transition_plan;
    
    
    
    --
    -- GET A COPY OF THE STUDENT RECORD
    -- used for TRANSITION PLAN duping
    --
    SELECT INTO v_student date_part('year',age(dob)) as years, date_part('month',age(dob)) as months, date_part('day',age(dob)) as days FROM iep_student where id_student = v_old_iep.id_student;
    IF('t' = v_old_iep.transition_plan OR v_student.years >= 16 OR (v_student.years = 15 and v_student.days > 1)) THEN
        v_transition_plan := true;
    ELSE
        v_transition_plan := false;
    END IF;

    --RAISE NOTICE 'v_transition_plan: %', v_transition_plan;


    --
    -- DUPE THE IEP AND GET OID AS REFRENCE
    --
    SELECT INTO INSERT_RESULT dupe_row(TABLE_NAME, TABLE_PK_NAME, TABLE_PK, FIELDS_ELIMINATE) as resOID;

    --RAISE NOTICE 'resOID: %', INSERT_RESULT.resOID;
    insert_id := INSERT_RESULT.resOID;
    
    SELECT INTO v_new_iep participant_names, primary_service_days_value, primary_service_dpw, id_form_004, related_service_drop, primary_disability_drop FROM iep_form_004 WHERE oid = insert_id;
    newPK              := v_new_iep.id_form_004;
    RAISE NOTICE 'newPK: %', newPK;

    --RAISE NOTICE 'primary_service_days_value: %', v_new_iep.primary_service_days_value;
    --RAISE NOTICE 'prog_mod_dpw: %', v_new_iep.primary_service_dpw;
    daysValue              := v_new_iep.primary_service_days_value;
    oldDaysValue           := v_new_iep.primary_service_dpw;
    IF(daysValue is null and oldDaysValue is not null) THEN
        daysValue := oldDaysValue;
        --RAISE NOTICE 'is null';
    END IF;


    
    -- ======================================================================
    -- IF primary_disability_drop IS Other (Please Specify)
    -- THEN CLEAR THE FIELD
    -- ======================================================================
    pg6Other           := v_new_iep.primary_disability_drop;
    IF(pg6Other = 'Other (Please Specify)') THEN
        pg6Other           := NULL;
    END IF;
    -- ======================================================================
    -- RAISE NOTICE 'pg6Other: %', pg6Other;

    -- ======================================================================
    -- IF related_service_drop contains Other (Please Specify)
    -- THEN CLEAR THOSE OCCURANCES
    -- contents of the Other field are ALWAYS cleared in the update below - 20050106 - jlavere 
    -- ======================================================================
        pg6RelatedOther           := v_new_iep.related_service_drop;
        pg6RelatedOther           := replace(pg6RelatedOther, 'Other (Please Specify)',  '');
        pg6RelatedOther           := replace(pg6RelatedOther, 'Sign Language Interpreter',  'Interpreting Services');

    -- ======================================================================
    -- RAISE NOTICE 'pg6RelatedOther: %', pg6RelatedOther;
    
    
    --
    -- 20060105 - code to remove the Educator of the hearing impaired on duped ieps from v1
    --
    IF(v_old_iep.version_number = 1) THEN
        SELECT INTO v_select_result clearcolumn(v_new_iep.participant_names, 10);
        v_participantNames := v_select_result.clearcolumn;
    ELSE
        v_participantNames := v_new_iep.participant_names;
    END IF;
    --RAISE NOTICE 'v_participantNames: %', v_participantNames;



    -- build the empty team member rows and populate
    SELECT INTO v_select_result createiepteammembers(newPK);
    IF(v_old_iep.version_number = 1) THEN
        --v_arr := string_to_array(v_new_iep.participant_names, ';');

        --RAISE NOTICE 'v_old_iep row 1 data: %', v_arr[0];

    ELSE
        perform dupe_iep_participants($1, newPK);
    END IF;

    --
    -- UPDATE FIELDS WITH NEW DATA
    --
    -- 20090223 - jlavere - utf8 added 
    --
    UPDATE iep_form_004 
        SET 
            version_number = 9, 
            utf8header = true, 
            page_status = '0110101',
            id_author = $2, 
            id_author_last_mod = $2, 
            primary_disability_drop = pg6Other, 
            related_service_drop = pg6RelatedOther,

            primary_service_days_value = daysValue,
            primary_service_dpw = '',
            participant_names = v_participantNames,

            transition_plan = v_transition_plan,

            related_service = ''
        WHERE id_form_004 = newPK;

    SELECT INTO v_new_iep dupe_iep_goals(TABLE_PK, newPK) as check;
    SELECT INTO v_new_ac dupe_iep_accom_checklist(TABLE_PK, newPK) as check;
    --SELECT INTO v_new_pg dupe_iep_progress_reports(TABLE_PK, newPK) as check;
    
    if(v_transition_plan) THEN
        SELECT INTO v_new_iep duplicate_sub_rows(TABLE_PK, newPK, 'iep_form_004_secondary_goal', 'id_form_004_secondary_goal', 'id_form_004', '{id_form_004_secondary_goal}') as check; -- 20080121 jlavere removed service_start, service_end
    END IF;
    --RAISE NOTICE 'check: %', v_new_iep.check;
    RETURN newPK;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.dupe_iep_zend_to_zend(integer, integer) OWNER TO postgres;

--
-- Name: dupe_ifsp(integer, integer, character varying, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE OR REPLACE FUNCTION dupe_ifsp(bigint, integer, character varying, character varying, character varying, integer) RETURNS integer
    AS $_$DECLARE
    TABLE_PK            alias for $1;
    SESS_ID_USER        alias for $2;
    NEW_IFSP_TYPE       alias for $3;
    TABLE_NAME          alias for $4;
    TABLE_PK_NAME       alias for $5;
    FULL_UPDATE       alias for $6;

--    TABLE_NAME          varchar;
--    TABLE_PK_NAME       varchar;
    FIELDS_ELIMINATE    varchar[];
    
    v_arr text[];

    INSERT_RESULT       record;
    v_old_iep           record;
    v_new_iep           record;
    v_student           record;
    v_select_result     record;
    newPK               integer;
    daysValue           integer;
    oldDaysValue        varchar;
    pg6Other            varchar;
    pg6RelatedOther     varchar;
    v_participantNames  varchar;
    v_transition_plan   boolean;
BEGIN 


    IF ( 1 = FULL_UPDATE) THEN

        -- primary_disability_drop_other} <- dont leave a space here, ie dont do this ->(primary_disability_drop_other })
        -- also, make sure you have the TABLE_PK_NAME field name in this FIELDS_ELIMINATE list
        FIELDS_ELIMINATE    := '{' || TABLE_PK_NAME || ', timestamp_created, timestamp_last_mod}'; 

        --
        -- DUPE THE IFSP AND GET OID AS REFRENCE
        --
        SELECT INTO INSERT_RESULT dupe_row(TABLE_NAME, TABLE_PK_NAME, TABLE_PK, FIELDS_ELIMINATE) as resOID;
        --    RAISE NOTICE 'resOID: %', INSERT_RESULT.resOID;
        --
        -- GET OID AS REFRENCE
        --
        SELECT INTO v_new_iep id_form_013 FROM iep_form_013 WHERE oid = INSERT_RESULT.resOID;
        newPK              := v_new_iep.id_form_013;

        --
        -- UPDATE FIELDS WITH NEW DATA
        --
        UPDATE iep_form_013 
            SET 
                id_form_013_duped_from = $1,
                status = 'Draft',
                id_author = $2, 
                id_author_last_mod = $2,
                ifsptype = $3
            WHERE id_form_013 = newPK;
    
    
    
    
    ELSE
    
        -- primary_disability_drop_other} <- dont leave a space here, ie dont do this ->(primary_disability_drop_other })
        -- also, make sure you have the TABLE_PK_NAME field name in this FIELDS_ELIMINATE list
        FIELDS_ELIMINATE    := '{' || TABLE_PK_NAME || ', timestamp_created, timestamp_last_mod, id_form_013_duped_from, date_notice, meeting_date, meeting_date_sent, parent_understand_content, parent_understand_distribition, parent_date_1, parent_sig_1_on_file, parent_date_2, parent_sig_2_on_file, date_family_concerns, date_child_strengths, dev_vision_date, dev_hearing_date, dev_health_status_date, dev_cognitive_date, dev_communication_date, dev_social_date, dev_self_help_date, dev_fine_motor_date, dev_gross_motor_date}'; 

        --
        -- DUPE THE IFSP AND GET OID AS REFRENCE
        --
        SELECT INTO INSERT_RESULT dupe_row(TABLE_NAME, TABLE_PK_NAME, TABLE_PK, FIELDS_ELIMINATE) as resOID;
        --    RAISE NOTICE 'resOID: %', INSERT_RESULT.resOID;
        --
        -- GET OID AS REFRENCE
        --
        SELECT INTO v_new_iep id_form_013 FROM iep_form_013 WHERE oid = CAST(INSERT_RESULT.resOID AS oid);
        newPK              := v_new_iep.id_form_013;
        
        --
        -- UPDATE FIELDS WITH NEW DATA
        --
        UPDATE iep_form_013 
            SET 
                page_status = '000010110',
                status = 'Draft',
                id_author = $2, 
                id_author_last_mod = $2,
                ifsptype = $3
            WHERE id_form_013 = newPK;
    
    END IF;
    
    --
    -- DUPLICATE THE SUB FORMS
    --
    SELECT INTO v_new_iep duplicate_sub_rows(TABLE_PK, newPK, 'ifsp_goals', 'id_ifsp_goals', 'id_form_013', '{id_ifsp_goals}') as check;
    SELECT INTO v_new_iep duplicate_sub_rows(TABLE_PK, newPK, 'ifsp_parents', 'id_ifsp_parents', 'id_form_013', '{id_ifsp_parents}') as check;
    SELECT INTO v_new_iep duplicate_sub_rows(TABLE_PK, newPK, 'ifsp_services', 'id_ifsp_services', 'id_form_013', '{id_ifsp_services}') as check; -- 20080121 jlavere removed service_start, service_end
    SELECT INTO v_new_iep duplicate_sub_rows(TABLE_PK, newPK, 'ifsp_team_members', 'id_ifsp_team_members', 'id_form_013', '{id_ifsp_team_members}') as check;
    SELECT INTO v_new_iep duplicate_sub_rows(TABLE_PK, newPK, 'ifsp_team_other', 'id_ifsp_team_other', 'id_form_013', '{id_ifsp_team_other}') as check;
    SELECT INTO v_new_iep duplicate_sub_rows(TABLE_PK, newPK, 'ifsp_tran_plan_participants', 'id_ifsp_tran_plan_participants', 'id_form_013', '{id_ifsp_tran_plan_participants}') as check;

    RETURN newPK;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.dupe_ifsp(integer, integer, character varying, character varying, character varying, integer) OWNER TO postgres;

--
-- Name: dupe_mdt(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dupe_mdt(integer, integer) RETURNS integer
    AS $_$DECLARE
    TABLE_PK                    alias for $1;
    SESS_ID_USER                alias for $2;

    TABLE_NAME                  varchar;
    TABLE_PK_NAME               varchar;
    FIELDS_ELIMINATE            varchar[];
    
    INSERT_RESULT               record;
    v_old_mdt                   record;
    newPK                       integer;
    v_mdt_00603f2f              boolean;
    v_mdt_00603f2f_correctable  boolean;
    
BEGIN 
    TABLE_NAME          := 'iep_form_002';
    TABLE_PK_NAME       := 'id_form_002';
    FIELDS_ELIMINATE    := '{id_form_002, date_provided, timestamp_created, date_mdt, date_notice, status, initial_verification}';
    
    --
    -- GET A COPY OF THE OLD MDT
    --
    SELECT INTO v_old_mdt * FROM iep_form_002 where id_form_002 = TABLE_PK;
    RAISE NOTICE 'version_number: %', v_old_mdt.version_number;

    --
    -- DUPE THE MDT AND GET OID AS REFRENCE
    --
    SELECT INTO INSERT_RESULT dupe_row(TABLE_NAME, TABLE_PK_NAME, TABLE_PK, FIELDS_ELIMINATE) as resOID;
    SELECT INTO INSERT_RESULT id_form_002 FROM iep_form_002 WHERE oid = INSERT_RESULT.resOID;
    
    newPK              := INSERT_RESULT.id_form_002;
    --RAISE NOTICE 'newPK: %', newPK;


    IF(v_old_mdt.version_number = 1) THEN
        v_mdt_00603f2f := null;
        v_mdt_00603f2f_correctable := null;
        
    ELSE
        v_mdt_00603f2f := v_old_mdt.mdt_00603f2f;
        v_mdt_00603f2f_correctable := v_old_mdt.mdt_00603f2f_correctable;
    END IF;

    --
    -- UPDATE FIELDS WITH NEW DATA
    --
    UPDATE iep_form_002 
        SET 
            utf8header = true, 
            page_status = '0110', 
            team_member_agree = ';;;;;;;;;;;;', 
            id_author = SESS_ID_USER, 
            id_author_last_mod = SESS_ID_USER,

            mdt_00603f2f      = v_mdt_00603f2f,
            mdt_00603f2f_correctable      = v_mdt_00603f2f_correctable,
            mdt_00603f2g          = null,
            disability_mhmo       = null,
            disability_mhsp       = null,
            disability_hi_detail  = null

        WHERE id_form_002 = newPK;

    --SELECT INTO INSERT_RESULT dupe_iep_goals(TABLE_PK, newPK) as check;
    -- 
    -- above line removed as thought to be the culprit of dupe iep goals
    -- jlavere 20051020
    --
    --RAISE NOTICE 'check: %', INSERT_RESULT.check;
    RETURN newPK;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.dupe_mdt(integer, integer) OWNER TO postgres;

--
-- Name: dupe_mdt_create(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dupe_mdt_create(integer) RETURNS integer
    AS $_$CREATE TABLE iep_form_002_temp_dupe AS SELECT * FROM iep_form_002 WHERE id_form_002 = $1;
SELECT 1 FROM iep_form_002 LIMIT 1;
$_$
    LANGUAGE sql;


ALTER FUNCTION public.dupe_mdt_create(integer) OWNER TO postgres;

--
-- Name: dupe_mdt_drop(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dupe_mdt_drop() RETURNS integer
    AS $$DROP TABLE iep_form_002_temp_dupe;
SELECT 1 FROM iep_form_002 LIMIT 1;
$$
    LANGUAGE sql;


ALTER FUNCTION public.dupe_mdt_drop() OWNER TO postgres;

--
-- Name: dupe_mdt_full(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dupe_mdt_full(integer, integer) RETURNS integer
    AS $_$DECLARE
    TABLE_PK                    alias for $1;
    SESS_ID_USER                alias for $2;

    TABLE_NAME                  varchar;
    TABLE_PK_NAME               varchar;
    FIELDS_ELIMINATE            varchar[];
    
    INSERT_RESULT               record;
    v_old_mdt                   record;
    newPK                       integer;
    v_mdt_00603f2f              boolean;
    v_mdt_00603f2f_correctable  boolean;
    
BEGIN 
    TABLE_NAME          := 'iep_form_002';
    TABLE_PK_NAME       := 'id_form_002';
    FIELDS_ELIMINATE    := '{id_form_002, timestamp_created, status}';
    
    --
    -- GET A COPY OF THE OLD MDT
    --
    SELECT INTO v_old_mdt * FROM iep_form_002 where id_form_002 = TABLE_PK;
    RAISE NOTICE 'version_number: %', v_old_mdt.version_number;

    --
    -- DUPE THE MDT AND GET OID AS REFRENCE
    --
    SELECT INTO INSERT_RESULT dupe_row(TABLE_NAME, TABLE_PK_NAME, TABLE_PK, FIELDS_ELIMINATE) as resOID;
    SELECT INTO INSERT_RESULT id_form_002 FROM iep_form_002 WHERE oid = INSERT_RESULT.resOID;
    
    newPK              := INSERT_RESULT.id_form_002;
    --RAISE NOTICE 'newPK: %', newPK;


    IF(v_old_mdt.version_number = 1) THEN
        v_mdt_00603f2f := null;
        v_mdt_00603f2f_correctable := null;
        
    ELSE
        v_mdt_00603f2f := v_old_mdt.mdt_00603f2f;
        v_mdt_00603f2f_correctable := v_old_mdt.mdt_00603f2f_correctable;
    END IF;

    --
    -- UPDATE FIELDS WITH NEW DATA
    --
    UPDATE iep_form_002 
        SET 
            page_status = '1111', 
            id_author = SESS_ID_USER, 
            id_author_last_mod = SESS_ID_USER
            
        WHERE id_form_002 = newPK;

    RETURN newPK;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.dupe_mdt_full(integer, integer) OWNER TO postgres;

--
-- Name: dupe_mdt_supps(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dupe_mdt_supps(integer, integer, integer) RETURNS bigint
    AS $_$
INSERT INTO iep_form_004_supp 
(id_author, id_author_last_mod, id_form_004_supp, id_form_004, id_student, title, text_content, form_name, page_status, mdt) 
(select $1, $1, nextval('id_form_004_supp_seq'::text), $3, id_student, title, text_content, form_name, page_status, mdt from iep_form_004_supp where id_form_004 = $2); 
select count(*) from iep_form_004_supp where id_form_004 = $3;
$_$
    LANGUAGE sql;


ALTER FUNCTION public.dupe_mdt_supps(integer, integer, integer) OWNER TO postgres;

--
-- Name: dupe_mdt_zend(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dupe_mdt_zend(integer, integer) RETURNS integer
    AS $_$DECLARE
    TABLE_PK                    alias for $1;
    SESS_ID_USER                alias for $2;

    TABLE_NAME                  varchar;
    TABLE_PK_NAME               varchar;
    FIELDS_ELIMINATE            varchar[];
    
    INSERT_RESULT               record;
    v_old_mdt                   record;
    newPK                       integer;
    v_mdt_00603f2f              boolean;
    v_mdt_00603f2f_correctable  boolean;
    
BEGIN 
    TABLE_NAME          := 'iep_form_002';
    TABLE_PK_NAME       := 'id_form_002';
    FIELDS_ELIMINATE    := '{id_form_002, date_provided, timestamp_created, date_mdt, date_notice, status, initial_verification}';
    
    --
    -- GET A COPY OF THE OLD MDT
    --
    SELECT INTO v_old_mdt * FROM iep_form_002 where id_form_002 = TABLE_PK;
    RAISE NOTICE 'version_number: %', v_old_mdt.version_number;

    --
    -- DUPE THE MDT AND GET OID AS REFRENCE
    --
    SELECT INTO INSERT_RESULT dupe_row(TABLE_NAME, TABLE_PK_NAME, TABLE_PK, FIELDS_ELIMINATE) as resOID;
    SELECT INTO INSERT_RESULT id_form_002 FROM iep_form_002 WHERE oid = INSERT_RESULT.resOID;
    
    newPK              := INSERT_RESULT.id_form_002;
    --RAISE NOTICE 'newPK: %', newPK;


    IF(v_old_mdt.version_number = 1) THEN
        v_mdt_00603f2f := null;
        v_mdt_00603f2f_correctable := null;
        
    ELSE
        v_mdt_00603f2f := v_old_mdt.mdt_00603f2f;
        v_mdt_00603f2f_correctable := v_old_mdt.mdt_00603f2f_correctable;
    END IF;

    --
    -- UPDATE FIELDS WITH NEW DATA
    --
    UPDATE iep_form_002 
        SET 
            version_number = 9, 
            utf8header = true, 
            page_status = '0110', 
            team_member_agree = ';;;;;;;;;;;;', 
            id_author = SESS_ID_USER, 
            id_author_last_mod = SESS_ID_USER,

            mdt_00603f2f      = v_mdt_00603f2f,
            mdt_00603f2f_correctable      = v_mdt_00603f2f_correctable,
            mdt_00603f2g          = null,
            disability_mhmo       = null,
            disability_mhsp       = null,
            disability_hi_detail  = null

        WHERE id_form_002 = newPK;

    --SELECT INTO INSERT_RESULT dupe_iep_goals(TABLE_PK, newPK) as check;
    -- 
    -- above line removed as thought to be the culprit of dupe iep goals
    -- jlavere 20051020
    --
    --RAISE NOTICE 'check: %', INSERT_RESULT.check;
    RETURN newPK;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.dupe_mdt_zend(integer, integer) OWNER TO postgres;

--
-- Name: dupe_mdt_zend_to_zend(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dupe_mdt_zend_to_zend(integer, integer) RETURNS integer
    AS $_$DECLARE
    TABLE_PK                    alias for $1;
    SESS_ID_USER                alias for $2;

    TABLE_NAME                  varchar;
    TABLE_PK_NAME               varchar;
    FIELDS_ELIMINATE            varchar[];
    
    INSERT_RESULT               record;
    v_old_mdt                   record;
    newPK                       integer;
    v_mdt_00603f2f              boolean;
    v_mdt_00603f2f_correctable  boolean;
    
BEGIN 
    TABLE_NAME          := 'iep_form_002';
    TABLE_PK_NAME       := 'id_form_002';
    FIELDS_ELIMINATE    := '{id_form_002, date_provided, timestamp_created, date_mdt, date_notice, status, initial_verification}';
    
    --
    -- GET A COPY OF THE OLD MDT
    --
    SELECT INTO v_old_mdt * FROM iep_form_002 where id_form_002 = TABLE_PK;
    RAISE NOTICE 'version_number: %', v_old_mdt.version_number;

    --
    -- DUPE THE MDT AND GET OID AS REFRENCE
    --
    SELECT INTO INSERT_RESULT dupe_row(TABLE_NAME, TABLE_PK_NAME, TABLE_PK, FIELDS_ELIMINATE) as resOID;
    SELECT INTO INSERT_RESULT id_form_002 FROM iep_form_002 WHERE oid = INSERT_RESULT.resOID;
    
    newPK              := INSERT_RESULT.id_form_002;
    --RAISE NOTICE 'newPK: %', newPK;


    IF(v_old_mdt.version_number = 1) THEN
        v_mdt_00603f2f := null;
        v_mdt_00603f2f_correctable := null;
        
    ELSE
        v_mdt_00603f2f := v_old_mdt.mdt_00603f2f;
        v_mdt_00603f2f_correctable := v_old_mdt.mdt_00603f2f_correctable;
    END IF;

    --
    -- UPDATE FIELDS WITH NEW DATA
    --
    UPDATE iep_form_002 
        SET 
            version_number = 9, 
            utf8header = true, 
            page_status = '0110', 
            team_member_agree = ';;;;;;;;;;;;', 
            id_author = SESS_ID_USER, 
            id_author_last_mod = SESS_ID_USER,

            mdt_00603f2f      = v_mdt_00603f2f,
            mdt_00603f2f_correctable      = v_mdt_00603f2f_correctable,
            mdt_00603f2g          = null,
            disability_mhmo       = null,
            disability_mhsp       = null,
            disability_hi_detail  = null

        WHERE id_form_002 = newPK;

    --SELECT INTO INSERT_RESULT dupe_iep_goals(TABLE_PK, newPK) as check;
    -- 
    -- above line removed as thought to be the culprit of dupe iep goals
    -- jlavere 20051020
    --
    --RAISE NOTICE 'check: %', INSERT_RESULT.check;
    RETURN newPK;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.dupe_mdt_zend_to_zend(integer, integer) OWNER TO postgres;

--
-- Name: dupe_row(character varying, character varying, integer, character varying[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE OR REPLACE FUNCTION dupe_row(character varying, character varying, bigint, character varying[]) RETURNS character varying
    AS $_$DECLARE
    TABLE_NAME          alias for $1;
    TABLE_PK_NAME       alias for $2;
    TABLE_PK            alias for $3;
    FIELDS_ELIMINATE    alias for $4;

    a_output varchar;
    
    TABLE_FIELDS varchar;
    VALUE_FIELDS varchar;

    resOID varchar;
BEGIN 
    a_output := '';
    TABLE_FIELDS := table_field_names_less(TABLE_NAME, FIELDS_ELIMINATE, '');
    VALUE_FIELDS := table_field_names_less(TABLE_NAME, FIELDS_ELIMINATE, 'frm.');
--    RAISE NOTICE 'TABLE_FIELDS: %', TABLE_FIELDS;
--    RAISE NOTICE 'VALUE_FIELDS: %', VALUE_FIELDS;

    a_output := 'INSERT INTO ' || TABLE_NAME || ' (' || TABLE_FIELDS || ') ' || 'select ' || VALUE_FIELDS || ' FROM ' || TABLE_NAME || ' frm WHERE frm.' || TABLE_PK_NAME || ' = ' || TABLE_PK || ';';
--    RAISE NOTICE 'a_output: %', a_output;
    EXECUTE a_output; 
    
    GET DIAGNOSTICS resOID = RESULT_OID;
    RETURN resOID;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.dupe_row(character varying, character varying, integer, character varying[]) OWNER TO postgres;

--
-- Name: duplicate_sub_rows(bigint, bigint, character varying, character varying, character varying, character varying[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE OR REPLACE FUNCTION duplicate_sub_rows(bigint, bigint, character varying, character varying, character varying, character varying[]) RETURNS boolean
    AS $_$DECLARE
    --
    -- GIVEN PK_RECORD_OLD AND PK_RECORD_NEW (IDS FROM THE SAME PARENT TABLE, PARENT TABLE NAME IS NOT NEEDED)
    -- DUPLICATE RECORDS FROM CHILD TABLE (TABLE_NAME) WITH PARENT_KEY_NAME = PK_RECORD_OLD
    -- AND UPDATE THEM WITH TO HAVE PARENT_KEY_NAME = PK_RECORD_NEW

    PK_RECORD_OLD       alias for $1;
    PK_RECORD_NEW       alias for $2;
    TABLE_NAME          alias for $3; -- DUPE THE RECORDS IN THIS TABLE
    TABLE_PK_NAME       alias for $4; -- PRIMARY KEY IN THE TABLE WHERE DUPING WILL OCCUR
    PARENT_KEY_NAME     alias for $5; -- NAME OF THE FIELD THAT CONTAINS THE PK_RECORD_OLD VALUE
    FIELDS_ELIMINATE    alias for $6; -- FIELDS TO NULL WHEN DUPLICATING THE RECORD

    REC_GOAL            record;
    INSERT_RESULT       record;
    newOID              bigint;

    cmd                 varchar;
BEGIN
    cmd := 'SELECT ' || TABLE_PK_NAME || ' as var_recordid FROM ' || TABLE_NAME || ' WHERE ' || PARENT_KEY_NAME || ' = ' || PK_RECORD_OLD;
    --RAISE NOTICE 'cmd: %', cmd;

    FOR REC_GOAL IN EXECUTE cmd LOOP

        --
        -- DUPE THE RECORD AND GET OID AS REFRENCE
        --
        SELECT INTO INSERT_RESULT dupe_row(TABLE_NAME, TABLE_PK_NAME, REC_GOAL.var_recordid, FIELDS_ELIMINATE) as resOID;
        newOID := CAST(INSERT_RESULT.resOID AS oid);
        RAISE NOTICE 'newOID: %', newOID;

        --
        -- UPDATE FIELDS WITH NEW DATA
        -- specifically, update the new sub record with the id of its new parent record
        --
        cmd := 'UPDATE ' || TABLE_NAME || ' SET ' || PARENT_KEY_NAME || '=' || PK_RECORD_NEW || ' WHERE oid = ' || newOID;
        --RAISE NOTICE 'sub cmd: %', cmd;
        EXECUTE cmd;

    END LOOP;
    RETURN true;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.duplicate_sub_rows(integer, integer, character varying, character varying, character varying, character varying[]) OWNER TO postgres;

--
-- Name: each_element(integer, character varying, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION each_element(integer, character varying, character varying, character varying, integer) RETURNS character varying
    AS $_$DECLARE
    rowCount        alias for $1;
    unitTextArr     alias for $2;
    wArr            alias for $3;
    mArr            alias for $4;
    retFlag            alias for $5;

	THISCHAR varchar;
	THISVALw varchar;
	THISVALm varchar;
	
	newRWArr varchar;
	retArr varchar;
BEGIN 
	newRWArr := '';
	retArr := '';
	IF (rowCount >= 1) THEN 
		FOR i IN 1..rowCount LOOP
			THISCHAR := split_part(unitTextArr,'|',i);
			THISVALw := split_part(wArr,'|',i);
			THISVALm := split_part(mArr,'|',i);
			
			--
			-- check to make sure we have the right identifier
			--
			IF (THISCHAR is null) THEN 
				IF (THISVALm is not null) THEN
					THISCHAR := 'm';
				ELSE
					THISCHAR := 'w';
				END IF;
			END IF;
			--
			-- prep the unit array
			--
			IF (newRWArr = '') THEN
				newRWArr := THISCHAR;
			ELSE 
				newRWArr := newRWArr || '|' || THISCHAR;
			END IF;
			
			--RAISE NOTICE 'i is %', i;
			--RAISE NOTICE 'THISCHAR is %', THISCHAR;
			--RAISE NOTICE 'THISVALw is %', THISVALw;
			--RAISE NOTICE 'THISVALm is %', THISVALm;
	
	
			if (THISCHAR = 'w') THEN
				IF (retArr = '') THEN
					retArr := THISVALw;
				ELSE 
					retArr := retArr || '|' || THISVALw;
				END IF;
			ELSIF (THISCHAR = 'm') THEN
				IF (retArr = '') THEN
					retArr := THISVALm;
				ELSE 
					retArr := retArr || '|' || THISVALm;
				END IF;
			END IF;
		END LOOP;
	END IF;
	IF (retFlag = 0) THEN
		return retArr;
	ELSE 
		return newRWArr;
	END IF;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.each_element(integer, character varying, character varying, character varying, integer) OWNER TO postgres;

--
-- Name: element_in_array(character varying[], character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION element_in_array(character varying[], character varying) RETURNS boolean
    AS $_$DECLARE
    CHECK_ARRAY alias for $1;
    GET_ELEMENT alias for $2;
    i integer;
BEGIN 
    i := 1;
    WHILE (CHECK_ARRAY[i] is not null) LOOP
        IF (CHECK_ARRAY[i] = GET_ELEMENT) THEN
            RETURN true;
        END IF;
        i := i+1;
    END LOOP;
    RETURN false;
END;$_$
    LANGUAGE plpgsql IMMUTABLE STRICT;


ALTER FUNCTION public.element_in_array(character varying[], character varying) OWNER TO postgres;

--
-- Name: enabletriggers(name); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION enabletriggers(name) RETURNS boolean
    AS $_$
DECLARE
	rel ALIAS FOR $1;
	rows INTEGER;
BEGIN
	UPDATE pg_class SET reltriggers =
	       (SELECT count(*) FROM pg_trigger WHERE pg_class.oid = tgrelid)
	       WHERE relname ~~* rel;
	       GET DIAGNOSTICS rows = ROW_COUNT;
	       IF rows > 0 THEN
		  RETURN TRUE;
		  ELSE
			RAISE NOTICE 'Relation does not exists';
			RETURN FALSE;
			END IF;
END;
$_$
    LANGUAGE plpgsql STRICT;


ALTER FUNCTION public.enabletriggers(name) OWNER TO postgres;

--
-- Name: foo(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION foo() RETURNS integer
    AS $$begin return -1; end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.foo() OWNER TO postgres;

--
-- Name: form_count(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION form_count(integer) RETURNS integer
    AS $_$DECLARE
    ID_STUDENT      alias for $1;
    
    FORM_NAMES      varchar[];
    i               integer;
    TOTAL_COUNT     integer;
    REC_GOAL        record;
    cmd             varchar;
    
BEGIN 
    
    FORM_NAMES    := '{iep_form_001, iep_form_002, iep_form_003, iep_form_004, iep_form_005, iep_form_006, iep_form_007, iep_form_008, iep_form_009, iep_form_010, iep_form_011, iep_form_012, iep_form_013, iep_form_014, iep_form_015, iep_form_016, iep_form_017, iep_form_018, iep_form_019, iep_form_020, iep_form_021, iep_form_022, iep_form_023}';
    i := 1;
    TOTAL_COUNT := 0;
    
    WHILE (FORM_NAMES[i] is not null) LOOP
        cmd := 'SELECT count(1) as count from ' || FORM_NAMES[i] || ' where id_student =  ' || $1;
        FOR REC_GOAL IN EXECUTE cmd LOOP
            --raise notice 'count: %', REC_GOAL.count;
            TOTAL_COUNT = TOTAL_COUNT + REC_GOAL.count;
        END LOOP;
        i := i+1;
    END LOOP;    



    
    RETURN TOTAL_COUNT;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.form_count(integer) OWNER TO postgres;

--
-- Name: form_version_number(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION form_version_number() RETURNS "trigger"
    AS $$
DECLARE

BEGIN
    IF (TG_RELNAME = 'iep_form_001' ) THEN
        NEW.version_number := 2;
    
    ELSIF (TG_RELNAME = 'iep_form_002' ) THEN
        NEW.version_number := 4;
        
    ELSIF (TG_RELNAME = 'iep_form_003' ) THEN
        NEW.version_number := 4;
        
    ELSIF (TG_RELNAME = 'iep_form_004' ) THEN
        NEW.version_number := 3;
        
    ELSIF (TG_RELNAME = 'iep_form_007' ) THEN
        NEW.version_number := 2;
        
    ELSIF (TG_RELNAME = 'iep_form_014' ) THEN
        NEW.version_number := 2;
        
    ELSIF (TG_RELNAME = 'iep_form_015' ) THEN
        NEW.version_number := 2;

    ELSIF (TG_RELNAME = 'iep_form_023' ) THEN
        NEW.version_number := 2;
        
    ELSE 
        NEW.version_number := 1;
    END IF;
    
    RETURN NEW;
    
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.form_version_number() OWNER TO postgres;

--
-- Name: get_active_id_list_team(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_active_id_list_team(integer) RETURNS character varying
    AS $_$DECLARE 
    
	team_rows record; 
	retval text; 
begin 

	retval := ''; 
	
	for team_rows in select id_personnel from iep_student_team where id_student=$1 and status = 'Active' LOOP 
		retval := retval || team_rows.id_personnel::text || ';';  
	END LOOP; 

return retval; 
        
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_active_id_list_team(integer) OWNER TO postgres;

--
-- Name: get_guardian_names(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_guardian_names(integer) RETURNS text
    AS $_$declare guardian_rows record; retval text;  begin retval := ''; for guardian_rows in select id_guardian, name_first, name_last from iep_guardian where id_student=$1 LOOP retval := retval || guardian_rows.name_first::text || ' ' || guardian_rows.name_last::text  || ', '; END LOOP; retval := trim( trailing ' ' from retval);  retval := trim( trailing ' ,' from retval); return retval; end;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_guardian_names(integer) OWNER TO postgres;

--
-- Name: get_guardians(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_guardians(integer) RETURNS text
    AS $_$declare guardian_rows record; retval text; id_student_in alias for $1; begin retval := ''; for guardian_rows in select id_guardian from iep_guardian where id_student= id_student_in ORDER BY id_guardian DESC LOOP retval := retval || guardian_rows.id_guardian::text || ';'; END LOOP; return retval; end;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_guardians(integer) OWNER TO postgres;

--
-- Name: get_guardians_main(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_guardians_main(integer) RETURNS text
    AS $_$declare guardian_rows record; retval text; id_student alias for $1; begin retval := ''; for guardian_rows in select id_guardian from iep_guardian where id_student_local=$1 LOOP retval := retval || guardian_rows.id_guardian::text || ';'; END LOOP; return retval; end;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_guardians_main(integer) OWNER TO postgres;

--
-- Name: get_guardians_regular(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_guardians_regular(integer) RETURNS text
    AS $_$declare guardian_rows record; retval text;  begin retval := ''; for guardian_rows in select id_guardian from iep_guardian where id_student=$1 LOOP retval := retval || guardian_rows.id_guardian::text  || '; '; END LOOP; retval := trim( trailing ' ' from retval);  return retval; end;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_guardians_regular(integer) OWNER TO postgres;

--
-- Name: get_id_list_team(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_id_list_team(integer) RETURNS text
    AS $_$declare team_rows record; retval text; begin retval := ''; for team_rows in select id_personnel from iep_student_team where id_student=$1 LOOP retval := retval || team_rows.id_personnel::text || ';';  END LOOP; return retval; end;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_id_list_team(integer) OWNER TO postgres;

--
-- Name: get_master_student_from_local(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_master_student_from_local(integer) RETURNS integer
    AS $_$DECLARE ret int4; BEGIN SELECT INTO ret id_student FROM iep_student WHERE id_student_local = $1; RETURN ret; END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_master_student_from_local(integer) OWNER TO postgres;

--
-- Name: get_master_student_from_local_w(integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_master_student_from_local_w(integer, text) RETURNS integer
    AS $_$DECLARE ret int4; BEGIN SELECT INTO ret id_student FROM iep_student WHERE id_student_local = $1 AND data_source = $2; RETURN ret; END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_master_student_from_local_w(integer, text) OWNER TO postgres;

--
-- Name: get_most_recent_determination_notice(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_most_recent_determination_notice(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret to_char(date_notice::date, 'yyyy-mm-dd') FROM iep_form_001 WHERE id_student = $1 AND status = 'Final' ORDER BY date_notice DESC, timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_most_recent_determination_notice(integer) OWNER TO postgres;

--
-- Name: get_most_recent_iep_date_conference(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_most_recent_iep_date_conference(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret to_char(date_conference::date, 'yyyy-mm-dd') FROM iep_form_004 WHERE id_student = $1 AND status = 'Final' ORDER BY date_conference DESC, timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_most_recent_iep_date_conference(integer) OWNER TO postgres;

--
-- Name: get_most_recent_iep_date_created(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_most_recent_iep_date_created(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret to_char(timestamp_created::date, 'yyyy-mm-dd')  FROM iep_form_004 WHERE id_student = $1 AND status = 'Draft' ORDER BY timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_most_recent_iep_date_created(integer) OWNER TO postgres;

--
-- Name: get_most_recent_iep_draft_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_most_recent_iep_draft_id(integer) RETURNS integer
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret id_form_004 FROM iep_form_004 WHERE id_student = $1 AND status = 'Draft' ORDER BY date_conference DESC, timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_most_recent_iep_draft_id(integer) OWNER TO postgres;

--
-- Name: get_most_recent_ifsp_date_conference(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_most_recent_ifsp_date_conference(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret to_char(meeting_date::date, 'yyyy-mm-dd') FROM iep_form_013 WHERE id_student = $1 AND status = 'Final' ORDER BY meeting_date DESC, timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_most_recent_ifsp_date_conference(integer) OWNER TO postgres;

--
-- Name: get_most_recent_ifsp_date_created(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_most_recent_ifsp_date_created(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret to_char(timestamp_created::date, 'yyyy-mm-dd') FROM iep_form_013 WHERE id_student = $1 AND status = 'Draft' ORDER BY timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_most_recent_ifsp_date_created(integer) OWNER TO postgres;

--
-- Name: get_most_recent_ifsp_draft_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_most_recent_ifsp_draft_id(integer) RETURNS integer
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret id_form_013 FROM iep_form_013 WHERE id_student = $1 AND status = 'Draft' ORDER BY meeting_date DESC, timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_most_recent_ifsp_draft_id(integer) OWNER TO postgres;

--
-- Name: get_most_recent_ifsp_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_most_recent_ifsp_id(integer) RETURNS integer
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret id_form_013 FROM iep_form_013 WHERE id_student = $1 AND status = 'Final' ORDER BY meeting_date DESC, timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_most_recent_ifsp_id(integer) OWNER TO postgres;

--
-- Name: get_most_recent_ifsp_meeting_date(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_most_recent_ifsp_meeting_date(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret to_char(meeting_date::date, 'yyyy-mm-dd') FROM iep_form_013 WHERE id_student = $1 AND status = 'Final' ORDER BY meeting_date DESC, timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_most_recent_ifsp_meeting_date(integer) OWNER TO postgres;

--
-- Name: get_most_recent_mdt_date_conference(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_most_recent_mdt_date_conference(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret to_char(date_mdt::date, 'yyyy-mm-dd') FROM iep_form_002 WHERE id_student = $1 AND status = 'Final' ORDER BY date_mdt DESC, timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_most_recent_mdt_date_conference(integer) OWNER TO postgres;

--
-- Name: get_most_recent_mdt_disability_primary(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_most_recent_mdt_disability_primary(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret disability_primary FROM iep_form_002 WHERE id_student = $1 AND status = 'Final' ORDER BY date_mdt DESC, timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_most_recent_mdt_disability_primary(integer) OWNER TO postgres;

--
-- Name: get_most_recent_mdt_draft_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_most_recent_mdt_draft_id(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret id_form_002 FROM iep_form_002 WHERE id_student = $1 AND status = 'Draft' ORDER BY date_mdt DESC, timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_most_recent_mdt_draft_id(integer) OWNER TO postgres;

--
-- Name: get_name_case_mgr(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_name_case_mgr(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN SELECT INTO ret CAST(name_first || ' ' || name_last AS TEXT) FROM iep_personnel WHERE id_personnel = $1; RETURN ret; END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_name_case_mgr(integer) OWNER TO postgres;

--
-- Name: get_name_county(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_name_county(text) RETURNS text
    AS $_$DECLARE ret text; BEGIN SELECT INTO ret CAST(name_county AS TEXT) FROM iep_county WHERE id_county = $1; RETURN ret; END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_name_county(text) OWNER TO postgres;

--
-- Name: get_name_county_nonpublic(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_name_county_nonpublic(character varying, character varying, character varying) RETURNS character varying
    AS $_$
    DECLARE 
        ret text; 
    BEGIN SELECT INTO ret CAST(county_name AS TEXT) FROM iep_school_non_public WHERE id_county = $1 and id_district = $2 and id_school = $3;
        RETURN ret;

END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_name_county_nonpublic(character varying, character varying, character varying) OWNER TO postgres;

--
-- Name: get_name_district(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_name_district(text, text) RETURNS text
    AS $_$DECLARE ret text; BEGIN SELECT INTO ret CAST(name_district AS TEXT) FROM iep_district WHERE id_county = $1 AND id_district = $2; RETURN ret; END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_name_district(text, text) OWNER TO postgres;

--
-- Name: get_name_district_nonpublic(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_name_district_nonpublic(character varying, character varying, character varying) RETURNS character varying
    AS $_$
    DECLARE 
        ret text; 
    BEGIN SELECT INTO ret CAST(mailing_city AS TEXT) FROM iep_school_non_public WHERE id_county = $1 and id_district = $2 and id_school = $3;
        RETURN ret;

END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_name_district_nonpublic(character varying, character varying, character varying) OWNER TO postgres;

--
-- Name: get_name_first(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_name_first(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN SELECT INTO ret CAST(name_first AS TEXT) FROM iep_personnel WHERE id_personnel = $1; RETURN ret; END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_name_first(integer) OWNER TO postgres;

--
-- Name: get_name_guardian(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_name_guardian(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN SELECT INTO ret CAST(name_first || ' ' || name_last AS TEXT) FROM iep_guardian WHERE id_guardian = $1; RETURN ret; END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_name_guardian(integer) OWNER TO postgres;

--
-- Name: get_name_last(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_name_last(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN SELECT INTO ret CAST(name_last AS TEXT) FROM iep_personnel WHERE id_personnel = $1; RETURN ret; END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_name_last(integer) OWNER TO postgres;

--
-- Name: get_name_personnel(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_name_personnel(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN SELECT INTO ret CAST(name_first || ' ' || name_last AS TEXT) FROM iep_personnel WHERE id_personnel = $1; RETURN ret; END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_name_personnel(integer) OWNER TO postgres;

--
-- Name: get_name_school(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_name_school(text, text, text) RETURNS text
    AS $_$DECLARE ret text; BEGIN SELECT INTO ret CAST(name_school AS TEXT) FROM iep_school WHERE id_county = $1 AND id_district = $2 AND id_school = $3; RETURN ret; END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_name_school(text, text, text) OWNER TO postgres;

--
-- Name: get_name_school_nonpublic(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_name_school_nonpublic(character varying, character varying, character varying) RETURNS character varying
    AS $_$
    DECLARE 
        ret text; 
    BEGIN SELECT INTO ret CAST(name AS TEXT) FROM iep_school_non_public WHERE id_county = $1 and id_district = $2 and id_school = $3;
        RETURN ret;

END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_name_school_nonpublic(character varying, character varying, character varying) OWNER TO postgres;

--
-- Name: get_parentexists(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_parentexists(integer) RETURNS character varying
    AS $_$DECLARE ret text; 
BEGIN 

SELECT INTO ret CASE WHEN (char_length(id_form_013_duped_from) > 0 and (select 1 from iep_form_013 where id_form_013 = f.id_form_013_duped_from) > 0 ) THEN 'parent exists' WHEN (char_length(id_form_013_duped_from) >0  ) THEN 'no parent, should have parent' ELSE 'no parent' END as parentExists FROM iep_form_013 f WHERE id_form_013 = $1; 

RETURN ret; 

END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_parentexists(integer) OWNER TO postgres;

--
-- Name: get_priv_location(text, text, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_priv_location(text, text, text, integer) RETURNS integer
    AS $_$update iep_privileges
set name_county = get_name_county($1),
name_district = get_name_district($1, $2),
name_school = get_name_school($1, $2, $3)
where id_privileges = $4;
select 1 from iep_privileges where id_privileges = $4;$_$
    LANGUAGE sql;


ALTER FUNCTION public.get_priv_location(text, text, text, integer) OWNER TO postgres;

--
-- Name: get_related_services(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_related_services(integer) RETURNS text
    AS $_$
    declare 
        related_service_rec record; 
        iep_rec record; 
        retval text;  
    begin 
        -- passed param is id_form_004
        Raise Notice 'id_form_004: %', $1;
        retval := ''; 

select into iep_rec version_number, related_service_drop from iep_form_004 where id_form_004 = $1; 
        IF iep_rec.version_number >= 9 THEN
        for related_service_rec in select * from form_004_related_service where status='Active' and id_form_004=$1 LOOP
        Raise Notice 'related_service_rec: %', related_service_rec.related_service_drop;
            retval := retval || related_service_rec.related_service_drop  || ', '; 
            
        END LOOP; 
        ELSE
        retval := replace(iep_rec.related_service_drop, '|', ', ');
        END IF;

        retval := trim( trailing ' ' from retval);  
        retval := trim( trailing ' ,' from retval); 
        return retval; 
    end;
    $_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_related_services(integer) OWNER TO postgres;

--
-- Name: get_student_entry_date(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_student_entry_date(integer) RETURNS date
    AS $_$

DECLARE                                                                                                   
    ID_STU ALIAS FOR $1;                                                            
    ret_date date;
    mdt_rec RECORD;                                                                                           
    mdt_datacard_rec RECORD;                                                                                           
                                                                                                          
BEGIN 
    
    ret_date := null;
    RAISE NOTICE '-------------- %', $1;
    --
    -- get mdts
    --
    SELECT INTO mdt_rec initial_verification_date FROM iep_form_002 WHERE id_student = $1 AND status = 'Final' and initial_verification_date is not null ORDER BY date_mdt DESC, timestamp_created DESC; 

    IF NOT FOUND THEN                                                                                     
        
    ELSE                                                                                                  
        --RETURN rec.full_name;
        RAISE NOTICE 'date_mdt: %', mdt_rec.initial_verification_date;
        ret_date := mdt_rec.initial_verification_date;
    END IF;                                                                                               

    --
    -- get mdt data cards
    --
    SELECT INTO mdt_datacard_rec initial_verification_date FROM iep_form_022 WHERE id_student = $1 AND status = 'Final' and initial_verification_date is not null ORDER BY date_mdt DESC, timestamp_created DESC; 
    IF NOT FOUND THEN                                                                                     
        
    ELSE                                                                                                  
        RAISE NOTICE 'mdt_datacard_rec: %', mdt_datacard_rec.initial_verification_date;
        if ret_date is null then
            ret_date := mdt_datacard_rec.initial_verification_date;
        else
            RAISE NOTICE 'not null';
            if (mdt_rec.initial_verification_date < ret_date) then
                RAISE NOTICE 'set new date';
                ret_date := mdt_datacard_rec.initial_verification_date;
            end if;
        end if;
    END IF;                                                                                               

    RETURN ret_date;
END;                                                                                                      

$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_student_entry_date(integer) OWNER TO postgres;

--
-- Name: get_team_member_names(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_team_member_names(integer) RETURNS text
    AS $_$
    declare 
        teammember_rows record; 
        personnel_rec record; 
        retval text;  
    begin 
        -- passed param is id_student
        retval := ''; 
        for teammember_rows in select id_personnel from iep_student_team where status='Active' and id_student=$1 LOOP
            select * into personnel_rec from iep_personnel where id_personnel = teammember_rows.id_personnel; 
            retval := retval || personnel_rec.name_first::text || ' ' || personnel_rec.name_last::text  || ', '; 
        END LOOP; 
        retval := trim( trailing ' ' from retval);  
        retval := trim( trailing ' ,' from retval); 
        return retval; 
    end;
    $_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.get_team_member_names(integer) OWNER TO postgres;

--
-- Name: getguardians(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION getguardians(integer) RETURNS text
    AS $_$declare guardian_rows record; retval text; id_student alias for $1; begin retval := ''; for guardian_rows in select id_guardian from iep_guardian_temp where id_student_local=$1 LOOP retval := retval || guardian_rows.id_guardian::text || ';';  END LOOP; return retval; end;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.getguardians(integer) OWNER TO postgres;

--
-- Name: gettime(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gettime() RETURNS timestamp without time zone
    AS $$
    DECLARE
        curtime timestamp;
    BEGIN
        curtime := 'now';
        RETURN curtime;
    END;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.gettime() OWNER TO postgres;

--
-- Name: iep_guardian_set_guardian_list(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION iep_guardian_set_guardian_list() RETURNS "trigger"
    AS $$begin
    update iep_student set id_list_guardian = get_guardians(NEW.id_student) where id_student = NEW.id_student;
return new;
end$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.iep_guardian_set_guardian_list() OWNER TO postgres;

--
-- Name: iep_guardian_set_guardian_list_(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION iep_guardian_set_guardian_list_() RETURNS "trigger"
    AS $$DECLARE 
 BEGIN 

 update iep_student set id_list_guardian = get_guardians(OLD.id_student) where id_student = OLD.id_student; 
 return OLD; 
 RETURN OLD; 
    
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.iep_guardian_set_guardian_list_() OWNER TO postgres;

--
-- Name: iep_team_district_intisortnum(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION iep_team_district_intisortnum() RETURNS "trigger"
    AS $$
    DECLARE 
    
        INSERT_RESULT       record;
    BEGIN
        
        ----------------------------------------------------------------------------------------------------------------
        ----------------------------------------------------------------------------------------------------------------
        -- 
        -- CHECK TO SEE IF nonPubCounty ONLY HAS CHANGED
        -- 
        RAISE NOTICE 'NEW.id_form_004: %', NEW.id_form_004;
        
        IF NEW.sortnum is null THEN
            RAISE NOTICE 'sortnum NULL';
            
            SELECT INTO INSERT_RESULT max(sortnum) as maxid from iep_team_district where id_form_004 = NEW.id_form_004;
            
            RAISE NOTICE 'maxid: %', INSERT_RESULT.maxid;
            --
            -- UPDATE THE SORTNUM FIELD WITH THE NEXT SERIAL NUMBER
            --
            NEW.sortnum := INSERT_RESULT.maxid + 1; 
        END IF;
        
        ---------------------------------------------------------------------------------------------------------------- 
        ----------------------------------------------------------------------------------------------------------------
    
        
        RETURN NEW; 
    
    END;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.iep_team_district_intisortnum() OWNER TO postgres;

--
-- Name: iep_team_other_intisortnum(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION iep_team_other_intisortnum() RETURNS "trigger"
    AS $$
    DECLARE 
    
        INSERT_RESULT       record;
    BEGIN
        
        ----------------------------------------------------------------------------------------------------------------
        ----------------------------------------------------------------------------------------------------------------
        -- 
        -- CHECK TO SEE IF nonPubCounty ONLY HAS CHANGED
        -- 
        RAISE NOTICE 'NEW.id_form_004: %', NEW.id_form_004;
        
        IF NEW.sortnum is null THEN
            RAISE NOTICE 'sortnum NULL';
            
            SELECT INTO INSERT_RESULT max(sortnum) as maxid from iep_team_other where id_form_004 = NEW.id_form_004;
            
            RAISE NOTICE 'maxid: %', INSERT_RESULT.maxid;
            --
            -- UPDATE THE SORTNUM FIELD WITH THE NEXT SERIAL NUMBER
            --
            NEW.sortnum := INSERT_RESULT.maxid + 1; 
        END IF;
        
        ---------------------------------------------------------------------------------------------------------------- 
        ----------------------------------------------------------------------------------------------------------------
    
        
        RETURN NEW; 
    
    END;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.iep_team_other_intisortnum() OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = true;

--
-- Name: iep_form_013; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_013 (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form integer DEFAULT nextval(('"master_form_id_form_seq"'::text)::regclass) NOT NULL,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    name_county character varying,
    name_district character varying,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    id_form_013 integer DEFAULT nextval(('"iep_form_013_id_form_013_seq"'::text)::regclass) NOT NULL,
    ifsptype character varying,
    interpreter boolean,
    family_lang character varying,
    sc_name character varying,
    sc_phone character varying,
    sc_address character varying,
    date_family_concerns date,
    family_concerns character varying,
    date_child_strengths date,
    child_strengths character varying,
    tran_con_date date,
    extimated_tran_date date,
    service_sp_conditions character varying,
    service_sp_conditions_yn boolean,
    service_justification character varying,
    parent_understand_content boolean,
    parent_understand_distribition boolean,
    parent_sig_1 character varying,
    parent_sig_1_on_file character varying,
    parent_sig_2 character varying,
    parent_sig_2_on_file character varying,
    parent_date_1 date,
    parent_date_2 date,
    parent_comments character varying,
    parent_sig_on_file_explain character varying,
    dev_vision_desc character varying,
    dev_vision_date date,
    dev_hearing_desc character varying,
    dev_hearing_date date,
    dev_health_status_desc character varying,
    dev_health_status_date date,
    dev_cognitive_desc character varying,
    dev_cognitive_date date,
    dev_communication_desc character varying,
    dev_communication_date date,
    dev_social_desc character varying,
    dev_social_date date,
    dev_self_help_desc character varying,
    dev_self_help_date date,
    dev_fine_motor_desc character varying,
    dev_fine_motor_date date,
    dev_gross_motor_desc character varying,
    dev_gross_motor_date date,
    meeting_date date,
    meeting_date_sent date,
    meeting_date_list character varying,
    meeting_date_sent_list character varying,
    date_mdt date,
    transition_plan boolean DEFAULT false,
    transitioned boolean,
    dob date,
    grade character varying,
    eval_date date,
    id_case_mgr_old integer,
    family_lang_second character varying,
    ssn_form character varying,
    medicaid_form character varying,
    dev_vision_checkbox boolean,
    dev_hearing_checkbox boolean,
    dev_health_status_checkbox boolean,
    dev_cognitive_checkbox boolean,
    dev_communication_checkbox boolean,
    dev_social_checkbox boolean,
    dev_self_help_checkbox boolean,
    dev_fine_motor_checkbox boolean,
    dev_gross_motor_checkbox boolean,
    ifsptype_secondary_role character varying,
    version_number integer,
    id_form_013_duped_from integer,
    utf8header boolean,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer,
    sc_agency character varying
);


ALTER TABLE public.iep_form_013 OWNER TO postgres;

--
-- Name: ifsp_active_forms(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ifsp_active_forms(integer) RETURNS SETOF iep_form_013
    AS $_$DECLARE

    ssSearch            record;
--    rec                 record;
    rec iep_form_013%rowtype;

    MASTER_ID           varchar;
    RETTEXT             varchar;
    i                   integer;
    ret                 integer;
    RET_ARRAY           integer[];
BEGIN 
    i := 1;
    RAISE NOTICE 'student id: %', $1;
    FOR ssSearch IN select distinct ifsp_master_parent(id_form_013) as masterid from iep_form_013 where id_student = $1 LOOP
        MASTER_ID := ssSearch.masterid;
        RAISE NOTICE 'field: %', MASTER_ID;

        FOR rec IN select * from iep_form_013 where ifsp_master_parent(id_form_013) = MASTER_ID order by timestamp_created desc limit 1 
        LOOP

            RAISE NOTICE 'rec: %', rec.id_form_013;

            RETURN NEXT rec;
        
        END LOOP;
        i := i + 1;
    END LOOP;
   
    RETURN; 

END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ifsp_active_forms(integer) OWNER TO postgres;

--
-- Name: ifsp_master_parent(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ifsp_master_parent(integer) RETURNS integer
    AS $_$DECLARE ret integer; 
BEGIN 

SELECT INTO ret CASE 
    WHEN (id_form_013_duped_from is not null and (select 1 from iep_form_013 where id_form_013 = f.id_form_013_duped_from) > 0 ) 
        THEN ifsp_master_parent(id_form_013_duped_from) 
    WHEN (id_form_013_duped_from is not null) 
        THEN '-2' 
    ELSE $1
    END as parentExists FROM iep_form_013 f WHERE id_form_013 = $1; 

RETURN ret; 

END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ifsp_master_parent(integer) OWNER TO postgres;

--
-- Name: lookup_form_004_id(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lookup_form_004_id() RETURNS opaque
    AS $$BEGIN SELECT INTO new.id_form_004 id_form_004 FROM iep_form_004_goal WHERE id_form_004_goal = new.id_form_004_goal; RETURN new; END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.lookup_form_004_id() OWNER TO postgres;

--
-- Name: lookup_name_case_mgr(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lookup_name_case_mgr() RETURNS "trigger"
    AS $$
DECLARE id integer;
BEGIN 
  IF new.status != 'Final' THEN
    SELECT INTO id id_case_mgr FROM iep_student WHERE id_student = new.id_student; SELECT INTO new.name_case_mgr CAST(name_first || ' ' || name_last AS TEXT) FROM iep_personnel WHERE id_personnel = id;
  END IF;
  RETURN new;
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.lookup_name_case_mgr() OWNER TO postgres;

--
-- Name: lookup_name_district(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lookup_name_district() RETURNS "trigger"
    AS $$
DECLARE student_rec record; 
BEGIN
  IF new.status != 'Final' THEN
    SELECT INTO student_rec * FROM iep_student WHERE id_student = new.id_student; SELECT INTO new.name_district name_district FROM iep_district WHERE id_county = student_rec.id_county AND id_district = student_rec.id_district;
  END IF;
  RETURN new;
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.lookup_name_district() OWNER TO postgres;

--
-- Name: lookup_name_school(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lookup_name_school() RETURNS "trigger"
    AS $$
DECLARE student_rec record;
BEGIN 
  IF new.status != 'Final' THEN
    SELECT INTO student_rec * FROM iep_student WHERE id_student = new.id_student;
    SELECT INTO new.name_school name_school FROM iep_school WHERE id_county = student_rec.id_county AND id_district = student_rec.id_district AND id_school = student_rec.id_school;
  END IF;
  RETURN new;
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.lookup_name_school() OWNER TO postgres;

--
-- Name: lookup_student_dob(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lookup_student_dob() RETURNS "trigger"
    AS $$
BEGIN
  IF new.status != 'Final' THEN
    SELECT INTO new.dob dob FROM iep_student WHERE id_student = new.id_student;
  END IF;
  RETURN new;
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.lookup_student_dob() OWNER TO postgres;

--
-- Name: lookup_student_grade(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lookup_student_grade() RETURNS "trigger"
    AS $$
BEGIN
  IF new.status != 'Final' THEN
    SELECT INTO new.grade grade FROM iep_student WHERE id_student = new.id_student;
  END IF;
  RETURN new;
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.lookup_student_grade() OWNER TO postgres;

--
-- Name: lookup_student_id_case_mgr(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lookup_student_id_case_mgr() RETURNS "trigger"
    AS $$
BEGIN
 IF new.status != 'Final' THEN 
    SELECT INTO new.id_case_mgr id_case_mgr FROM iep_student WHERE id_student = new.id_student; 
 END IF; 
 RETURN new; 
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.lookup_student_id_case_mgr() OWNER TO postgres;

--
-- Name: lookup_student_id_county(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lookup_student_id_county() RETURNS "trigger"
    AS $$
DECLARE 
	    studentRec RECORD;
BEGIN

  IF new.status != 'Final' THEN
    SELECT INTO studentRec * FROM iep_student WHERE id_student = new.id_student;
    IF NOT FOUND OR studentRec.id_county = null THEN
        RETURN new; 
    ELSE
        new.id_county := studentRec.id_county;
    END IF;
  END IF;
  RETURN new;
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.lookup_student_id_county() OWNER TO postgres;

--
-- Name: lookup_student_id_district(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lookup_student_id_district() RETURNS "trigger"
    AS $$
DECLARE 
	    studentRec RECORD;
BEGIN

  IF new.status != 'Final' THEN
    SELECT INTO studentRec * FROM iep_student WHERE id_student = new.id_student;
    IF NOT FOUND OR studentRec.id_district = null THEN
        RETURN new; 
    ELSE
        new.id_district := studentRec.id_district;
    END IF;
  END IF;
  RETURN new;
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.lookup_student_id_district() OWNER TO postgres;

--
-- Name: lookup_student_id_goal(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lookup_student_id_goal() RETURNS opaque
    AS $$
BEGIN
  IF new.status != 'Final' THEN
    SELECT INTO new.id_student id_student FROM iep_form_004_goal WHERE id_form_004_goal = new.id_form_004_goal;
  END IF;
  RETURN new;
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.lookup_student_id_goal() OWNER TO postgres;

--
-- Name: lookup_student_id_school(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lookup_student_id_school() RETURNS "trigger"
    AS $$
DECLARE 
	    studentRec RECORD;
BEGIN

  IF new.status != 'Final' THEN
    SELECT INTO studentRec * FROM iep_student WHERE id_student = new.id_student;
    IF NOT FOUND OR studentRec.id_school = null THEN
        RETURN new; 
    ELSE
        new.id_school := studentRec.id_school;
    END IF;
  END IF;
  RETURN new;
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.lookup_student_id_school() OWNER TO postgres;

--
-- Name: lookup_student_name_first(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lookup_student_name_first() RETURNS "trigger"
    AS $$
BEGIN
  IF new.status != 'Final' THEN
    SELECT INTO new.name_first name_first FROM iep_student WHERE id_student = new.id_student;
  END IF;
  RETURN new;
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.lookup_student_name_first() OWNER TO postgres;

--
-- Name: lookup_student_name_last(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lookup_student_name_last() RETURNS "trigger"
    AS $$
BEGIN
  IF new.status != 'Final' THEN
    SELECT INTO new.name_last name_last FROM iep_student WHERE id_student = new.id_student;
  END IF;
  RETURN new;
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.lookup_student_name_last() OWNER TO postgres;

--
-- Name: lookup_student_name_middle(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lookup_student_name_middle() RETURNS "trigger"
    AS $$
BEGIN
  IF new.status != 'Final' THEN
    SELECT INTO new.name_middle name_middle FROM iep_student WHERE id_student = new.id_student;
  END IF;
  RETURN new;
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.lookup_student_name_middle() OWNER TO postgres;

--
-- Name: lookup_student_phone(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lookup_student_phone() RETURNS "trigger"
    AS $$
BEGIN
  IF new.status != 'Final' THEN
    SELECT INTO new.phone phone FROM iep_student WHERE id_student = new.id_student;
  END IF;
  RETURN new;
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.lookup_student_phone() OWNER TO postgres;

--
-- Name: mdtorform001_draft_date_created(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mdtorform001_draft_date_created(integer) RETURNS text
    AS $_$
    DECLARE mdt_create_date text; 
    DECLARE det_notice_create_date text; 
    BEGIN 
    
    SELECT INTO mdt_create_date to_char(date_mdt::date, 'yyyy-mm-dd')  FROM iep_form_002 WHERE id_student = $1 AND status = 'Draft' ORDER BY date_mdt DESC;

    SELECT INTO det_notice_create_date to_char(timestamp_created::date, 'yyyy-mm-dd')  FROM iep_form_012 WHERE id_student = $1 AND status = 'Draft' ORDER BY timestamp_created DESC;
    
    RAISE NOTICE 'mdt_create_date: %', mdt_create_date;
    RAISE NOTICE 'det_notice_create_date: |%|', det_notice_create_date;
    
    
    IF (mdt_create_date is null and det_notice_create_date is null) THEN
        --RAISE NOTICE 'Both NULL 1: %';
        RETURN null;

    ELSIF (mdt_create_date is null) THEN
        RAISE NOTICE 'mdt_create_date NULL 2: %', mdt_create_date;
        RETURN det_notice_create_date;

    ELSIF (det_notice_create_date is null) THEN
        RAISE NOTICE 'mdt_create_date NULL 22: %', mdt_create_date;
        RETURN mdt_create_date;

    ELSIF (mdt_create_date >= det_notice_create_date) THEN
        RETURN mdt_create_date; 

    ELSE
        RETURN det_notice_create_date; 
    END IF;


    return true;
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.mdtorform001_draft_date_created(integer) OWNER TO postgres;

--
-- Name: mdtorform001_draft_form_type(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mdtorform001_draft_form_type(integer) RETURNS text
    AS $_$
        DECLARE mdt_create_date text; 
        DECLARE det_notice_create_date text; 
    BEGIN 
    
    SELECT INTO mdt_create_date to_char(date_mdt::date, 'yyyy-mm-dd')  FROM iep_form_002 WHERE id_student = $1 AND status = 'Draft' ORDER BY date_mdt DESC;
    SELECT INTO det_notice_create_date to_char(timestamp_created::date, 'yyyy-mm-dd')  FROM iep_form_012 WHERE id_student = $1 AND status = 'Draft' ORDER BY timestamp_created DESC;    
    
    IF (mdt_create_date is null and det_notice_create_date is null) THEN
        RETURN null;

    ELSIF (mdt_create_date is null) THEN
        RETURN 'form_012';

    ELSIF (det_notice_create_date is null) THEN
        RETURN 'form_002';

    ELSIF (mdt_create_date >= det_notice_create_date) THEN
        RETURN 'form_002'; 

    ELSE
        RETURN 'form_012'; 
    END IF;


    return true;
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.mdtorform001_draft_form_type(integer) OWNER TO postgres;

--
-- Name: mdtorform001_draft_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mdtorform001_draft_id(integer) RETURNS text
    AS $_$
        DECLARE mdt_create_date text; 
        DECLARE frm01_create_date text; 
        DECLARE mdt_id text; 
        DECLARE frm01_id text; 
    BEGIN 
    
    SELECT INTO mdt_create_date to_char(date_mdt::date, 'yyyy-mm-dd')  FROM iep_form_002 WHERE id_student = $1 AND status = 'Draft' ORDER BY date_mdt DESC;

    SELECT INTO frm01_create_date to_char(timestamp_created::date, 'yyyy-mm-dd')  FROM iep_form_012 WHERE id_student = $1 AND status = 'Draft' ORDER BY timestamp_created DESC;

    SELECT INTO mdt_id id_form_002  FROM iep_form_002 WHERE id_student = $1 AND status = 'Draft' ORDER BY date_mdt DESC;

    SELECT INTO frm01_id id_form_012  FROM iep_form_012 WHERE id_student = $1 AND status = 'Draft' ORDER BY timestamp_created DESC;
    
    
--    RAISE NOTICE 'mdt_create_date: %', mdt_create_date;
--    RAISE NOTICE 'frm01_create_date: |%|', frm01_create_date;
    
    
    IF (mdt_create_date is null and frm01_create_date is null) THEN
        RETURN null;

    ELSIF (mdt_create_date is null) THEN
        RETURN frm01_id;

    ELSIF (frm01_create_date is null) THEN
        RETURN mdt_id;

    ELSIF (mdt_create_date >= frm01_create_date) THEN
        RETURN mdt_id; 

    ELSE
        RETURN frm01_id; 
    END IF;


    return true;
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.mdtorform001_draft_id(integer) OWNER TO postgres;

--
-- Name: mdtorform001_final_date_created(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mdtorform001_final_date_created(integer) RETURNS text
    AS $_$
    DECLARE mdt_create_date text; 
    DECLARE det_notice_create_date text; 
    BEGIN 
    
    SELECT INTO mdt_create_date to_char(date_mdt::date, 'yyyy-mm-dd')  FROM iep_form_002 WHERE id_student = $1 AND status = 'Final' ORDER BY date_mdt DESC;

    SELECT INTO det_notice_create_date to_char(date_notice::date, 'yyyy-mm-dd')  FROM iep_form_012 WHERE id_student = $1 AND status = 'Final' ORDER BY timestamp_created DESC;
    
    RAISE NOTICE 'mdt_create_date: %', mdt_create_date;
    RAISE NOTICE 'det_notice_create_date: |%|', det_notice_create_date;
    
    
    IF (mdt_create_date is null and det_notice_create_date is null) THEN
        --RAISE NOTICE 'Both NULL 1: %';
        RETURN null;

    ELSIF (mdt_create_date is null) THEN
        RAISE NOTICE 'mdt_create_date NULL 2: %', mdt_create_date;
        RETURN det_notice_create_date;

    ELSIF (det_notice_create_date is null) THEN
        RAISE NOTICE 'mdt_create_date NULL 22: %', mdt_create_date;
        RETURN mdt_create_date;

    ELSIF (mdt_create_date >= det_notice_create_date) THEN
        RETURN mdt_create_date; 

    ELSE
        RETURN det_notice_create_date; 
    END IF;


    return true;
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.mdtorform001_final_date_created(integer) OWNER TO postgres;

--
-- Name: mdtorform001_final_form_type(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mdtorform001_final_form_type(integer) RETURNS text
    AS $_$
        DECLARE mdt_create_date text; 
        DECLARE det_notice_create_date text; 
    BEGIN 
    
    SELECT INTO mdt_create_date to_char(date_mdt::date, 'yyyy-mm-dd')  FROM iep_form_002 WHERE id_student = $1 AND status = 'Final' ORDER BY date_mdt DESC;
    SELECT INTO det_notice_create_date to_char(timestamp_created::date, 'yyyy-mm-dd')  FROM iep_form_012 WHERE id_student = $1 AND status = 'Final' ORDER BY timestamp_created DESC;    
    
    IF (mdt_create_date is null and det_notice_create_date is null) THEN
        RETURN null;

    ELSIF (mdt_create_date is null) THEN
        RETURN 'form_012';

    ELSIF (det_notice_create_date is null) THEN
        RETURN 'form_002';

    ELSIF (mdt_create_date >= det_notice_create_date) THEN
        RETURN 'form_002'; 

    ELSE
        RETURN 'form_012'; 
    END IF;


    return true;
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.mdtorform001_final_form_type(integer) OWNER TO postgres;

--
-- Name: mdtorform001_final_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mdtorform001_final_id(integer) RETURNS text
    AS $_$
        DECLARE mdt_create_date text; 
        DECLARE frm01_create_date text; 
        DECLARE mdt_id text; 
        DECLARE frm01_id text; 
    BEGIN 
    
    SELECT INTO mdt_create_date to_char(date_notice::date, 'yyyy-mm-dd')  FROM iep_form_002 WHERE id_student = $1 AND status = 'Final' ORDER BY date_mdt DESC;

    SELECT INTO frm01_create_date to_char(timestamp_created::date, 'yyyy-mm-dd')  FROM iep_form_012 WHERE id_student = $1 AND status = 'Final' ORDER BY timestamp_created DESC;

    SELECT INTO mdt_id id_form_002  FROM iep_form_002 WHERE id_student = $1 AND status = 'Final' ORDER BY date_mdt DESC;

    SELECT INTO frm01_id id_form_012  FROM iep_form_012 WHERE id_student = $1 AND status = 'Final' ORDER BY timestamp_created DESC;
    
    
--    RAISE NOTICE 'mdt_create_date: %', mdt_create_date;
--    RAISE NOTICE 'frm01_create_date: |%|', frm01_create_date;
    
    
    IF (mdt_create_date is null and frm01_create_date is null) THEN
        RETURN null;

    ELSIF (mdt_create_date is null) THEN
        RETURN frm01_id;

    ELSIF (frm01_create_date is null) THEN
        RETURN mdt_id;

    ELSIF (mdt_create_date >= frm01_create_date) THEN
        RETURN mdt_id; 

    ELSE
        RETURN frm01_id; 
    END IF;


    return true;
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.mdtorform001_final_id(integer) OWNER TO postgres;

--
-- Name: merge_dupe_guardians_idstudentlocal(integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION merge_dupe_guardians_idstudentlocal(integer, integer, character varying) RETURNS boolean
    AS $_$DECLARE
    PK_GUARDIANLOCAL     alias for $1;
    PK_STUDENTLOCAL     alias for $2;
    IMPORT_CODE     alias for $3;
    
    GUARDIAN_COUNT               integer;    
    REC_GUARDIAN            record;    
    REC_GOAL                record;    
    
    ID_GUARDIAN_MERGE_INTO      integer;
    MERGE_RESULT            boolean;
    LOOP_COUNTER            integer;
    
    SCHOOL_EXISTS    boolean;
    DISTRICT_EXISTS    boolean;
    
    SCHOOL_COUNT    INTEGER;
    DISTRICT_COUNT  INTEGER;
BEGIN 
    -- make sure theres more than one record
    select into GUARDIAN_COUNT count(1) from iep_guardian where id_guardian_local = PK_GUARDIANLOCAL and id_student_local = PK_STUDENTLOCAL and data_source = IMPORT_CODE;
    if GUARDIAN_COUNT < 2 then
        RAISE NOTICE '% ONLY ONE GUARDIAN RECORD FOUND FOR THIS LOCAL ID', PK_STUDENTLOCAL;
        return true;
    end if;

    LOOP_COUNTER := 1;
    FOR REC_GUARDIAN IN SELECT * FROM iep_guardian WHERE id_guardian_local = PK_GUARDIANLOCAL and id_student_local = PK_STUDENTLOCAL and data_source = IMPORT_CODE limit 1 LOOP
        
        -- to ensure mergin 
        if LOOP_COUNTER = 1 then
            ID_GUARDIAN_MERGE_INTO := REC_GUARDIAN.id_guardian;            
        end if;
        
    END LOOP;

    
    RAISE NOTICE 'ID_GUARDIAN_MERGE_INTO: %', ID_GUARDIAN_MERGE_INTO;
--    RAISE NOTICE '   address_street1: %', REC_GUARDIAN.address_street1;
--    RAISE NOTICE '   address_street2: %', REC_GUARDIAN.address_street2;
        
        
        RAISE NOTICE 'merging into: %', REC_GUARDIAN.id_guardian;
        FOR REC_GOAL IN SELECT * FROM iep_guardian WHERE id_guardian_local = PK_GUARDIANLOCAL and id_student_local = PK_STUDENTLOCAL  and data_source = IMPORT_CODE and id_guardian != ID_GUARDIAN_MERGE_INTO LOOP
            RAISE NOTICE '   trying merge from: %', REC_GOAL.id_guardian;
--            RAISE NOTICE '   address_street1: %', REC_GOAL.address_street1;
--            RAISE NOTICE '   address_street2: %', REC_GOAL.address_street2;
            delete from iep_guardian where id_guardian = REC_GOAL.id_guardian;       
        END LOOP;
    
    RETURN true;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.merge_dupe_guardians_idstudentlocal(integer, integer, character varying) OWNER TO postgres;

--
-- Name: merge_dupe_students_idstudentlocal(integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION merge_dupe_students_idstudentlocal(integer, character varying) RETURNS boolean
    AS $_$DECLARE
    PK_STUDENTLOCAL     alias for $1;
    IMPORT_CODE     alias for $2;
    
    STUDENT_COUNT               integer;    
    REC_GOAL                record;    
    TEAM_COUNT              integer;    
    RECORDS_WITH_TEAM_COUNT integer;    
    
    ID_STUDENT_WITH_TEAM_REC      integer;
    MERGE_RESULT            boolean;
    LOOP_COUNTER            integer;
    
    SCHOOL_EXISTS    boolean;
    DISTRICT_EXISTS    boolean;
    
    SCHOOL_COUNT    INTEGER;
    DISTRICT_COUNT  INTEGER;
BEGIN 
    -- make sure theres more than one record
    select into STUDENT_COUNT count(1) from iep_student where id_student_local = PK_STUDENTLOCAL and data_source = IMPORT_CODE;
    if STUDENT_COUNT < 2 then
        RAISE NOTICE '% ONLY ONE STUDENT RECORD FOUND FOR THIS LOCAL ID', PK_STUDENTLOCAL;
        return true;
    end if;

    RECORDS_WITH_TEAM_COUNT := 0;
    LOOP_COUNTER := 1;
    FOR REC_GOAL IN SELECT * FROM iep_student WHERE id_student_local = PK_STUDENTLOCAL and data_source = IMPORT_CODE LOOP
        
        -- to ensure mergin 
        if LOOP_COUNTER = 1 then
            ID_STUDENT_WITH_TEAM_REC := REC_GOAL.id_student;            
        end if;
        
        select into DISTRICT_COUNT count(1) from iep_district where id_county = REC_GOAL.id_county and id_district = REC_GOAL.id_district;
        RAISE NOTICE '% DISTRICT_COUNT', DISTRICT_COUNT;
        select into SCHOOL_COUNT count(1) from iep_school where id_county = REC_GOAL.id_county and id_district = REC_GOAL.id_district and id_school = REC_GOAL.id_school;
        RAISE NOTICE '% SCHOOL_COUNT', SCHOOL_COUNT;

        select into TEAM_COUNT team_rec_count(REC_GOAL.id_student);
        if TEAM_COUNT > 0 then
            RECORDS_WITH_TEAM_COUNT := RECORDS_WITH_TEAM_COUNT +1;
            ID_STUDENT_WITH_TEAM_REC := REC_GOAL.id_student;
            
        end if;
        LOOP_COUNTER := LOOP_COUNTER + 1;
    END LOOP;
    
    RAISE NOTICE 'RECORDS_WITH_TEAM_COUNT: %', RECORDS_WITH_TEAM_COUNT;
    RAISE NOTICE 'ID_STUDENT_WITH_TEAM_REC: %', ID_STUDENT_WITH_TEAM_REC;
    
    
    
    IF RECORDS_WITH_TEAM_COUNT = 1 or RECORDS_WITH_TEAM_COUNT = 0 then
        
        FOR REC_GOAL IN SELECT * FROM iep_student WHERE id_student_local = PK_STUDENTLOCAL  and data_source = IMPORT_CODE and id_student != ID_STUDENT_WITH_TEAM_REC LOOP
            RAISE NOTICE 'merging into: %', ID_STUDENT_WITH_TEAM_REC;
            RAISE NOTICE 'merging from: %', REC_GOAL.id_student;
            
            select into MERGE_RESULT merge_students(ID_STUDENT_WITH_TEAM_REC, REC_GOAL.id_student);
            if MERGE_RESULT then
                RAISE NOTICE 'successful merge';
                -- remove related data
                --delete from iep_guardian where id_student = REC_GOAL.id_student;
                
                RAISE NOTICE 'begin updates';
                UPDATE iep_guardian SET id_student = ID_STUDENT_WITH_TEAM_REC where id_student = REC_GOAL.id_student;
                RAISE NOTICE 'successful iep_guardian merge ';
                
                if RECORDS_WITH_TEAM_COUNT > 0 then
                    UPDATE iep_student_team SET status = 'Inactive' where id_student = REC_GOAL.id_student;
                    RAISE NOTICE 'successful iep_student_team inactivate';
                else
                    RAISE NOTICE 'no team records';
                end if;
                
                UPDATE iep_log SET id_student = ID_STUDENT_WITH_TEAM_REC where id_student = REC_GOAL.id_student;
                RAISE NOTICE 'successful iep_log merge';

                delete from iep_student where id_student = REC_GOAL.id_student;
                RAISE NOTICE 'successful delete';
                
            else 
                RAISE NOTICE 'FAIL';
            end if;
        END LOOP;
    else
        RAISE NOTICE 'NO MERGE WAS RUN BECAUSE MUTIPLE STUDENTS HAD RELATED TEAM RECORDS';
    end if;
    
    RETURN true;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.merge_dupe_students_idstudentlocal(integer, character varying) OWNER TO postgres;

--
-- Name: merge_students(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION merge_students(integer, integer) RETURNS integer
    AS $_$
    update iep_student_team set id_student = $1 where id_student = $2; 
    update iep_form_001 set id_student = $1 where id_student = $2; 
    update iep_form_002 set id_student = $1 where id_student = $2; 
    update iep_form_003 set id_student = $1 where id_student = $2; 
    update iep_form_004 set id_student = $1 where id_student = $2; 
    update iep_form_005 set id_student = $1 where id_student = $2; 
    update iep_form_006 set id_student = $1 where id_student = $2; 
    update iep_form_007 set id_student = $1 where id_student = $2; 
    update iep_form_008 set id_student = $1 where id_student = $2; 
    update iep_form_009 set id_student = $1 where id_student = $2; 
    update iep_form_010 set id_student = $1 where id_student = $2; 
    update iep_form_011 set id_student = $1 where id_student = $2; 
    update iep_form_012 set id_student = $1 where id_student = $2; 
    update iep_form_013 set id_student = $1 where id_student = $2; 
    update iep_form_014 set id_student = $1 where id_student = $2; 
    update iep_form_015 set id_student = $1 where id_student = $2; 
    update iep_form_016 set id_student = $1 where id_student = $2; 
    update iep_form_017 set id_student = $1 where id_student = $2; 
    update iep_form_018 set id_student = $1 where id_student = $2; 
    update iep_form_019 set id_student = $1 where id_student = $2; 
    update iep_form_020 set id_student = $1 where id_student = $2; 
    update iep_form_021 set id_student = $1 where id_student = $2; 
    update iep_form_022 set id_student = $1 where id_student = $2; 
    update iep_form_023 set id_student = $1 where id_student = $2; 
    update iep_form_024 set id_student = $1 where id_student = $2; 
    
    update iep_accom_checklist set id_student = $1 where id_student = $2; 
    select 1 from iep_student where id_student = $1;


$_$
    LANGUAGE sql;


ALTER FUNCTION public.merge_students(integer, integer) OWNER TO postgres;

--
-- Name: merge_students_cm(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION merge_students_cm(integer, integer) RETURNS integer
    AS $_$
    select merge_students($1, $2);

    update iep_student set id_case_mgr = (select id_case_mgr from iep_student where id_student = $2) where id_student = $1;
    update iep_guardian set id_student = $1 where id_student = $2; 

    select 1 from iep_student where id_student = $1;
$_$
    LANGUAGE sql;


ALTER FUNCTION public.merge_students_cm(integer, integer) OWNER TO postgres;

--
-- Name: modtime(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION modtime() RETURNS "trigger"
    AS $$BEGIN  new.timestamp_last_mod = now();  RETURN new;  END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.modtime() OWNER TO postgres;

--
-- Name: most_recent_final_iep_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION most_recent_final_iep_id(integer) RETURNS integer
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret id_form_004 FROM iep_form_004 WHERE id_student = $1 AND status = 'Final' ORDER BY date_conference DESC, timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.most_recent_final_iep_id(integer) OWNER TO postgres;

--
-- Name: most_recent_final_initeval_date(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION most_recent_final_initeval_date(integer) RETURNS date
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret to_char(timestamp_created::date, 'yyyy-mm-dd') FROM iep_form_001 WHERE id_student = $1 ORDER BY timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.most_recent_final_initeval_date(integer) OWNER TO postgres;

--
-- Name: most_recent_final_initeval_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION most_recent_final_initeval_id(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret id_form_001 FROM iep_form_001 WHERE id_student = $1 ORDER BY timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.most_recent_final_initeval_id(integer) OWNER TO postgres;

--
-- Name: most_recent_final_mdt_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION most_recent_final_mdt_id(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret id_form_002 FROM iep_form_002 WHERE id_student = $1 AND status = 'Final' ORDER BY date_mdt DESC, timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.most_recent_final_mdt_id(integer) OWNER TO postgres;

--
-- Name: most_recent_final_reeval_date(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION most_recent_final_reeval_date(integer) RETURNS date
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret to_char(timestamp_created::date, 'yyyy-mm-dd') FROM iep_form_007 WHERE id_student = $1 ORDER BY timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.most_recent_final_reeval_date(integer) OWNER TO postgres;

--
-- Name: most_recent_final_reeval_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION most_recent_final_reeval_id(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN 
    
    SELECT INTO ret id_form_007 FROM iep_form_007 WHERE id_student = $1 ORDER BY timestamp_created DESC; RETURN ret; 
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.most_recent_final_reeval_id(integer) OWNER TO postgres;

--
-- Name: most_recent_noticeofeval_createdate(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION most_recent_noticeofeval_createdate(integer) RETURNS date
    AS $_$
    DECLARE initeval text; 
    DECLARE reeval text; 
    
    BEGIN 
    
    SELECT INTO initeval to_char(timestamp_created::date, 'yyyy-mm-dd') FROM iep_form_001 WHERE id_student = $1 ORDER BY timestamp_created DESC; 
    SELECT INTO reeval to_char(timestamp_created::date, 'yyyy-mm-dd') FROM iep_form_007 WHERE id_student = $1 ORDER BY timestamp_created DESC; 
    
    RAISE NOTICE 'initeval: %', initeval;
    RAISE NOTICE 'reeval: %', reeval;
    
    if (initeval >= reeval OR reeval is null) then 
        return initeval;
    else 
        return reeval;
    end if;
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.most_recent_noticeofeval_createdate(integer) OWNER TO postgres;

--
-- Name: most_recent_noticeofeval_date(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION most_recent_noticeofeval_date(integer) RETURNS date
    AS $_$
    DECLARE initeval text; 
    DECLARE reeval text; 
    
    BEGIN 
    
    SELECT INTO initeval to_char(date_notice::date, 'yyyy-mm-dd') FROM iep_form_001 WHERE id_student = $1 ORDER BY timestamp_created DESC; 
    SELECT INTO reeval to_char(date_notice::date, 'yyyy-mm-dd') FROM iep_form_007 WHERE id_student = $1 ORDER BY timestamp_created DESC; 
    
    RAISE NOTICE 'initeval: %', initeval;
    RAISE NOTICE 'reeval: %', reeval;
    
    if (initeval >= reeval OR reeval is null) then 
        return initeval;
    else 
        return reeval;
    end if;
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.most_recent_noticeofeval_date(integer) OWNER TO postgres;

--
-- Name: most_recent_noticeofeval_formnum(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION most_recent_noticeofeval_formnum(integer) RETURNS text
    AS $_$
    DECLARE initeval text; 
    DECLARE reeval text; 
    DECLARE rec_status text; 
    
    BEGIN 
    
    SELECT INTO initeval to_char(timestamp_created::date, 'yyyy-mm-dd') FROM iep_form_001 WHERE id_student = $1 ORDER BY timestamp_created DESC; 
    SELECT INTO reeval to_char(timestamp_created::date, 'yyyy-mm-dd') FROM iep_form_007 WHERE id_student = $1 ORDER BY timestamp_created DESC; 
        
    if (initeval >= reeval OR reeval is null) then 
        return 'form_001';
    else 
        return 'form_007';
    end if;
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.most_recent_noticeofeval_formnum(integer) OWNER TO postgres;

--
-- Name: most_recent_noticeofeval_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION most_recent_noticeofeval_id(integer) RETURNS text
    AS $_$
    DECLARE initeval text; 
    DECLARE reeval text; 
    DECLARE rec_status text; 
    
    BEGIN 
    
    SELECT INTO initeval to_char(timestamp_created::date, 'yyyy-mm-dd') FROM iep_form_001 WHERE id_student = $1 ORDER BY timestamp_created DESC; 
    SELECT INTO reeval to_char(timestamp_created::date, 'yyyy-mm-dd') FROM iep_form_007 WHERE id_student = $1 ORDER BY timestamp_created DESC; 
        
    if (initeval >= reeval OR reeval is null) then 
        SELECT INTO rec_status id_form_001 FROM iep_form_001 WHERE id_student = $1 ORDER BY timestamp_created DESC; 
        return rec_status;
    else 
        SELECT INTO rec_status id_form_007 FROM iep_form_007 WHERE id_student = $1 ORDER BY timestamp_created DESC; 
        return rec_status;
    end if;
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.most_recent_noticeofeval_id(integer) OWNER TO postgres;

--
-- Name: most_recent_noticeofeval_status(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION most_recent_noticeofeval_status(integer) RETURNS text
    AS $_$
    DECLARE initeval text; 
    DECLARE reeval text; 
    DECLARE rec_status text; 
    
    BEGIN 
    
    SELECT INTO initeval to_char(timestamp_created::date, 'yyyy-mm-dd') FROM iep_form_001 WHERE id_student = $1 ORDER BY timestamp_created DESC; 
    SELECT INTO reeval to_char(timestamp_created::date, 'yyyy-mm-dd') FROM iep_form_007 WHERE id_student = $1 ORDER BY timestamp_created DESC; 
    
    RAISE NOTICE 'initeval: %', initeval;
    RAISE NOTICE 'reeval: %', reeval;
    
    if (initeval >= reeval OR reeval is null) then 
        SELECT INTO rec_status status FROM iep_form_001 WHERE id_student = $1 ORDER BY timestamp_created DESC; 
        return rec_status;
    else 
        SELECT INTO rec_status status FROM iep_form_007 WHERE id_student = $1 ORDER BY timestamp_created DESC; 
        return rec_status;
    end if;
    
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.most_recent_noticeofeval_status(integer) OWNER TO postgres;

--
-- Name: name_scrub(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION name_scrub(integer) RETURNS text
    AS $_$DECLARE ret text; BEGIN SELECT INTO ret lower(trim(name_last)) || ' ' || lower(trim(name_first)) FROM iep_personnel WHERE id_personnel = $1; RETURN ret; END;$_$
    LANGUAGE plpgsql IMMUTABLE;


ALTER FUNCTION public.name_scrub(integer) OWNER TO postgres;

--
-- Name: new_password(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION new_password(integer, integer) RETURNS text
    AS $_$DECLARE
base_a1 text;
base_a2 text;
base_0 text;
i integer;

length ALIAS FOR $1;
newLength integer;
base ALIAS FOR $2;

base_a1_length integer;
base_a2_length integer;
base_0_length integer;
num_suffix text;
retval text;
sw boolean;
BEGIN
base_a1 := 'aeiouy';
base_a2 := 'bcdfghjklmnpqrstvwxz';
base_0  := '0123456789';
newLength := length-1;
retval := '';

i := 0;
base_a1_length := char_length( base_a1 );
base_a2_length := char_length( base_a2 );
base_0_length := char_length( base_0 );

num_suffix := floor((random()*9)+1);
IF base = 1 THEN
sw = false;
WHILE i < newLength LOOP
IF sw THEN
retval := retval || substr(base_a1, floor((random()*base_a1_length)+1)::integer, 1);
sw := false;
ELSE
retval := retval || substr(base_a2, floor((random()*base_a2_length)+1)::integer, 1);
sw := true;
END IF;
i := i + 1;
END LOOP;

ELSE
WHILE i < newLength LOOP
retval := retval || substr(base_0, floor((random()*base_0_length)+1), 1);
i := i + 1;
END LOOP;
END IF;

RETURN retval || num_suffix;

END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.new_password(integer, integer) OWNER TO postgres;

--
-- Name: new_user_name(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION new_user_name(text, text, text) RETURNS text
    AS $_$DECLARE
                userName text;
                userNameBase text;
                userMatch record;
                maxAttempts integer;
i integer;
                first_name ALIAS FOR $1;
                last_name ALIAS FOR $2;
                table_name ALIAS FOR $3;
        BEGIN
                userNameBase := substr( first_name, 1, 1 ) || last_name;
                userNameBase := translate( userNameBase, ' ', '');
                userNameBase := trim( lower( userNameBase ) );
                userName := userNameBase;

                maxAttempts := 1000;
i := 1;

                WHILE i < maxAttempts LOOP
                        IF table_name = 'iep_personnel' THEN
                                SELECT INTO userMatch * from iep_personnel where user_name = userName;
                        ELSE
                                SELECT INTO userMatch * from iep_guardian where user_name = userName;
                        END IF;
                        IF NOT FOUND THEN -- no duplicate user name
                                EXIT;         -- so break out of the loop and finish
                        ELSE
                                userName := userNameBase || i::text;
                        END IF;
                        i := i + 1;
                END LOOP;

                IF i = maxAttempts THEN
                        RETURN 'failure';
                ELSE
                        RETURN userName;
                END IF;
        END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.new_user_name(text, text, text) OWNER TO postgres;

--
-- Name: old_form_piviotlink_dump(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION old_form_piviotlink_dump(integer) RETURNS SETOF piviotlink_row
    AS $_$
    declare
        loop_count          alias for $1;
        REC_ST              record;
        REC_FORM001         record;
        REC_IEP             record;
        REC_MDT             record;
        REC_PAR             piviotlink_row%rowtype;
        REC_PAR_RET         piviotlink_row%rowtype;
    begin
        for REC_PAR in SELECT 
                        id_student, 
                        unique_id_state, 
                        status,
                        get_name_county(id_county) as name_county,
                        get_name_district(id_county, id_district) as name_district,
                        get_name_school(id_county, id_district, id_school) as name_school,
                        get_name_case_mgr(id_case_mgr) as name_case_mgr,
                        pub_school_student,
                        parental_placement,
                        nonpubcounty,
                        nonpubdistrict,
                        nonpubschool, 
                        dob,
                        age(dob) as age, 
                        grade, 
                        gender,
                        ethnic_group, 
                        primary_language, 
                        ell_student, 
                        ward,
                        address_street1,
                        address_street2,
                        address_city,
                        address_state,
                        address_zip,
                        primary_disability, 
                        ward_surrogate,
                        ward_surrogate_nn
                        
            FROM iep_student where unique_id_state is not null AND (select count(distinct form) FROM old_form_versions WHERE old_form_versions.id_student = iep_student.id_student) >= 3 LIMIT loop_count  LOOP

            
            --
            -- get the student team
            --
            FOR REC_ST IN SELECT status, get_name_personnel(id_personnel) as name from iep_student_team where id_student = REC_PAR.id_student LOOP -- and status = 'Active'
                if (REC_PAR.student_team_personnel_names is null) THEN
                    REC_PAR.student_team_personnel_names := REC_ST.name;
                    REC_PAR.student_team_personnel_status := REC_ST.status;
                ELSE
                    REC_PAR.student_team_personnel_names := REC_PAR.student_team_personnel_names || ', ' || REC_ST.name;
                    REC_PAR.student_team_personnel_status := REC_PAR.student_team_personnel_status || ', ' || REC_ST.status;
                END IF;
            END LOOP;            
            
            --
            -- get the iep
            --
            SELECT INTO REC_IEP * from iep_form_004 where id_student = REC_PAR.id_student and status = 'Final' and version_number< 4 ORDER BY date_conference DESC, timestamp_created DESC limit 1;   
            IF FOUND THEN
                --RAISE NOTICE 'id_form_004: %', REC_IEP.id_form_004;

                REC_PAR.date_conference := REC_IEP.date_conference;
                REC_PAR.iep_primary_disability := REC_IEP.primary_disability_drop;
                REC_PAR.primary_service_location := REC_IEP.primary_service_location;
                REC_PAR.related_service := REC_IEP.related_service;
                REC_PAR.related_service_location := REC_IEP.related_service_location;
                REC_PAR.special_ed_peer_percent := REC_IEP.special_ed_peer_percent;
                REC_PAR.special_ed_non_peer_percent := REC_IEP.special_ed_non_peer_percent;
                REC_PAR.reg_ed_percent := REC_IEP.reg_ed_percent;
                REC_PAR.assessment_accom := REC_IEP.assessment_accom;
--                REC_PAR.assessment_alt := REC_IEP.assessment_alt;

            END IF;
            
            
            --
            -- get form 001
            --
            SELECT INTO REC_FORM001 * from iep_form_001 where id_student = REC_PAR.id_student and status = 'Final' and version_number < 2 ORDER BY date_notice DESC, timestamp_created DESC limit 1;   
            IF FOUND THEN
                --RAISE NOTICE 'id_form_001: %', REC_FORM001.id_form_001;

                REC_PAR.date_notice := REC_FORM001.date_notice;
                REC_PAR.consent := REC_FORM001.consent;
                REC_PAR.consent_date := REC_FORM001.consent_date;
                REC_PAR.date_district_received := REC_FORM001.date_district_received;
                
            END IF;

            
            --
            -- get the mdt
            --
            SELECT INTO REC_MDT * from iep_form_002 where id_student = REC_PAR.id_student and status = 'Final' and version_number < 4 ORDER BY date_mdt DESC, timestamp_created DESC limit 1;   
            IF FOUND THEN
                --RAISE NOTICE 'id_form_002: %', REC_MDT.id_form_002;

                REC_PAR.date_mdt := REC_MDT.date_mdt;
                REC_PAR.mdt_date_notice := REC_MDT.date_notice;
                REC_PAR.initial_verification := REC_MDT.initial_verification;
                REC_PAR.initial_verification_date := REC_MDT.initial_verification_date;
                REC_PAR.disability_au := REC_MDT.disability_au;
                REC_PAR.disability_bd := REC_MDT.disability_bd;
                REC_PAR.disability_hi := REC_MDT.disability_hi;
                REC_PAR.disability_db := REC_MDT.disability_db;
                REC_PAR.disability_mhmi := REC_MDT.disability_mhmi;
                REC_PAR.disability_mhmo := REC_MDT.disability_mhmo;
                REC_PAR.disability_mhsp := REC_MDT.disability_mhsp;
                REC_PAR.disability_multi := REC_MDT.disability_multi;
                REC_PAR.disability_oi := REC_MDT.disability_oi;
                REC_PAR.disability_ohi := REC_MDT.disability_ohi;
                REC_PAR.disability_sld := REC_MDT.disability_sld;
                REC_PAR.disability_sli_language := REC_MDT.disability_sli_language;
                REC_PAR.disability_sli_articulation := REC_MDT.disability_sli_articulation;
                REC_PAR.disability_sli_voice := REC_MDT.disability_sli_voice;
                REC_PAR.disability_sli_fluency := REC_MDT.disability_sli_fluency;
                REC_PAR.disability_vi := REC_MDT.disability_vi;
                REC_PAR.disability_dd := REC_MDT.disability_dd;
                REC_PAR.disability_tbi := REC_MDT.disability_tbi;
                REC_PAR.disability_primary := REC_MDT.disability_primary;
            END IF;

            return next REC_PAR;
        end loop;
    return;
    end
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.old_form_piviotlink_dump(integer) OWNER TO postgres;

--
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
    AS '$libdir/plpgsql', 'plpgsql_call_handler'
    LANGUAGE c;


ALTER FUNCTION public.plpgsql_call_handler() OWNER TO postgres;

--
-- Name: reduceteam(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION reduceteam(integer, integer) RETURNS boolean
    AS $_$
DECLARE
   team_row RECORD;
   retval text;
   updateTxt text;
   teamRecCount integer;
   teamCounter integer;
BEGIN
   teamCounter := 0;
   --
   -- GET THE COUNT OF TEAM RECORDS
   --
   SELECT INTO teamRecCount count(1) FROM iep_student_team WHERE id_student = $1 AND id_personnel = $2 AND status = 'Active';
   
   RAISE NOTICE 'teamRecCount: % ',  teamRecCount ;
   --
   -- LOOP THROUGH THE TEAM RECORDS AND INACTIVATE 
   --
   IF teamRecCount > 0 THEN
      for team_row in SELECT * FROM iep_student_team WHERE id_student = $1 AND id_personnel = $2 AND status = 'Active' ORDER BY flag_ei_only DESC, flag_edit, flag_view LOOP
         --
         -- DONT INACTIVATE THE FIRST RECORD
         --
         IF teamCounter = 0 THEN
            -- LEAVE THIS RECORD
         ELSE
           EXECUTE 'UPDATE iep_student_team SET '
            || ' status = '
            || quote_literal('Inactive')
            || ' WHERE id_student_team = ' || team_row.id_student_team
            || ';';
         END IF;
         
         teamCounter := teamCounter +1;
      END LOOP;
   END IF;

   return true;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.reduceteam(integer, integer) OWNER TO postgres;

--
-- Name: reimport_ifspgoal_data(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION reimport_ifspgoal_data(integer) RETURNS boolean
    AS $_$DECLARE
    importFromGoal alias for $1;    
    goalRec RECORD;
    goalRecParent RECORD;

BEGIN 
	--
	-- GET IFSP GOAL TO UPDATE DATA
	-- ===========================================================================
		SELECT INTO goalRec SELECT * from ifsp_goals WHERE id_ifsp_goals = $1;
		IF NOT FOUND OR goalRec.fk_id_ifsp_goals = '' THEN
			RETURN FALSE; 
		ELSE
			RETURN TRUE; 
		END IF;
	-- ===========================================================================

	--
	-- GET IFSP GOAL DATA OF THIS GOALS PARENT GOAL DATA
	-- ===========================================================================
		SELECT INTO goalRecParent SELECT * from ifsp_goals WHERE id_ifsp_goals = $1;
		IF NOT FOUND THEN
			RETURN FALSE; 
		ELSE
			RETURN TRUE; 
		END IF;
	-- ===========================================================================

	--
	-- UPDATE PRIMARY GOAL WITH THE PARENT DATA FOR SELECTED FIELDS
	-- ===========================================================================
		UPDATE ifsp_goals set 
			goal_outcome =  goalRecParent.goal_outcome
		WHERE id_ifsp_goals = $1; 
			
		;

   RETURN true; 
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.reimport_ifspgoal_data(integer) OWNER TO postgres;

--
-- Name: remove_student(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION remove_student(integer) RETURNS boolean
    AS $_$
DECLARE

BEGIN
    -- 20071206 jlavere - updated to backup/remove log records
    -- 20071206 jlavere - updated to remove student_search4 records    
    --
    -- backup/remove iep log records
    --
    INSERT INTO iep_log_deleted SELECT * FROM iep_log where id_student = $1;
    delete from iep_log where id_student = $1;
    
    --
    -- remove student team records that have been deleted
    --
    INSERT INTO iep_student_teambu SELECT * FROM iep_student_team where date_removed is not null and id_student = $1;
    delete from iep_student_team where date_removed is not null and id_student = $1;

    --
    -- remove student_search4 records
    --
    delete from student_search4 where id_student = $1;
    
    --
    -- backup/remove iep_student records
    --
    INSERT INTO iep_student_deleted SELECT * FROM iep_student where id_student = $1;
    DELETE FROM iep_student where id_student = $1;
    
    RETURN 1;


END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.remove_student(integer) OWNER TO postgres;

--
-- Name: remove_unattached_students(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION remove_unattached_students(county character varying, district character varying) RETURNS void
    AS $_$
DECLARE

    IDCOUNTY            alias for $1;
    IDDISTRICT          alias for $2;
    selectDupeLocalID   varchar;
    rec                 record;
    i                   integer;
BEGIN
    i := 0;
    selectDupeLocalID := 'select id_student FROM iep_student where id_county = \'' || IDCOUNTY || '\' and id_district = \'' || IDDISTRICT || '\' and data_source is null and form_count(id_student) <= 0 ORDER by id_student; ';


    --RAISE NOTICE 'getKeywordList: %', selectDupeLocalID;

    FOR rec IN EXECUTE selectDupeLocalID     
    LOOP
        i := i + 1;
        RAISE NOTICE 'student id: %: %', rec.id_student, i;
        RAISE NOTICE 'remove student: %', 'SELECT remove_student(\'' || rec.id_student || '\');';
        --execute 'SELECT remove_student(\'' || rec.id_student || '\');';

    END LOOP;
    
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.remove_unattached_students(county character varying, district character varying) OWNER TO postgres;

--
-- Name: replace(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION "replace"(character varying, character varying, character varying) RETURNS character varying
    AS $_$
declare
    string alias for $1;
    sub alias for $2;
    replacement alias for $3;
    -- xxxxxxxxxxx[MATCH]xxxxxxxxxxxx
    --           | end_before
    --                   | start_after
    match integer;
    end_before integer;
    start_after integer;
    string_replaced varchar;
    string_remainder varchar;
begin
    string_remainder := string;
    string_replaced := '';
    match := position(sub in string_remainder);

    while match > 0 loop
        end_before := match - 1;
        start_after := match + length(sub);
        string_replaced := string_replaced || substr(string_remainder, 1, end_before) || replacement;
        string_remainder := substr(string_remainder, start_after);
        match := position(sub in string_remainder);
    end loop;
    string_replaced := string_replaced || string_remainder;

    return string_replaced;
end;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public."replace"(character varying, character varying, character varying) OWNER TO postgres;

--
-- Name: restore_student(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION restore_student(integer) RETURNS boolean
    AS $_$
DECLARE

BEGIN

INSERT INTO iep_student SELECT * FROM iep_student_deleted where id_student = $1;
DELETE FROM iep_student_deleted where id_student = $1;

RETURN 1;

END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.restore_student(integer) OWNER TO postgres;

--
-- Name: rpt_date_sort(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rpt_date_sort(integer) RETURNS text
    AS $_$
        DECLARE iep_date text; 
        DECLARE ifsp_date text; 
        DECLARE iep_create_date text; 
        DECLARE ifsp_create_date text; 
    BEGIN 

    SELECT INTO iep_create_date null; --to_char(timestamp_created::date, 'yyyy-mm-dd')  FROM iep_form_004 WHERE id_student = $1 AND status = 'Draft' ORDER BY timestamp_created DESC;
    SELECT INTO ifsp_create_date null; -- to_char(timestamp_created::date, 'yyyy-mm-dd')  FROM iep_form_013 WHERE id_student = $1 AND status = 'Draft' ORDER BY timestamp_created DESC;

    SELECT INTO iep_date to_char(date_conference::date, 'yyyy-mm-dd')  FROM iep_form_004 WHERE id_student = $1 AND status = 'Final' ORDER BY date_conference DESC, timestamp_created DESC;
    SELECT INTO ifsp_date to_char(meeting_date::date, 'yyyy-mm-dd')  FROM iep_form_013 WHERE id_student = $1 AND status = 'Final' ORDER BY meeting_date DESC, timestamp_created DESC;

    RAISE NOTICE '';
    RAISE NOTICE 'id_student: %', $1;
    RAISE NOTICE 'iep_date: %', iep_date;
    RAISE NOTICE 'ifsp_date: |%|', ifsp_date;
    RAISE NOTICE 'iep_create_date: %', iep_create_date;
    RAISE NOTICE 'iep_create_date: %', iep_create_date::timestamp + '-1 day +1 year'::interval;
    RAISE NOTICE 'ifsp_create_date: |%|', ifsp_create_date;
    RAISE NOTICE 'ifsp_create_date: |%|', ifsp_create_date::timestamp + '-1 day +182 days'::interval; 
    RAISE NOTICE '';
    

    IF (iep_create_date is null and ifsp_create_date is null) THEN

        IF (iep_date is null and ifsp_date is null) THEN
            RETURN null;
    
        ELSIF (iep_date is null) THEN
            RETURN to_char(ifsp_date::timestamp + '-1 day +182 days'::interval, 'yyyy-mm-dd');
    
        ELSIF (ifsp_date is null) THEN
            RETURN to_char(iep_date::timestamp + '-1 day +1 year'::interval, 'yyyy-mm-dd');
    
        ELSIF (iep_date >= ifsp_date) THEN
            RETURN to_char(iep_date::timestamp + '-1 day +1 year'::interval, 'yyyy-mm-dd'); 
    
        ELSE
            RETURN to_char(ifsp_date::timestamp + '-1 day +182 days'::interval, 'yyyy-mm-dd'); 
        END IF;


    ELSIF (iep_create_date is null) THEN
        RETURN to_char(ifsp_create_date::timestamp + '-1 day +182 days'::interval, 'yyyy-mm-dd');

    ELSIF (ifsp_create_date is null) THEN
        RETURN to_char(iep_create_date::timestamp + '-1 day +1 year'::interval, 'yyyy-mm-dd');

    ELSIF (iep_create_date >= ifsp_create_date) THEN
        RETURN to_char(iep_create_date::timestamp + '-1 day +1 year'::interval, 'yyyy-mm-dd');

    ELSE
        RETURN to_char(ifsp_create_date::timestamp + '-1 day +182 days'::interval, 'yyyy-mm-dd'); 
    END IF;



    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.rpt_date_sort(integer) OWNER TO postgres;

--
-- Name: rpt_draft_date_created(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rpt_draft_date_created(integer) RETURNS text
    AS $_$
    DECLARE iep_create_date text; 
    DECLARE ifsp_create_date text; 
    BEGIN 
    
    SELECT INTO iep_create_date to_char(timestamp_created::date, 'yyyy-mm-dd')  FROM iep_form_004 WHERE id_student = $1 AND status = 'Draft' ORDER BY timestamp_created DESC;

    SELECT INTO ifsp_create_date to_char(timestamp_created::date, 'yyyy-mm-dd')  FROM iep_form_013 WHERE id_student = $1 AND status = 'Draft' ORDER BY timestamp_created DESC;
    
    RAISE NOTICE 'iep_create_date: %', iep_create_date;
    RAISE NOTICE 'ifsp_create_date: |%|', ifsp_create_date;
    
    
    IF (iep_create_date is null and ifsp_create_date is null) THEN
        --RAISE NOTICE 'Both NULL 1: %';
        RETURN null;

    ELSIF (iep_create_date is null) THEN
        RAISE NOTICE 'iep_create_date NULL 2: %', iep_create_date;
        RETURN ifsp_create_date;

    ELSIF (ifsp_create_date is null) THEN
        RAISE NOTICE 'iep_create_date NULL 22: %', iep_create_date;
        RETURN iep_create_date;

    ELSIF (iep_create_date >= ifsp_create_date) THEN
        RETURN iep_create_date; 

    ELSE
        RETURN ifsp_create_date; 
    END IF;


    return true;
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.rpt_draft_date_created(integer) OWNER TO postgres;

--
-- Name: rpt_draft_form_type(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rpt_draft_form_type(integer) RETURNS text
    AS $_$
        DECLARE iep_create_date text; 
        DECLARE ifsp_create_date text; 
    BEGIN 
    
    SELECT INTO iep_create_date to_char(timestamp_created::date, 'yyyy-mm-dd')  FROM iep_form_004 WHERE id_student = $1 AND status = 'Draft' ORDER BY timestamp_created DESC;
    SELECT INTO ifsp_create_date to_char(timestamp_created::date, 'yyyy-mm-dd')  FROM iep_form_013 WHERE id_student = $1 AND status = 'Draft' ORDER BY timestamp_created DESC;    
    
    IF (iep_create_date is null and ifsp_create_date is null) THEN
        RETURN null;

    ELSIF (iep_create_date is null) THEN
        RETURN 'form_013';

    ELSIF (ifsp_create_date is null) THEN
        RETURN 'form_004';

    ELSIF (iep_create_date >= ifsp_create_date) THEN
        RETURN 'form_004'; 

    ELSE
        RETURN 'form_013'; 
    END IF;


    return true;
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.rpt_draft_form_type(integer) OWNER TO postgres;

--
-- Name: rpt_draft_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rpt_draft_id(integer) RETURNS text
    AS $_$
        DECLARE iep_create_date text; 
        DECLARE ifsp_create_date text; 
        DECLARE iep_id text; 
        DECLARE ifsp_id text; 
    BEGIN 
    
    SELECT INTO iep_create_date to_char(timestamp_created::date, 'yyyy-mm-dd')  FROM iep_form_004 WHERE id_student = $1 AND status = 'Draft' ORDER BY timestamp_created DESC;
    SELECT INTO ifsp_create_date to_char(timestamp_created::date, 'yyyy-mm-dd')  FROM iep_form_013 WHERE id_student = $1 AND status = 'Draft' ORDER BY timestamp_created DESC;
    SELECT INTO iep_id id_form_004  FROM iep_form_004 WHERE id_student = $1 AND status = 'Draft' ORDER BY timestamp_created DESC;
    SELECT INTO ifsp_id id_form_013  FROM iep_form_013 WHERE id_student = $1 AND status = 'Draft' ORDER BY timestamp_created DESC;
    
    
--    RAISE NOTICE 'iep_create_date: %', iep_create_date;
--    RAISE NOTICE 'ifsp_create_date: |%|', ifsp_create_date;
    
    
    IF (iep_create_date is null and ifsp_create_date is null) THEN
        RETURN null;

    ELSIF (iep_create_date is null) THEN
        RETURN ifsp_id;

    ELSIF (ifsp_create_date is null) THEN
        RETURN iep_id;

    ELSIF (iep_create_date >= ifsp_create_date) THEN
        RETURN iep_id; 

    ELSE
        RETURN ifsp_id; 
    END IF;


    return true;
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.rpt_draft_id(integer) OWNER TO postgres;

--
-- Name: rpt_final_date_created(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rpt_final_date_created(integer) RETURNS date
    AS $_$
    DECLARE iep_date text; 
    DECLARE ifsp_date text; 
    BEGIN 
    
    SELECT INTO iep_date to_char(date_conference::date, 'yyyy-mm-dd')  FROM iep_form_004 WHERE id_student = $1 AND status = 'Final' ORDER BY date_conference DESC, timestamp_created DESC;

    SELECT INTO ifsp_date to_char(meeting_date::date, 'yyyy-mm-dd')  FROM iep_form_013 WHERE id_student = $1 AND status = 'Final' ORDER BY meeting_date DESC, timestamp_created DESC;
    
    RAISE NOTICE '';
    RAISE NOTICE 'id_student: %', $1;
    RAISE NOTICE 'iep_date: %', iep_date;
    RAISE NOTICE 'ifsp_date: |%|', ifsp_date;
    
    
    IF (iep_date is null and ifsp_date is null) THEN
        RETURN null;

    ELSIF (iep_date is null) THEN
        RETURN ifsp_date;

    ELSIF (ifsp_date is null) THEN
        RETURN iep_date;

    ELSIF (iep_date >= ifsp_date) THEN
        RETURN iep_date; 

    ELSE
        RETURN ifsp_date; 
    END IF;


    return true;
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.rpt_final_date_created(integer) OWNER TO postgres;

--
-- Name: rpt_final_form_type(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rpt_final_form_type(integer) RETURNS text
    AS $_$
        DECLARE iep_date text; 
        DECLARE ifsp_date text; 
    BEGIN 
    
    SELECT INTO iep_date to_char(date_conference::date, 'yyyy-mm-dd')  FROM iep_form_004 WHERE id_student = $1 AND status = 'Final' ORDER BY date_conference DESC, timestamp_created DESC;
    SELECT INTO ifsp_date to_char(meeting_date::date, 'yyyy-mm-dd')  FROM iep_form_013 WHERE id_student = $1 AND status = 'Final' ORDER BY meeting_date DESC, timestamp_created DESC;    
    
    IF (iep_date is null and ifsp_date is null) THEN
        RETURN null;

    ELSIF (iep_date is null) THEN
        RETURN 'form_013';

    ELSIF (ifsp_date is null) THEN
        RETURN 'form_004';

    ELSIF (iep_date >= ifsp_date) THEN
        RETURN 'form_004'; 

    ELSE
        RETURN 'form_013'; 
    END IF;


    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.rpt_final_form_type(integer) OWNER TO postgres;

--
-- Name: rpt_final_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rpt_final_id(integer) RETURNS text
    AS $_$
        DECLARE iep_date text; 
        DECLARE ifsp_date text; 
        DECLARE iep_id text; 
        DECLARE ifsp_id text; 
    BEGIN 
    
    SELECT INTO iep_date to_char(date_conference::date, 'yyyy-mm-dd')  FROM iep_form_004 WHERE id_student = $1 AND status = 'Final' ORDER BY date_conference DESC, timestamp_created DESC;
    SELECT INTO ifsp_date to_char(meeting_date::date, 'yyyy-mm-dd')  FROM iep_form_013 WHERE id_student = $1 AND status = 'Final' ORDER BY meeting_date DESC, timestamp_created DESC;
    SELECT INTO iep_id id_form_004  FROM iep_form_004 WHERE id_student = $1 AND status = 'Final' ORDER BY date_conference DESC, timestamp_created DESC;
    SELECT INTO ifsp_id id_form_013  FROM iep_form_013 WHERE id_student = $1 AND status = 'Final' ORDER BY meeting_date DESC, timestamp_created DESC;
    
    
--    RAISE NOTICE 'iep_date: %', iep_date;
--    RAISE NOTICE 'ifsp_date: |%|', ifsp_date;
    
    
    IF (iep_date is null and ifsp_date is null) THEN
        RETURN null;

    ELSIF (iep_date is null) THEN
        RETURN ifsp_id;

    ELSIF (ifsp_date is null) THEN
        RETURN iep_id;

    ELSIF (iep_date >= ifsp_date) THEN
        RETURN iep_id; 

    ELSE
        RETURN ifsp_id; 
    END IF;


    return true;
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.rpt_final_id(integer) OWNER TO postgres;

--
-- Name: school_exists(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION school_exists(integer, integer, integer) RETURNS boolean
    AS $_$DECLARE
    ID_COUNTY     alias for $1;
    ID_DISTRICT  alias for $2;
    ID_SCHOOL  alias for $3;
    SCHOOL_COUNT INTEGER;
BEGIN 
    
    select into SCHOOL_COUNT count(1) from iep_school where id_county = $1 and id_district = $2 and id_school = $3;
    if SCHOOL_COUNT > 0 then
        RETURN true;
    else
        return false;
    end if;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.school_exists(integer, integer, integer) OWNER TO postgres;

--
-- Name: set_master_student_id(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION set_master_student_id() RETURNS "trigger"
    AS $$begin
if new.id_student is null and new.id_student_local is not null and new.data_source is not null then 
select into new.id_student get_master_student_from_local_w(new.id_student_local, new.data_source); end if;
return new;
end$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.set_master_student_id() OWNER TO postgres;

--
-- Name: set_password(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION set_password() RETURNS "trigger"
    AS $$BEGIN
select into new.password new_password(7,1);
return new;
END$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.set_password() OWNER TO postgres;

--
-- Name: set_user_name(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION set_user_name() RETURNS "trigger"
    AS $$BEGIN
select into new.user_name new_user_name(new.name_first, new.name_last, 'iep_guardian');
return new;
END$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.set_user_name() OWNER TO postgres;

--
-- Name: sli_merge_personnel(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION sli_merge_personnel(integer, integer) RETURNS boolean
    AS $_$BEGIN 

    -- update all privs with the new id 
    update iep_privileges set id_personnel = $1 where id_personnel = $2; 
    
    -- update the name of the record thats being merged 
    update iep_personnel set name_first = ( select name_first from iep_personnel where id_personnel_master = $1 limit 1), name_last = ( select name_last from iep_personnel where id_personnel_master = $1 limit 1), name_middle = ( select name_middle from iep_personnel where id_personnel_master = $1 limit 1) where id_personnel_master = $2; 
    
    -- update district data OLD fields 
    update iep_district set id_district_mgr_old = $2 where id_district_mgr = $2; 
    update iep_district set id_account_sprv_old = $2 where id_account_sprv = $2; 
    -- update with new ID 
    update iep_district set id_district_mgr = $1 where id_district_mgr = $2; 
    update iep_district set id_account_sprv = $1 where id_account_sprv = $2; 
    
    -- update school data OLD fields 
    update iep_school set id_school_mgr_old = $2 where id_school_mgr = $2; 
    update iep_school set id_account_sprv_old = $2 where id_account_sprv = $2; 
    -- update with new ID 
    update iep_school set id_school_mgr = $1 where id_school_mgr = $2; 
    update iep_school set id_account_sprv = $1 where id_account_sprv = $2; 
    
    ------------------------------------------------------------------------ 
    -- TEAM RECORDS 
    ------------------------------------------------------------------------ 
    -- 
    -- UPDATE TEAM DATA OLD FIELDS 
    -- 
    update iep_student_team set id_personnel_old = $2 where id_personnel = $2; 
    
    -- 
    -- BACK UP TEAM RECORDS 
    -- 
    insert into iep_student_teamBU select * from iep_student_team where id_personnel = $1 OR id_personnel = $2; 
    
    -- 
    -- SELECT ALL RECORDS INTO A TEMP TABLE 
    -- 
    delete from helper_student_team; 
    insert into helper_student_team select * from iep_student_team where id_personnel = $1 OR id_personnel = $2; 
    
    -- 
    -- CONVERT ALL PERSONNEL IDS TO THE NEW PERSONNEL ID 
    -- 
    update helper_student_team set id_personnel = $1 where id_personnel = $2; 
    
    -- 
    -- DELETE ORIGINAL TEAM RECORDS 
    -- 
    delete from iep_student_team where id_personnel = $1 OR id_personnel = $2; 
    
    -- 
    -- INSERT UNIQUE RECORDS BACK INTO STUDENT TEAM TABLE 
    -- 
    insert into iep_student_team select * from helper_student_team where id_student_team = (select id_student_team from helper_student_team t2 where helper_student_team.id_student=t2.id_student order by flag_view, flag_edit, flag_create limit 1) order by id_student; 
    
    --drop table helper_student_team; 
    ------------------------------------------------------------------------ 
    ------------------------------------------------------------------------ 
    -- UPDATE WITH NEW ID 
    --update iep_student_team set id_personnel = $1 where id_personnel = $2; 
    
    
    
    -- student forms data OLD fields 
    update iep_form_001 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_002 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_003 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_004 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_005 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_006 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_007 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_008 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_009 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_010 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_011 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_012 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_013 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_014 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_015 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_016 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_017 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_018 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_019 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_020 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_021 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_022 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    update iep_form_023 set id_case_mgr_old = $2 where id_case_mgr = $2; 
    
    -- update with new ID 
    update iep_form_001 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_002 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_003 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_004 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_005 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_006 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_007 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_008 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_009 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_010 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_011 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_012 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_013 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_014 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_015 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_016 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_017 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_018 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_019 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_020 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_021 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_022 set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_form_023 set id_case_mgr = $1 where id_case_mgr = $2; 
    
    --messages data OLD fields 
    update iep_message set id_user_old = $2 where id_user = $2; 
    -- update with new ID 
    update iep_message set id_user = $1 where id_user = $2; 
    
    --students data OLD fields 
    update iep_student set id_case_mgr_old = $2 where id_case_mgr = $2; 
    -- update with new ID 
    update iep_student set id_case_mgr = $1 where id_case_mgr = $2; 
    update iep_student set id_list_team = get_id_list_team(id_student) where id_case_mgr = $1; 
    
    
    
    -- update the master if of the record being merged (should be last update) 
    update iep_personnel set id_personnel_master = $1 where id_personnel_master = $2; 
    --select 1 from iep_personnel where id_personnel_master = $1; 
    return 1; 


END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.sli_merge_personnel(integer, integer) OWNER TO postgres;

--
-- Name: split_user(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION split_user(integer) RETURNS integer
    AS $_$DECLARE
        personnelRec record;
        id_to_split ALIAS for $1;
        full_name text;
        trigger_result boolean;
    BEGIN
        -- grab the full name of the person being split
        SELECT INTO full_name name_first || ' ' || name_last from iep_personnel where id_personnel=id_to_split;
        -- find the single record in iep_privileges that matches this record and roll it back
        -- first grab their current personnel record
        SELECT INTO personnelRec * from iep_personnel where id_personnel = id_to_split;
        
        -- now find the priv record that matches it, i.e. that was creating by importing from personnel rec
        UPDATE iep_privileges SET id_personnel = id_to_split where 
        id_county = personnelRec.id_county 
        and id_district = personnelRec.id_district 
        and id_school = personnelRec.id_school  
        and class = personnelRec.class 
        and id_personnel = personnelRec.id_personnel_master;
        
        -- update district data
        update iep_district set id_district_mgr = id_to_split where id_district_mgr_old = id_to_split;
        update iep_district set id_account_sprv = id_to_split where id_account_sprv_old = id_to_split;
        
        -- update school data
        update iep_school set id_school_mgr = id_to_split where id_school_mgr_old = id_to_split;
        update iep_school set id_account_sprv = id_to_split where id_account_sprv_old = id_to_split;
    
        -- update team
        update iep_student_team set id_personnel = id_to_split where id_personnel_old = id_to_split;
        
        
        -- student forms
        -- needed to disable triggers and manually reset case mgr name because we were getting trigger errors
        -- sl 2003-03-14
        select into trigger_result disabletriggers('iep_form_001');
        select into trigger_result disabletriggers('iep_form_002');
        select into trigger_result disabletriggers('iep_form_003');
        select into trigger_result disabletriggers('iep_form_004');
        select into trigger_result disabletriggers('iep_form_005');
        select into trigger_result disabletriggers('iep_form_006');
        select into trigger_result disabletriggers('iep_form_007');
        select into trigger_result disabletriggers('iep_form_008');
        select into trigger_result disabletriggers('iep_form_009');
        select into trigger_result disabletriggers('iep_form_010');
        select into trigger_result disabletriggers('iep_form_011');
        select into trigger_result disabletriggers('iep_form_012');
        -- reset case mgr ids
        update iep_form_001 set id_case_mgr=id_case_mgr_old where id_case_mgr_old = id_to_split;
        update iep_form_002 set id_case_mgr=id_case_mgr_old where id_case_mgr_old = id_to_split;
        update iep_form_003 set id_case_mgr=id_case_mgr_old where id_case_mgr_old = id_to_split;
        update iep_form_004 set id_case_mgr=id_case_mgr_old where id_case_mgr_old = id_to_split;
        update iep_form_005 set id_case_mgr=id_case_mgr_old where id_case_mgr_old = id_to_split;
        update iep_form_006 set id_case_mgr=id_case_mgr_old where id_case_mgr_old = id_to_split;
        update iep_form_007 set id_case_mgr=id_case_mgr_old where id_case_mgr_old = id_to_split;
        update iep_form_008 set id_case_mgr=id_case_mgr_old where id_case_mgr_old = id_to_split;
        update iep_form_009 set id_case_mgr=id_case_mgr_old where id_case_mgr_old = id_to_split;
        update iep_form_010 set id_case_mgr=id_case_mgr_old where id_case_mgr_old = id_to_split;
        update iep_form_011 set id_case_mgr=id_case_mgr_old where id_case_mgr_old = id_to_split;
        update iep_form_012 set id_case_mgr=id_case_mgr_old where id_case_mgr_old = id_to_split;
        -- manually perform any resets of case mgr name in forms
        update iep_form_001 set name_case_mgr=full_name where id_case_mgr_old = id_to_split;
        update iep_form_002 set name_case_mgr=full_name where id_case_mgr_old = id_to_split;
        update iep_form_003 set name_case_mgr=full_name where id_case_mgr_old = id_to_split;
        update iep_form_004 set name_case_mgr=full_name where id_case_mgr_old = id_to_split;
        update iep_form_005 set name_case_mgr=full_name where id_case_mgr_old = id_to_split;
        update iep_form_006 set name_case_mgr=full_name where id_case_mgr_old = id_to_split;
        update iep_form_007 set name_case_mgr=full_name where id_case_mgr_old = id_to_split;
        update iep_form_008 set name_case_mgr=full_name where id_case_mgr_old = id_to_split;
        update iep_form_009 set name_case_mgr=full_name where id_case_mgr_old = id_to_split;
        update iep_form_010 set name_case_mgr=full_name where id_case_mgr_old = id_to_split;
        update iep_form_011 set name_case_mgr=full_name where id_case_mgr_old = id_to_split;
        update iep_form_012 set name_case_mgr=full_name where id_case_mgr_old = id_to_split;
        select into trigger_result enabletriggers('iep_form_001');
        select into trigger_result enabletriggers('iep_form_002');
        select into trigger_result enabletriggers('iep_form_003');
        select into trigger_result enabletriggers('iep_form_004');
        select into trigger_result enabletriggers('iep_form_005');
        select into trigger_result enabletriggers('iep_form_006');
        select into trigger_result enabletriggers('iep_form_007');
        select into trigger_result enabletriggers('iep_form_008');
        select into trigger_result enabletriggers('iep_form_009');
        select into trigger_result enabletriggers('iep_form_010');
        select into trigger_result enabletriggers('iep_form_011');
        select into trigger_result enabletriggers('iep_form_012');
        
        --messages
        update iep_message set id_user = id_to_split where id_user_old = id_to_split;
        
        --students
        update iep_student set id_case_mgr = id_to_split where id_case_mgr_old = id_to_split;
        update iep_student set id_list_team = get_id_list_team(id_student) where id_case_mgr = id_to_split;
        
        -- update personnel
        -- THIS HAS TO BE LAST!!
        update iep_personnel set id_personnel_master = id_to_split where id_personnel = id_to_split;
        
        -- for return value
        return id_to_split;
    END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.split_user(integer) OWNER TO postgres;

--
-- Name: ss3_dynamic_test(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss3_dynamic_test() RETURNS integer
    AS $$DECLARE 
    sql varchar;
    ssSearch RECORD;
	res int4;
BEGIN 
	sql := 'SELECT count(1) from iep_personnel';
    FOR ssSearch IN EXECUTE sql LOOP 
        return ssSearch.count;
    END LOOP;
	return 0;
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss3_dynamic_test() OWNER TO postgres;

--
-- Name: ss3_priv_activate(integer, integer, integer, character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss3_priv_activate(integer, integer, integer, character, character, character) RETURNS character varying
    AS $_$DECLARE 
    ID_PER ALIAS FOR $1;
    ID_PRI ALIAS FOR $2;
    privClass ALIAS FOR $3;
    ID_COU ALIAS FOR $4;
    ID_DIS ALIAS FOR $5;
    ID_SCH ALIAS FOR $6;
    ssSearch RECORD;
	retval text; 
	flag_better boolean; 
	flag_worse boolean; 
	
	max_class integer; 
	min_class integer; 
BEGIN 
	flag_better := false;
	flag_worse := false;


	--RAISE NOTICE 'ss3_priv_activate: ';
	--
	-- SEE IF THERE IS A PRIV WITH BETTER ACCES THAN YOU
	--
	SELECT INTO ssSearch 
			max(CASE WHEN class < privClass THEN class END) as worstClassBetterThanPrivClass, 
			min(CASE WHEN class >= privClass THEN class END) as bestClassWorseThanPrivClass, 
			max(class) as maxClass, 
			min(class) as minClass 
		FROM iep_privileges 
		WHERE 
			id_privileges != ID_PRI AND
			id_personnel = ID_PER AND
			status = 'Active' AND
			(ID_COU	 = id_county   OR ID_COU = NULL OR ID_COU is null OR id_county = NULL 		OR id_county is null) AND 
			(ID_DIS  = id_district OR ID_DIS = NULL OR ID_DIS is null OR id_district = NULL 	OR id_district is null) AND 
			(ID_SCH	 = id_school   OR ID_SCH = NULL OR ID_SCH is null OR id_school = NULL 		OR id_school is null) ;
	IF FOUND THEN
		max_class := ssSearch.maxClass;
		min_class := ssSearch.minClass;
		--RAISE NOTICE 'bestClassWorseThanPrivClass: %', ssSearch.bestClassWorseThanPrivClass;
		--RAISE NOTICE 'worstClassBetterThanPrivClass: %', ssSearch.worstClassBetterThanPrivClass;
		--RAISE NOTICE 'maxClass: %', max_class;
		--RAISE NOTICE 'minClass: %', min_class;
		
		--
		-- FRESH INSERT
		--
		IF(ssSearch.bestClassWorseThanPrivClass IS NULL AND ssSearch.worstClassBetterThanPrivClass IS NULL) THEN
			--
			-- DO INSERT
			--
			--RAISE NOTICE 'DO FRESH INSERT';
			PERFORM ss4_insert(NULL, NULL, ID_PRI, NULL, NULL, NULL);
		END IF;

		--
		-- INSERT FOR THIS CLASS, BUT REMOVE EXISTING DATA FIRST
		--
		IF(ssSearch.worstClassBetterThanPrivClass IS NULL AND ssSearch.bestClassWorseThanPrivClass IS NOT NULL) THEN

			--RAISE NOTICE 'INSERT FOR THIS CLASS, BUT REMOVE EXISTING DATA FIRST';

			--
			-- REMOVE OLD DATA
			--
			--RAISE NOTICE 'REMOVE OLD DATA';
			PERFORM ss4_delete(ID_PER, NULL, NULL, ID_COU, ID_DIS, ID_SCH);
			--
			-- DO INSERT
			--
			--RAISE NOTICE 'DO FRESH INSERT';
			PERFORM ss4_insert(NULL, NULL, ID_PRI, NULL, NULL, NULL);

		END IF;

		--
		-- ERROR, THIS CLASS EXISTS HERE
		--
		IF(privClass = min_class) THEN

		END IF;
		
		--
		-- BETTER CLASS EXISTS
		--
		IF(min_class < privClass) THEN

		END IF;



	END IF;

    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss3_priv_activate(integer, integer, integer, character, character, character) OWNER TO postgres;

--
-- Name: ss3_priv_activate_test(integer, integer, integer, character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss3_priv_activate_test(integer, integer, integer, character, character, character) RETURNS character varying
    AS $_$DECLARE 
    ID_PER ALIAS FOR $1;
    ID_PRI ALIAS FOR $2;
    privClass ALIAS FOR $3;
    ID_COU ALIAS FOR $4;
    ID_DIS ALIAS FOR $5;
    ID_SCH ALIAS FOR $6;
    ssSearch RECORD;
	retval text; 
	flag_better boolean; 
	flag_worse boolean; 
	
	max_class integer; 
	min_class integer; 
BEGIN 
	flag_better := false;
	flag_worse := false;


	--RAISE NOTICE 'ss3_priv_activate: ';
	--
	-- SEE IF THERE IS A PRIV WITH BETTER ACCES THAN YOU
	--
	SELECT INTO ssSearch 
			max(CASE WHEN class < privClass THEN class END) as worstClassBetterThanPrivClass, 
			min(CASE WHEN class >= privClass THEN class END) as bestClassWorseThanPrivClass, 
			max(class) as maxClass, 
			min(class) as minClass 
		FROM iep_privileges 
		WHERE 
			id_privileges != ID_PRI AND
			id_personnel = ID_PER AND
			status = 'Active' AND
			(ID_COU	 = id_county   OR ID_COU = NULL OR ID_COU is null OR id_county = NULL 		OR id_county is null) AND 
			(ID_DIS  = id_district OR ID_DIS = NULL OR ID_DIS is null OR id_district = NULL 	OR id_district is null) AND 
			(ID_SCH	 = id_school   OR ID_SCH = NULL OR ID_SCH is null OR id_school = NULL 		OR id_school is null) ;
	IF FOUND THEN
		max_class := ssSearch.maxClass;
		min_class := ssSearch.minClass;
		
		RAISE NOTICE 'bestClassWorseThanPrivClass: %', ssSearch.bestClassWorseThanPrivClass;
		RAISE NOTICE 'worstClassBetterThanPrivClass: %', ssSearch.worstClassBetterThanPrivClass;
		RAISE NOTICE 'maxClass: %', max_class;
		RAISE NOTICE 'minClass: %', min_class;
		
		--
		-- FRESH INSERT
		--
		IF(ssSearch.bestClassWorseThanPrivClass IS NULL AND ssSearch.worstClassBetterThanPrivClass IS NULL) THEN
			--
			-- DO INSERT
			--
			RAISE NOTICE 'DO FRESH INSERT';
			--PERFORM ss4_insert(NULL, NULL, ID_PRI, NULL, NULL, NULL);
		END IF;

		--
		-- INSERT FOR THIS CLASS, BUT REMOVE EXISTING DATA FIRST
		--
		IF(ssSearch.worstClassBetterThanPrivClass IS NULL AND ssSearch.bestClassWorseThanPrivClass IS NOT NULL) THEN

			--RAISE NOTICE 'INSERT FOR THIS CLASS, BUT REMOVE EXISTING DATA FIRST';

			--
			-- REMOVE OLD DATA
			--
			RAISE NOTICE 'REMOVE OLD DATA';
			--PERFORM ss4_delete(ID_PER, NULL, NULL, ID_COU, ID_DIS, ID_SCH);
			--
			-- DO INSERT
			--
			RAISE NOTICE 'DO FRESH INSERT';
			--PERFORM ss4_insert(NULL, NULL, ID_PRI, NULL, NULL, NULL);

		END IF;

		--
		-- ERROR, THIS CLASS EXISTS HERE
		--
		IF(privClass = min_class) THEN

		END IF;
		
		--
		-- BETTER CLASS EXISTS
		--
		IF(min_class < privClass) THEN

		END IF;



	END IF;

    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss3_priv_activate_test(integer, integer, integer, character, character, character) OWNER TO postgres;

--
-- Name: ss3_priv_deactivate(integer, integer, integer, character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss3_priv_deactivate(integer, integer, integer, character, character, character) RETURNS character varying
    AS $_$DECLARE 
    ID_PER ALIAS FOR $1;
    ID_PRI ALIAS FOR $2;
    privClass ALIAS FOR $3;
    ID_COU ALIAS FOR $4;
    ID_DIS ALIAS FOR $5;
    ID_SCH ALIAS FOR $6;
    ssSearch RECORD;
	retval text; 
	flag_better boolean; 
	flag_worse boolean; 
	
	max_class integer; 
	min_class integer; 
BEGIN 
	flag_better := false;
	flag_worse := false;


	--
	-- SEE IF THERE IS A PRIV WITH BETTER ACCES THAN YOU
	--
	SELECT INTO ssSearch 
			max(CASE WHEN class < privClass THEN class END) as worstClassBetterThanPrivClass, 
			min(CASE WHEN class > privClass THEN class END) as bestClassWorseThanPrivClass, 
			max(class) as maxClass, 
			min(class) as minClass 
		FROM iep_privileges 
		WHERE 
			id_privileges != ID_PRI AND
			id_personnel = ID_PER AND
			status = 'Active' AND
			(ID_COU	 = id_county   OR ID_COU = NULL OR ID_COU is null OR id_county = NULL 		OR id_county is null) AND 
			(ID_DIS  = id_district OR ID_DIS = NULL OR ID_DIS is null OR id_district = NULL 	OR id_district is null) AND 
			(ID_SCH	 = id_school   OR ID_SCH = NULL OR ID_SCH is null OR id_school = NULL 		OR id_school is null) 
			;
		IF FOUND THEN
		max_class := ssSearch.maxClass;
		min_class := ssSearch.minClass;
		
		--
		-- 
		--
		IF(ssSearch.bestClassWorseThanPrivClass IS NULL AND ssSearch.worstClassBetterThanPrivClass IS NULL) THEN
			--
			--
			--
			PERFORM ss4_delete(ID_PER, NULL, NULL, ID_COU, ID_DIS, ID_SCH);
		END IF;

		--
		-- 
		--
		IF(ssSearch.worstClassBetterThanPrivClass IS NULL AND ssSearch.bestClassWorseThanPrivClass IS NOT NULL) THEN

			--RAISE NOTICE 'REMOVE FOR THIS CLASS, BUT INSERT FOR LOWER PRIV';

			--
			-- DEACTIVATE RECORDS
			--
			PERFORM ss4_delete(ID_PER, NULL, NULL, ID_COU, ID_DIS, ID_SCH);

			--
			-- INSERT FOR LOWER PRIVS
			--
			FOR ssSearch IN 
				SELECT * 
				FROM iep_privileges 
				WHERE 
					class > privClass AND 
					id_privileges != ID_PRI AND
					id_personnel = ID_PER AND
					status = 'Active' AND
					(ID_COU	 = id_county   OR ID_COU = NULL OR ID_COU is null OR id_county = NULL 		OR id_county is null) AND 
					(ID_DIS  = id_district OR ID_DIS = NULL OR ID_DIS is null OR id_district = NULL 	OR id_district is null) AND 
					(ID_SCH	 = id_school   OR ID_SCH = NULL OR ID_SCH is null OR id_school = NULL 		OR id_school is null)
					ORDER BY class asc
				LOOP 
				PERFORM ss3_priv_activate(ssSearch.id_personnel, ssSearch.id_privileges, ssSearch.class, ssSearch.id_county, ssSearch.id_district, ssSearch.id_school);
			END LOOP;
			


		END IF;

		--
		-- ERROR, THIS CLASS EXISTS HERE
		--
		IF(privClass = min_class) THEN

		END IF;
		
		--
		-- BETTER CLASS EXISTS, NO DEACTIVATION REQUIRED
		--
		IF(min_class < privClass) THEN

		END IF;

	END IF;

    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss3_priv_deactivate(integer, integer, integer, character, character, character) OWNER TO postgres;

--
-- Name: ss3_student_activate(integer, character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss3_student_activate(integer, character, character, character) RETURNS character varying
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ID_DIS ALIAS FOR $3;
    ID_SCH ALIAS FOR $4;
BEGIN 
		--
		-- FRESH INSERT
		--
		PERFORM ss4_insert_student(NULL, ID_STU, NULL, ID_COU, ID_DIS, ID_SCH);
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss3_student_activate(integer, character, character, character) OWNER TO postgres;

--
-- Name: ss3_student_deactivate(integer, character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss3_student_deactivate(integer, character, character, character) RETURNS character varying
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ID_DIS ALIAS FOR $3;
    ID_SCH ALIAS FOR $4;
BEGIN 
		--
		-- FRESH INSERT
		--
		PERFORM ss4_delete(NULL, ID_STU, NULL, ID_COU, ID_DIS, ID_SCH);
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss3_student_deactivate(integer, character, character, character) OWNER TO postgres;

--
-- Name: ss4_alter_priv(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss4_alter_priv() RETURNS "trigger"
    AS $$
DECLARE 

BEGIN 
 	--
 	-- DONT INSERT FOR SA
 	--
	IF ( NEW.class =1 ) THEN
	    RETURN NEW; 
	END IF;
	-------------------------------------------------------------------------------------
	-- INACTIVATE PRIVILEGE
	-------------------------------------------------------------------------------------
    IF ( NEW.status = 'Inactive' AND NEW.status != OLD.status ) THEN
		--
		-- DELETE STUDENT_SEARCH2 RECORDS
		-- WILL ALSO DELETE CM, EICM AND TEAM RECORDS FOR THIS PRIV IN STUDENT_SEARCH2
		--
        PERFORM ss3_priv_deactivate(NEW.id_personnel, NEW.id_privileges, NEW.class, NEW.id_county, NEW.id_district, NEW.id_school);
    END IF; 


	-------------------------------------------------------------------------------------
	-- ACTIVATE PRIVILEGE - INSERT STUDENT SEARCH RECORDS
	-------------------------------------------------------------------------------------
	IF ( (NEW.status = 'Active' OR NEW.status = 'active' ) AND NEW.status != OLD.status ) THEN 

        PERFORM ss3_priv_activate(NEW.id_personnel, NEW.id_privileges, NEW.class, NEW.id_county, NEW.id_district, NEW.id_school);
    END IF; 
    
    RETURN NEW; 
    
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss4_alter_priv() OWNER TO postgres;

--
-- Name: ss4_alter_student(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss4_alter_student() RETURNS "trigger"
    AS $$DECLARE 
	teamcountRecs RECORD; 
	teamcount integer; 
	ssWorkingRec RECORD; 
	
	flagAlreadyRun boolean;
	BEGIN 
	
	flagAlreadyRun := false;
	
    --	RAISE NOTICE 'BEGIN';
	----------------------------------------------------------------------------------------------------------------
	----------------------------------------------------------------------------------------------------------------
    --
	-- CHECK TO SEE IF STUDENT TEAM HAS CHANGED 
	-- IF SO, WE DONT KNOW IF THAT CHANGE IS LOCAL TO COUNTY, DISTRICT OR SCHOOL
	-- SO WE UPDATE ALL STUDENT RECORDS
	-- MOVED FROM THE STUDENT INFO SECTION BELOW ON 041115 - JLAVERE
	--
	-- 
	IF ( ((NEW.vere_ss_update = true) OR
		 (NEW.id_list_team != OLD.id_list_team OR (NEW.id_list_team is null AND OLD.id_list_team is not null) OR (OLD.id_list_team is null AND NEW.id_list_team is not null))
		) AND flagAlreadyRun = false) THEN
		--
		-- DELETE RECORDS FOR THIS STUDENT (ALL OF THEM)
		--
		PERFORM ss3_student_deactivate(OLD.id_student, NULL, NULL, NULL);

		--
		-- INSERT RECORDS FOR THIS STUDENT IN THE NEW COUNTY, DISTRICT, SCHOOL
		--
		PERFORM ss3_student_activate(NEW.id_student, NULL, NULL, NULL);
		flagAlreadyRun := true;
	END IF; 
	----------------------------------------------------------------------------------------------------------------
	----------------------------------------------------------------------------------------------------------------
	-- 
	-- CHECK TO SEE IF SCHOOL ONLY HAS CHANGED
	-- 
    --	IF (( NEW.id_county = OLD.id_county AND NEW.id_district = OLD.id_district AND NEW.id_school != OLD.id_school )) THEN
    --		-- RAISE NOTICE 'SCHOOL ONLY CHANGED (NOT COUNTY OR DISTRICT)';
    --		--
    --		-- DELETE RECORDS FOR THIS STUDENT IN THE OLD COUNTY, DISTRICT, SCHOOL
    --		--
    --		PERFORM ss3_student_deactivate(OLD.id_student, OLD.id_county, OLD.id_district, OLD.id_school);
    --		RAISE NOTICE 'REMOVE DONE';
    --		--
    --		-- INSERT RECORDS FOR THIS STUDENT IN THE NEW COUNTY, DISTRICT, SCHOOL
    --		--
    --		PERFORM ss3_student_activate(NEW.id_student, NEW.id_county, NEW.id_district, NEW.id_school);
    --		RAISE NOTICE 'INSERT DONE';
    --		flagAlreadyRun := true;
    --	END IF; 
	----------------------------------------------------------------------------------------------------------------
	----------------------------------------------------------------------------------------------------------------
	-- 
	-- CHECK TO SEE IF DISTRICT ONLY HAS CHANGED
	-- 
    --	IF ((NEW.id_county = OLD.id_county AND NEW.id_district != OLD.id_district ) AND flagAlreadyRun = false) THEN
    --		-- RAISE NOTICE 'DISTRICT CHANGED (NOT COUNTY)';
    --		--
    --		-- DELETE RECORDS FOR THIS STUDENT IN THE OLD COUNTY, DISTRICT
    --		--
    --		PERFORM ss3_student_deactivate(OLD.id_student, OLD.id_county, OLD.id_district, NULL);
    --		--
    --		-- INSERT RECORDS FOR THIS STUDENT IN THE NEW COUNTY, DISTRICT, SCHOOL
    --		--
    --		PERFORM ss3_student_activate(NEW.id_student, NEW.id_county, NEW.id_district, NULL);
    --		flagAlreadyRun := true;
    --	END IF; 
	----------------------------------------------------------------------------------------------------------------
	----------------------------------------------------------------------------------------------------------------
    --
	-- CHECK TO SEE IF STUDENT INFO HAS CHANGED 
	-- 
	IF ( (
		 (NEW.unique_id_state != OLD.unique_id_state OR (NEW.unique_id_state is null AND OLD.unique_id_state is not null) OR (OLD.unique_id_state is null AND NEW.unique_id_state is not null)) OR 
		 (NEW.id_case_mgr != OLD.id_case_mgr OR (NEW.id_case_mgr is null AND OLD.id_case_mgr is not null) OR (OLD.id_case_mgr is null AND NEW.id_case_mgr is not null)) OR 
		 (NEW.id_ei_case_mgr != OLD.id_ei_case_mgr OR (NEW.id_ei_case_mgr is null AND OLD.id_ei_case_mgr is not null) OR (OLD.id_ei_case_mgr is null AND NEW.id_ei_case_mgr is not null)) OR
		 (NEW.id_ser_cord != OLD.id_ser_cord OR (NEW.id_ser_cord is null AND OLD.id_ser_cord is not null) OR (OLD.id_ser_cord is null AND NEW.id_ser_cord is not null)) 
		) AND flagAlreadyRun = false) THEN
		--
		-- DELETE RECORDS FOR THIS STUDENT (ALL OF THEM)
		--
		--RAISE NOTICE 'before ss3_student_deactivate';
		PERFORM ss3_student_deactivate(OLD.id_student, NULL, NULL, NULL);

		--
		-- INSERT RECORDS FOR THIS STUDENT IN THE NEW COUNTY, DISTRICT, SCHOOL
		--
		--RAISE NOTICE 'before ss3_student_activate';
		PERFORM ss3_student_activate(NEW.id_student, NULL, NULL, NULL);
		--RAISE NOTICE 'after';
		flagAlreadyRun := true;
	END IF; 
	----------------------------------------------------------------------------------------------------------------
	----------------------------------------------------------------------------------------------------------------
	-- 
	-- CHECK TO SEE IF COUNTY HAS CHANGED
	-- 
	IF (( NEW.id_county != OLD.id_county OR NEW.id_district != OLD.id_district OR NEW.id_school != OLD.id_school )  AND flagAlreadyRun = false) THEN
--	IF ((NEW.id_county != OLD.id_county )  AND flagAlreadyRun = false) THEN
		-- RAISE NOTICE 'COUNTY CHANGED';
		--
		-- DELETE RECORDS FOR THIS STUDENT IN THE OLD COUNTY
		--
		PERFORM ss3_student_deactivate(OLD.id_student, OLD.id_county, NULL, NULL);

		--
		-- INSERT RECORDS FOR THIS STUDENT IN THE NEW COUNTY, DISTRICT, SCHOOL
		--
		PERFORM ss3_student_activate(NEW.id_student, NEW.id_county, NULL, NULL);
		flagAlreadyRun := true;
	END IF; 
	----------------------------------------------------------------------------------------------------------------
	----------------------------------------------------------------------------------------------------------------
	-- CHECK TO SEE IF STUDENT DATA HAS CHANGED 
	-- 
	IF (( 
		 (NEW.address_street1 != OLD.address_street1 OR (NEW.address_street1 is null AND OLD.address_street1 is not null) OR (OLD.address_street1 is null AND NEW.address_street1 is not null)) OR 
		 (NEW.address_city != OLD.address_city OR (NEW.address_city is null AND OLD.address_city is not null) OR (OLD.address_city is null AND NEW.address_city is not null)) OR 
		 (NEW.address_state != OLD.address_state OR (NEW.address_state is null AND OLD.address_state is not null) OR (OLD.address_state is null AND NEW.address_state is not null)) OR 
		 (NEW.address_zip != OLD.address_zip OR (NEW.address_zip is null AND OLD.address_zip is not null) OR (OLD.address_zip is null AND NEW.address_zip is not null)) OR 
		 (NEW.name_first != OLD.name_first OR (NEW.name_first is null AND OLD.name_first is not null) OR (OLD.name_first is null AND NEW.name_first is not null)) OR 
		 (NEW.name_last != OLD.name_last OR (NEW.name_last is null AND OLD.name_last is not null) OR (OLD.name_last is null AND NEW.name_last is not null)) OR 
		 (NEW.status != OLD.status OR (NEW.status is null AND OLD.status is not null) OR (OLD.status is null AND NEW.status is not null)) OR 
		 (NEW.phone != OLD.phone OR (NEW.phone is null AND OLD.phone is not null) OR (OLD.phone is null AND NEW.phone is not null)) OR 
		 (NEW.pub_school_student != OLD.pub_school_student OR (NEW.pub_school_student is null AND OLD.pub_school_student is not null) OR 
		 (OLD.pub_school_student is null AND NEW.pub_school_student is not null)) 
	   )  AND flagAlreadyRun = false) THEN
		
		--RAISE NOTICE 'CHANGE STUDENT DATA';
		--
		-- CHANGE DATA FOR THIS STUDENT
		--
		select into ssWorkingRec ss_update_student(NEW.id_student, NEW.address_street1 || ', ' || NEW.address_city || ' ' || CAST(NEW.address_state AS TEXT) || ', ' || CAST(NEW.address_zip AS TEXT), NEW.status, NEW.pub_school_student, NEW.phone) as updateResult;
		IF NOT FOUND OR ssWorkingRec.updateResult = false THEN
			--RAISE NOTICE 'ss_update_student updateResult = false';
		END IF;
			
	END IF; 


	
	RETURN NEW; 
	
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss4_alter_student() OWNER TO postgres;

--
-- Name: ss4_create_student(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss4_create_student() RETURNS "trigger"
    AS $$DECLARE 
	teamcountRecs RECORD; 
	teamcount integer; 
	ssWorkingRec RECORD; 
	
	flagAlreadyRun boolean;
	BEGIN 
	
	flagAlreadyRun := false;
	
	--RAISE NOTICE 'BEGIN';
	----------------------------------------------------------------------------------------------------------------
	----------------------------------------------------------------------------------------------------------------
		--
		-- INSERT RECORDS FOR THIS STUDENT IN THE NEW COUNTY, DISTRICT, SCHOOL
		--
		PERFORM ss3_student_activate(NEW.id_student, NEW.id_county, NULL, NULL);
		flagAlreadyRun := true;
	----------------------------------------------------------------------------------------------------------------
	----------------------------------------------------------------------------------------------------------------
	-- CHECK TO SEE IF CM HAS CHANGED 
	-- 

	----------------------------------------------------------------------------------------------------------------
	----------------------------------------------------------------------------------------------------------------
	
	RETURN NEW; 
	
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss4_create_student() OWNER TO postgres;

--
-- Name: ss4_deactivate(integer, integer, integer, character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss4_deactivate(integer, integer, integer, character, character, character) RETURNS integer
    AS $_$DECLARE 
    ID_PER ALIAS FOR $1;
    ID_STU ALIAS FOR $2;
    ID_PRI ALIAS FOR $3;
    ID_COU ALIAS FOR $4;
    ID_DIS ALIAS FOR $5;
    ID_SCH ALIAS FOR $6;
    ssSearch RECORD;
BEGIN 
    
    DELETE FROM student_search4
    WHERE 
        (id_student     = ID_STU OR ID_STU is null OR ID_STU = '') AND 
        (id_privileges  = ID_PRI OR ID_PRI is null OR ID_PRI = '') AND 
        (id_personnel   = ID_PER OR ID_PER is null OR ID_PER = '') AND 
        (id_county      = ID_COU OR ID_COU is null OR ID_COU = '') AND 
        (id_district    = ID_DIS OR ID_DIS is null OR ID_DIS = '') AND 
        (id_school      = ID_SCH OR ID_SCH is null OR ID_SCH = '')
        ;
        
    RETURN 0;

    
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss4_deactivate(integer, integer, integer, character, character, character) OWNER TO postgres;

--
-- Name: ss4_delete(integer, integer, integer, character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss4_delete(integer, integer, integer, character, character, character) RETURNS integer
    AS $_$DECLARE 
    ID_PER ALIAS FOR $1;
    ID_STU ALIAS FOR $2;
    ID_PRI ALIAS FOR $3;
    ID_COU ALIAS FOR $4;
    ID_DIS ALIAS FOR $5;
    ID_SCH ALIAS FOR $6;
    ssSearch RECORD;
BEGIN 
    
    DELETE FROM student_search4
    WHERE 
        (id_student     = ID_STU OR ID_STU is null ) AND 
        (id_personnel   = ID_PER OR ID_PER is null ) AND 
        (id_county      = ID_COU OR ID_COU is null ) AND 
        (id_district    = ID_DIS OR ID_DIS is null ) AND 
        (id_school      = ID_SCH OR ID_SCH is null )
        ;
        
    RETURN 0;

    
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss4_delete(integer, integer, integer, character, character, character) OWNER TO postgres;

--
-- Name: ss4_delete2(integer, integer, integer, character, character, character, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss4_delete2(integer, integer, integer, character, character, character, integer, integer, integer) RETURNS integer
    AS $_$DECLARE 
    ID_PER ALIAS FOR $1;
    ID_STU ALIAS FOR $2;
    ID_PRI ALIAS FOR $3;
    ID_COU ALIAS FOR $4;
    ID_DIS ALIAS FOR $5;
    ID_SCH ALIAS FOR $6;
    ID_CM ALIAS FOR $7;
    ID_SC ALIAS FOR $8;
    ID_EICM ALIAS FOR $9;
    ssSearch RECORD;
BEGIN 
    
    DELETE FROM student_search4
    WHERE 
        (id_student     = ID_STU OR ID_STU is null ) AND 
        (id_personnel   = ID_PER OR ID_PER is null ) AND 
        (id_county      = ID_COU OR ID_COU is null ) AND 
        (id_district    = ID_DIS OR ID_DIS is null ) AND 
        (id_school      = ID_SCH OR ID_SCH is null ) AND 
        (id_ei_case_mgr = ID_EICM OR ID_EICM is null ) AND 
        (id_case_mgr    = ID_CM OR ID_CM is null ) AND 
        (id_ser_cord    = ID_SC OR ID_SC is null ) 
        ;
        
    RETURN 0;

    
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss4_delete2(integer, integer, integer, character, character, character, integer, integer, integer) OWNER TO postgres;

--
-- Name: ss4_insert(integer, integer, integer, character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss4_insert(integer, integer, integer, character, character, character) RETURNS integer
    AS $_$DECLARE 
    ID_PER ALIAS FOR $1;
    ID_STU ALIAS FOR $2;
    ID_PRI ALIAS FOR $3;
    ID_COU ALIAS FOR $4;
    ID_DIS ALIAS FOR $5;
    ID_SCH ALIAS FOR $6;
    ssSearch RECORD;
    retval text; 
    flag_better boolean; 
    flag_worse boolean; 
    
    max_class integer; 
    min_class integer; 
BEGIN 
    flag_better := false;
    flag_worse := false;


INSERT INTO student_search4 
        (   id_student, 
            id_student_local, 
            unique_id_state, 
            class, 
            id_personnel, 
            id_county, 
            id_district, 
            id_school, 
            status, 
            pub_school_student, 
            address, 
            phone,
            id_case_mgr,
            id_ei_case_mgr,
            id_ser_cord,
            id_list_team,
            access_type
        )  
SELECT
        s.id_student, 
        s.id_student_local, 
        s.unique_id_state, 
        min(pr.class) AS class, 
        p.id_personnel, 
        s.id_county, 
        s.id_district, 
        s.id_school, 
        s.status,
        s.pub_school_student, 
        s.address_street1 || ', ' || s.address_city || ' ' || CAST(s.address_state AS TEXT) || ', ' || CAST(s.address_zip AS TEXT) as address, 
        s.phone, 
        s.id_case_mgr,
        s.id_ei_case_mgr,
        s.id_ser_cord,        
        s.id_list_team,
        CASE 
            WHEN min(pr.class) = 1 THEN 'SA' 
            WHEN min(pr.class) = 2 THEN 'DM' 
            WHEN min(pr.class) = 3 THEN 'ADM' 
            WHEN min(pr.class) = 4 THEN 'SM' 
            WHEN min(pr.class) = 5 THEN 'ASM' 
            WHEN s.id_case_mgr = p.id_personnel THEN 'CM' 
            WHEN s.id_ei_case_mgr = p.id_personnel THEN 'EICM' 
            WHEN s.id_ser_cord = p.id_personnel THEN 'SC'
            ELSE 'NO ACCESS'
        END AS access_type 
    
    FROM 
        iep_personnel p, 
        iep_privileges pr, 
        iep_student s 
    WHERE 
    (
        (   pr.class <=5 )
        OR
        (   s.id_case_mgr = p.id_personnel AND 
            pr.class <=6
        )
        OR
        (   s.id_ei_case_mgr = p.id_personnel AND 
--            (pr.class <=6)
            (pr.class <=6 OR pr.class = 10 )
        )
        OR
        (   s.id_ser_cord = p.id_personnel AND 
            (pr.class <=6 OR pr.class = 10 )
        )
    ) AND 
    
    pr.class !=9 AND 
    pr.class !=1 AND 
    pr.status = 'Active' AND 
    (pr.id_county = s.id_county     OR pr.id_county = ''    OR pr.id_county is null) AND 
    (pr.id_district = s.id_district OR pr.id_district = ''  OR pr.id_district is null) AND 
    (pr.id_school = s.id_school     OR pr.id_school = ''    OR pr.id_school is null) AND             
    p.id_personnel = pr.id_personnel AND 
    p.id_personnel = p.id_personnel_master AND 
    
    (s.id_student       = ID_STU OR ID_STU is null ) AND 
    (pr.id_privileges   = ID_PRI OR ID_PRI is null ) AND 
    (p.id_personnel     = ID_PER OR ID_PER is null ) AND 
    (pr.id_county       = ID_COU OR ID_COU is null ) AND 
    (pr.id_district     = ID_DIS OR ID_DIS is null ) AND 
    (pr.id_school       = ID_SCH OR ID_SCH is null )  
    
    
    GROUP BY 
        s.id_student, 
        s.id_student_local, 
        s.unique_id_state, 
        p.id_personnel, 
        s.id_county, 
        s.id_district, 
        s.id_school, 
        s.status,
        s.pub_school_student,
        address,
        s.phone,            
        s.id_case_mgr,
        s.id_ei_case_mgr,
        s.id_ser_cord, 
        s.id_list_team
    
    
UNION  
    
    SELECT      
        s.id_student, 
        s.id_student_local, 
        s.unique_id_state, 
        min(pr.class) AS class, 
        p.id_personnel, 
        s.id_county, 
        s.id_district, 
        s.id_school, 
        s.status,
        s.pub_school_student, 
        s.address_street1 || ', ' || s.address_city || ' ' || CAST(s.address_state AS TEXT) || ', ' || CAST(s.address_zip AS TEXT) as address, 
        s.phone, 
        s.id_case_mgr,
        s.id_ei_case_mgr,
        s.id_ser_cord,
        s.id_list_team,
        CASE 
            WHEN min(pr.class) = 1 THEN 'SA' 
            WHEN min(pr.class) = 2 THEN 'DM' 
            WHEN min(pr.class) = 3 THEN 'ADM' 
            WHEN min(pr.class) = 4 THEN 'SM' 
            WHEN min(pr.class) = 5 THEN 'ASM' 
            WHEN s.id_case_mgr = p.id_personnel THEN 'CM' 
            WHEN s.id_ei_case_mgr = p.id_personnel THEN 'EICM' 
            WHEN s.id_ser_cord = p.id_personnel THEN 'SC'
            ELSE 'TEAM'
        END AS access_type 
    
    FROM 
        iep_personnel p, 
        iep_privileges pr, 
        iep_student_team st, 
        iep_student s 
    WHERE 
    (
        pr.class <= 10 AND 
        st.id_personnel = pr.id_personnel AND
        st.id_student = s.id_student AND
        st.id_personnel = p.id_personnel AND
        st.status = 'Active' 
    ) AND 
    
        -- make sure that we do not gather info gathered above
        (s.id_case_mgr IS NULL OR (s.id_case_mgr != p.id_personnel and s.id_case_mgr is not null)) AND 
        (s.id_ser_cord IS NULL OR (s.id_ser_cord != p.id_personnel and s.id_ser_cord is not null)) AND 
        
        -- 20090223 jlavere - this next line is tricky because above you can be listed as id_ei_case_mgr and not get access
        -- if your priv class is over 6
        (s.id_ei_case_mgr IS NULL OR (s.id_ei_case_mgr != p.id_personnel and s.id_ei_case_mgr is not null)) AND 

    
    pr.class            !=9 AND 
    pr.class            !=1 AND 
    pr.status           = 'Active' AND 
    (pr.id_county       = s.id_county     OR pr.id_county = ''    OR pr.id_county is null) AND 
    (pr.id_district     = s.id_district OR pr.id_district = ''  OR pr.id_district is null) AND 
    (pr.id_school       = s.id_school     OR pr.id_school = ''    OR pr.id_school is null) AND             
    p.id_personnel      = pr.id_personnel AND 
    p.id_personnel      = p.id_personnel_master AND 
    
    
    (s.id_student       = ID_STU OR ID_STU is null ) AND 
    (pr.id_privileges   = ID_PRI OR ID_PRI is null ) AND 
    (p.id_personnel     = ID_PER OR ID_PER is null ) AND 
    (pr.id_county       = ID_COU OR ID_COU is null ) AND 
    (pr.id_district     = ID_DIS OR ID_DIS is null ) AND 
    (pr.id_school       = ID_SCH OR ID_SCH is null )  
    

    
    GROUP BY 
        s.id_student, 
        s.id_student_local, 
        s.unique_id_state, 
        p.id_personnel, 
        s.id_county, 
        s.id_district, 
        s.id_school, 
        s.status,
        s.pub_school_student,
        address,
        s.phone,
        s.id_case_mgr,
        s.id_ei_case_mgr,
        s.id_ser_cord,
        s.id_list_team
    ;
    return 0;
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss4_insert(integer, integer, integer, character, character, character) OWNER TO postgres;

--
-- Name: ss4_insert_student(integer, integer, integer, character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss4_insert_student(integer, integer, integer, character, character, character) RETURNS integer
    AS $_$DECLARE 
    ID_PER ALIAS FOR $1;
    ID_STU ALIAS FOR $2;
    ID_PRI ALIAS FOR $3;
    ID_COU ALIAS FOR $4;
    ID_DIS ALIAS FOR $5;
    ID_SCH ALIAS FOR $6;
    retval text; 
    ssSearch RECORD;

BEGIN 


    SELECT INTO ssSearch * FROM iep_student WHERE id_student = ID_STU;

    IF NOT FOUND THEN
        RETURN false; 
    END IF;
	--RAISE NOTICE 'ssSearch id_case_mgr: %', ssSearch.id_case_mgr;


INSERT INTO student_search4 
        (   id_student, 
            id_student_local, 
            unique_id_state, 
            class, 
            id_personnel, 
            id_county, 
            id_district, 
            id_school, 
            status, 
            pub_school_student, 
            address, 
            phone,
            id_case_mgr,
            id_ei_case_mgr,
            id_ser_cord,
            id_list_team,
            access_type
        )  
SELECT
        ssSearch.id_student, 
        ssSearch.id_student_local, 
        ssSearch.unique_id_state, 
        min(pr.class) AS class, 
        p.id_personnel, 
        ssSearch.id_county, 
        ssSearch.id_district, 
        ssSearch.id_school, 
        ssSearch.status,
        ssSearch.pub_school_student, 
        ssSearch.address_street1 || ', ' || ssSearch.address_city || ' ' || CAST(ssSearch.address_state AS TEXT) || ', ' || CAST(ssSearch.address_zip AS TEXT) as address, 
        ssSearch.phone, 
        ssSearch.id_case_mgr,
        ssSearch.id_ei_case_mgr,
        ssSearch.id_ser_cord,
        ssSearch.id_list_team,
        CASE 
            WHEN min(pr.class) = 1 THEN 'SA' 
            WHEN min(pr.class) = 2 THEN 'DM' 
            WHEN min(pr.class) = 3 THEN 'ADM' 
            WHEN min(pr.class) = 4 THEN 'SM' 
            WHEN min(pr.class) = 5 THEN 'ASM' 
            WHEN ssSearch.id_case_mgr = p.id_personnel THEN 'CM' 
            WHEN ssSearch.id_ei_case_mgr = p.id_personnel THEN 'EICM' 
            WHEN ssSearch.id_ser_cord = p.id_personnel THEN 'SC'
            ELSE 'NO ACCESS'
        END AS access_type 
    
    FROM 
        iep_personnel p, 
        iep_privileges pr
	WHERE 
    (
        (   pr.class <=5 )
        OR
        (   ssSearch.id_case_mgr = p.id_personnel AND 
            pr.class <=6
        )
        OR
        (   ssSearch.id_ei_case_mgr = p.id_personnel AND 
            (pr.class <= 6 OR pr.class = 10 )
        )
        OR
        (   ssSearch.id_ser_cord = p.id_personnel AND 
            (pr.class <= 6 OR pr.class = 10 )
        )
    ) AND 
    
    pr.class !=9 AND 
    pr.class !=1 AND 
    pr.status = 'Active' AND 
    (pr.id_county = ssSearch.id_county     OR pr.id_county = ''    OR pr.id_county is null) AND 
    (pr.id_district = ssSearch.id_district OR pr.id_district = ''  OR pr.id_district is null) AND 
    (pr.id_school = ssSearch.id_school     OR pr.id_school = ''    OR pr.id_school is null) AND             
    p.id_personnel = pr.id_personnel AND 
    p.id_personnel = p.id_personnel_master AND 
    
    (ssSearch.id_student       = ID_STU OR ID_STU is null ) AND 
    (pr.id_privileges   = ID_PRI OR ID_PRI is null ) AND 
    (p.id_personnel     = ID_PER OR ID_PER is null ) AND 
    (pr.id_county       = ID_COU OR ID_COU is null ) AND 
    (pr.id_district     = ID_DIS OR ID_DIS is null ) AND 
    (pr.id_school       = ID_SCH OR ID_SCH is null )  
    
    
    GROUP BY 
        ssSearch.id_student, 
        ssSearch.id_student_local, 
        ssSearch.unique_id_state, 
        p.id_personnel, 
        ssSearch.id_county, 
        ssSearch.id_district, 
        ssSearch.id_school, 
        ssSearch.status,
        ssSearch.pub_school_student,
        address,
        ssSearch.phone,            
        ssSearch.id_case_mgr,
        ssSearch.id_ei_case_mgr,
        ssSearch.id_ser_cord,
        ssSearch.id_list_team
    
    
UNION  
    
    SELECT      
        ssSearch.id_student, 
        ssSearch.id_student_local, 
        ssSearch.unique_id_state, 
        min(pr.class) AS class, 
        p.id_personnel, 
        ssSearch.id_county, 
        ssSearch.id_district, 
        ssSearch.id_school, 
        ssSearch.status,
        ssSearch.pub_school_student, 
        ssSearch.address_street1 || ', ' || ssSearch.address_city || ' ' || CAST(ssSearch.address_state AS TEXT) || ', ' || CAST(ssSearch.address_zip AS TEXT) as address, 
        ssSearch.phone, 
        ssSearch.id_case_mgr,
        ssSearch.id_ei_case_mgr,
        ssSearch.id_ser_cord,
        ssSearch.id_list_team,
        CASE 
            WHEN min(pr.class) = 1 THEN 'SA' 
            WHEN min(pr.class) = 2 THEN 'DM' 
            WHEN min(pr.class) = 3 THEN 'ADM' 
            WHEN min(pr.class) = 4 THEN 'SM' 
            WHEN min(pr.class) = 5 THEN 'ASM' 
            WHEN ssSearch.id_case_mgr = p.id_personnel THEN 'CM' 
            WHEN ssSearch.id_ei_case_mgr = p.id_personnel THEN 'EICM' 
            WHEN ssSearch.id_ser_cord = p.id_personnel THEN 'SC'
            ELSE 'TEAM'
        END AS access_type 
    
    FROM 
        iep_personnel p, 
        iep_privileges pr, 
        iep_student_team st
    WHERE 
    (
        pr.class <= 10 AND 
        st.id_personnel = pr.id_personnel AND
        st.id_student = ssSearch.id_student AND
        st.id_personnel = p.id_personnel AND
        st.status = 'Active' 
    ) AND 

        -- make sure that we do not gather info gathered above
        (ssSearch.id_case_mgr IS NULL OR (ssSearch.id_case_mgr != p.id_personnel and ssSearch.id_case_mgr is not null)) AND 
        (ssSearch.id_ser_cord IS NULL OR (ssSearch.id_ser_cord != p.id_personnel and ssSearch.id_ser_cord is not null)) AND 
        (ssSearch.id_ei_case_mgr IS NULL OR (ssSearch.id_ei_case_mgr != p.id_personnel and ssSearch.id_ei_case_mgr is not null)) AND 

    
    pr.class            !=9 AND 
    pr.class            !=1 AND 
    pr.status           = 'Active' AND 
    (pr.id_county       = ssSearch.id_county     OR pr.id_county = ''    OR pr.id_county is null) AND 
    (pr.id_district     = ssSearch.id_district OR pr.id_district = ''  OR pr.id_district is null) AND 
    (pr.id_school       = ssSearch.id_school     OR pr.id_school = ''    OR pr.id_school is null) AND             
    p.id_personnel      = pr.id_personnel AND 
    p.id_personnel      = p.id_personnel_master AND 
    
    
    (ssSearch.id_student       = ID_STU OR ID_STU is null ) AND 
    (pr.id_privileges   = ID_PRI OR ID_PRI is null ) AND 
    (p.id_personnel     = ID_PER OR ID_PER is null ) AND 
    (pr.id_county       = ID_COU OR ID_COU is null ) AND 
    (pr.id_district     = ID_DIS OR ID_DIS is null ) AND 
    (pr.id_school       = ID_SCH OR ID_SCH is null )  
    

    
    GROUP BY 
        ssSearch.id_student, 
        ssSearch.id_student_local, 
        ssSearch.unique_id_state, 
        p.id_personnel, 
        ssSearch.id_county, 
        ssSearch.id_district, 
        ssSearch.id_school, 
        ssSearch.status,
        ssSearch.pub_school_student,
        address,
        ssSearch.phone,
        ssSearch.id_case_mgr,
        ssSearch.id_ei_case_mgr,
        ssSearch.id_ser_cord,
        ssSearch.id_list_team
    ;
    return 0;
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss4_insert_student(integer, integer, integer, character, character, character) OWNER TO postgres;

--
-- Name: ss4_maintain_id_list_team(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss4_maintain_id_list_team() RETURNS "trigger"
    AS $$DECLARE 
    -- jlavere 20070919
    --
    -- this trigger is used to maintain the id_list_team on iep_student
    -- when a change in status occurs, the student id_list_team is updated
    --
    BEGIN 

    if(NEW.status != OLD.status) THEN
        UPDATE iep_student set id_list_team = get_active_id_list_team(OLD.id_student) WHERE id_student = OLD.id_student;
        RAISE NOTICE 'UPDATED';
    END IF;
    RETURN NEW; 
    
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss4_maintain_id_list_team() OWNER TO postgres;

--
-- Name: ss4_maintain_id_list_team_delete(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss4_maintain_id_list_team_delete() RETURNS "trigger"
    AS $$DECLARE 
    -- jlavere 20070919
    --
    -- this trigger is used to maintain the id_list_team on iep_student
    -- when a record is deleted, the student id_list_team is updated
    --
    BEGIN 

        UPDATE iep_student set id_list_team = get_active_id_list_team(OLD.id_student) WHERE id_student = OLD.id_student;
        RAISE NOTICE 'UPDATED';

    RETURN NEW; 
    
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss4_maintain_id_list_team_delete() OWNER TO postgres;

--
-- Name: ss4_student_test(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss4_student_test(integer) RETURNS boolean
    AS $_$DECLARE 

    ID_STU ALIAS FOR $1;
    ssSearch RECORD;
    
BEGIN 
    
    SELECT INTO ssSearch * FROM iep_student WHERE id_student = ID_STU;
    IF NOT FOUND THEN
        RETURN false; 
    END IF;
        
    --raise notice ' blap ';
	
	SELECT * FROM getfoo(1) AS t1;
	
	RETURN true;

END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss4_student_test(integer) OWNER TO postgres;

--
-- Name: ss_county_del(character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_county_del(character) RETURNS boolean
    AS $_$
DECLARE 
    ID_COU ALIAS FOR $1;
BEGIN 
    DELETE FROM student_search2 where id_county = ID_COU;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_county_del(character) OWNER TO postgres;

--
-- Name: ss_district_del(character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_district_del(character, character) RETURNS boolean
    AS $_$
DECLARE 
    ID_COU ALIAS FOR $1;
    ID_DIS ALIAS FOR $2;
BEGIN 
    DELETE FROM student_search2 where id_county = ID_COU AND id_district = ID_DIS;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_district_del(character, character) OWNER TO postgres;

--
-- Name: ss_personnel_delete_kp(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_personnel_delete_kp() RETURNS "trigger"
    AS $$
DECLARE 
	    ssDelete RECORD;
BEGIN 
		--
		-- DELETE STUDENT_SEARCH2 RECORDS
		-- WILL ALSO DELETE CM, EICM AND TEAM RECORDS FOR THIS PRIV IN STUDENT_SEARCH2
		--
		--RAISE NOTICE 'DELETING RECORDS';
		--
		SELECT INTO ssDelete ss_delete_priv_recs(OLD.id_personnel, OLD.id_privileges) as deleteSSresult;
    RETURN OLD; 
    
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_personnel_delete_kp() OWNER TO postgres;

--
-- Name: ss_privilege_kp2(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_privilege_kp2() RETURNS "trigger"
    AS $$
DECLARE 

BEGIN 
 	--
 	-- DONT INSERT FOR SA
 	--
	IF ( NEW.class =1 ) THEN
	    RETURN NEW; 
	END IF;
	-------------------------------------------------------------------------------------
	-- INACTIVATE PRIVILEGE
	-------------------------------------------------------------------------------------
    IF ( NEW.status = 'Inactive' ) THEN
		--
		-- DELETE STUDENT_SEARCH2 RECORDS
		-- WILL ALSO DELETE CM, EICM AND TEAM RECORDS FOR THIS PRIV IN STUDENT_SEARCH2
		--
        PERFORM ss3_priv_deactivate(NEW.id_personnel, NEW.id_privileges, NEW.class, NEW.id_county, NEW.id_district, NEW.id_school);
    END IF; 


	-------------------------------------------------------------------------------------
	-- ACTIVATE PRIVILEGE - INSERT STUDENT SEARCH RECORDS
	-------------------------------------------------------------------------------------
	IF ( NEW.status = 'Active' OR NEW.status = 'active' ) THEN 

        PERFORM ss3_priv_activate(NEW.id_personnel, NEW.id_privileges, NEW.class, NEW.id_county, NEW.id_district, NEW.id_school);
    END IF; 
    
    RETURN NEW; 
    
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_privilege_kp2() OWNER TO postgres;

--
-- Name: ss_school_del(character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_school_del(character, character, character) RETURNS boolean
    AS $_$DECLARE 
    ID_COU ALIAS FOR $1;
    ID_DIS ALIAS FOR $2;
    ID_SCH ALIAS FOR $3;
BEGIN 
    DELETE FROM student_search2 where id_county = ID_COU AND id_district = ID_DIS AND id_school = ID_SCH;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_school_del(character, character, character) OWNER TO postgres;

--
-- Name: ss_school_delete_kp(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_school_delete_kp() RETURNS "trigger"
    AS $$
DECLARE 
	    ssDelete RECORD;
BEGIN 
		--
		-- DELETE STUDENT_SEARCH2 RECORDS
		-- WILL ALSO DELETE CM, EICM AND TEAM RECORDS FOR THIS SCHOOL IN STUDENT_SEARCH2
		--
		--RAISE NOTICE 'DELETING RECORDS';
		--
		SELECT INTO ssDelete ss_school_del( OLD.id_county, OLD.id_district, OLD.id_school) as deleteSSresult;
    RETURN OLD; 
    
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_school_delete_kp() OWNER TO postgres;

--
-- Name: ss_student_county_cm_del(integer, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_county_cm_del(integer, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ssSearch RECORD;
BEGIN 
	DELETE FROM student_search2 where id_student = ID_STU AND 
			id_county = ID_COU AND 
			cm = true;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_county_cm_del(integer, character) OWNER TO postgres;

--
-- Name: ss_student_county_cm_exist(integer, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_county_cm_exist(integer, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ssSearch RECORD;

BEGIN 
	SELECT INTO ssSearch COUNT(*) FROM student_search2 WHERE id_student = ID_STU AND 
			id_county = ID_COU AND 
			cm = true;
	IF NOT FOUND OR ssSearch.count = 0 OR ssSearch.count is null THEN
		RETURN false; 
	ELSE
		RETURN true; 
	END IF;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_county_cm_exist(integer, character) OWNER TO postgres;

--
-- Name: ss_student_county_cm_insert(integer, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_county_cm_insert(integer, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ssSearch RECORD;
BEGIN 
	SELECT INTO ssSearch ss_student_county_cm_exist(ID_STU, ID_COU) as recsExist;
	IF (ssSearch.recsExist = true) THEN
		RAISE NOTICE 'STUDENT COUNTY RECORDS ALREADY EXIST: % ', ssSearch.recsExist;
		--SELECT INTO ssDelete ss_delete_priv_recs(ID_PER, ID_PRIVILEGE) as deleteSSresult;
	END IF;

	IF ( ssSearch.recsExist = false) THEN
	-- s.id_case_mgr = p.id_personnel
	-- class <=6 cm true <--- differences from ss_student_county_insert function
	--
	INSERT INTO student_search2 
		(cm, 
			id_privileges, 
			id_student, 
			id_student_local, 
			class, 
			id_personnel, 
			id_county, 
			id_district, 
			id_school, 
			student_name_first, 
			student_name_last, 
			status, 
			pub_school_student, 
			address, 
			phone) 
		SELECT 
			true, 
			pr.id_privileges, 
			s.id_student, 
			s.id_student_local, 
			pr.class, 
			p.id_personnel, 
			s.id_county, 
			s.id_district, 
			s.id_school, 
        	s.name_first, 
        	s.name_last, 
			s.status, 
			s.pub_school_student, 
			s.address_street1 || ', ' || s.address_city || ' ' || CAST(s.address_state AS TEXT) || ', ' || CAST(s.address_zip AS TEXT) as address, 
			s.phone
		FROM  
			iep_personnel p, 
			iep_privileges pr, 
			iep_student s ?
		WHERE s.id_student = ID_STU AND 
			s.id_case_mgr = p.id_personnel AND 
			(pr.id_county=s.id_county OR pr.id_county = '' OR pr.id_county is null) AND 
			pr.class <=6 AND 
			pr.class !=1 AND 
			p.id_personnel = pr.id_personnel AND 
			p.id_personnel=p.id_personnel_master;


		-- HOW DO I ERROR CHECK THE INSERT?
	END IF;	
	RETURN true; 
	
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_county_cm_insert(integer, character) OWNER TO postgres;

--
-- Name: ss_student_county_del(integer, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_county_del(integer, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ssSearch RECORD;
BEGIN 
	DELETE FROM student_search2 where id_student = ID_STU AND id_county = ID_COU;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_county_del(integer, character) OWNER TO postgres;

--
-- Name: ss_student_county_eicm_del(integer, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_county_eicm_del(integer, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ssSearch RECORD;
BEGIN 
	DELETE FROM student_search2 where id_student = ID_STU AND 
			id_county = ID_COU AND 
			eicm = true;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_county_eicm_del(integer, character) OWNER TO postgres;

--
-- Name: ss_student_county_eicm_exist(integer, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_county_eicm_exist(integer, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ssSearch RECORD;

BEGIN 
	SELECT INTO ssSearch COUNT(*) FROM student_search2 WHERE id_student = ID_STU AND 
			id_county = ID_COU AND 
			eicm = true;
	IF NOT FOUND OR ssSearch.count = 0 OR ssSearch.count is null THEN
		RETURN false; 
	ELSE
		RETURN true; 
	END IF;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_county_eicm_exist(integer, character) OWNER TO postgres;

--
-- Name: ss_student_county_eicm_insert(integer, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_county_eicm_insert(integer, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ssSearch RECORD;
BEGIN 
	SELECT INTO ssSearch ss_student_county_eicm_exist(ID_STU, ID_COU) as recsExist;
	IF (ssSearch.recsExist = true) THEN
		RAISE NOTICE 'STUDENT COUNTY RECORDS ALREADY EXIST: % ', ssSearch.recsExist;
		--SELECT INTO ssDelete ss_delete_priv_recs(ID_PER, ID_PRIVILEGE) as deleteSSresult;
	END IF;

	IF ( ssSearch.recsExist = false) THEN
	-- s.id_case_mgr = p.id_personnel
	-- class <=6 eicm true <--- differences from ss_student_county_insert function
	--
	INSERT INTO student_search2 
		(	eicm, 
			access_type,
			id_privileges, 
			id_student, 
			id_student_local, 
			class, 
			id_personnel, 
			id_county, 
			id_district, 
			id_school, 
			student_name_first, 
			student_name_last, 
			status, 
			pub_school_student, 
			address, 
			phone) 
		SELECT 
			true, 
			'EICM',
			pr.id_privileges, 
			s.id_student, 
			s.id_student_local, 
			pr.class, 
			p.id_personnel, 
			s.id_county, 
			s.id_district, 
			s.id_school, 
        s.name_first, 
        s.name_last, 
			s.status, 
			s.pub_school_student, 
			s.address_street1 || ', ' || s.address_city || ' ' || CAST(s.address_state AS TEXT) || ', ' || CAST(s.address_zip AS TEXT) as address, 
			s.phone
		FROM  
			iep_personnel p, 
			iep_privileges pr, 
			iep_student s WHERE s.id_student = ID_STU AND 
			s.id_ei_case_mgr = p.id_personnel AND 
			(pr.id_county=s.id_county OR pr.id_county = '' OR pr.id_county is null) AND 
			pr.class <=6 AND 
			pr.class !=1 AND 
			p.id_personnel = pr.id_personnel AND 
			p.id_personnel=p.id_personnel_master;


		-- HOW DO I ERROR CHECK THE INSERT?
	END IF;	
	RETURN true; 
	
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_county_eicm_insert(integer, character) OWNER TO postgres;

--
-- Name: ss_student_county_exist(integer, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_county_exist(integer, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ssSearch RECORD;

BEGIN 
	SELECT INTO ssSearch COUNT(*) FROM student_search2 WHERE id_student = ID_STU AND id_county = ID_COU;
	IF NOT FOUND OR ssSearch.count = 0 OR ssSearch.count is null THEN
		RETURN false; 
	ELSE
			RETURN true; 
	END IF;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_county_exist(integer, character) OWNER TO postgres;

--
-- Name: ss_student_county_insert(integer, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_county_insert(integer, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ssSearch RECORD;
BEGIN 
	SELECT INTO ssSearch ss_student_county_exist(ID_STU, ID_COU) as recsExist;
	IF (ssSearch.recsExist = true) THEN
		RAISE NOTICE 'STUDENT COUNTY RECORDS ALREADY EXIST: % ', ssSearch.recsExist;
		--SELECT INTO ssDelete ss_delete_priv_recs(ID_PER, ID_PRIVILEGE) as deleteSSresult;
	END IF;

	IF ( ssSearch.recsExist = false) THEN

	INSERT INTO student_search2 
		(id_privileges, 
			id_student, 
			id_student_local, 
			class, 
			id_personnel, 
			id_county, 
			id_district, 
			id_school, 
			student_name_first, 
			student_name_last, 
			status, 
			pub_school_student, 
			address, 
			phone) 
		select pr.id_privileges, 
			s.id_student, 
			s.id_student_local, 
			pr.class, 
			p.id_personnel, 
			s.id_county, 
			s.id_district, 
			s.id_school, 
        s.name_first, 
        s.name_last, 
			s.status, 
			s.pub_school_student, 
			s.address_street1 || ', ' || s.address_city || ' ' || CAST(s.address_state AS TEXT) || ', ' || CAST(s.address_zip AS TEXT) as address, 
			s.phone
		from iep_personnel p, 
			iep_privileges pr, 
			iep_student s WHERE s.id_student = ID_STU AND 
			(pr.id_county=s.id_county OR pr.id_county = '' OR pr.id_county is null) AND 
			pr.class <=5 AND 
			pr.class !=1 AND 
			p.id_personnel = pr.id_personnel AND 
			p.id_personnel=p.id_personnel_master;


		-- HOW DO I ERROR CHECK THE INSERT?
	END IF;	
	RETURN true; 
	
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_county_insert(integer, character) OWNER TO postgres;

--
-- Name: ss_student_district_cm_del(integer, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_district_cm_del(integer, character, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ID_DIS ALIAS FOR $3;
    ssSearch RECORD;
BEGIN 
	DELETE FROM student_search2 where id_student = ID_STU AND id_county = ID_COU AND id_district = ID_DIS AND cm = true;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_district_cm_del(integer, character, character) OWNER TO postgres;

--
-- Name: ss_student_district_cm_exist(integer, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_district_cm_exist(integer, character, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ID_DIS ALIAS FOR $3;
    ssSearch RECORD;

BEGIN 
	SELECT INTO ssSearch COUNT(*) FROM student_search2 WHERE id_student = ID_STU AND id_county = ID_COU AND id_district = ID_DIS AND cm = true;
	IF NOT FOUND OR ssSearch.count = 0 OR ssSearch.count is null THEN
		RETURN false; 
	ELSE
		RETURN true; 
	END IF;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_district_cm_exist(integer, character, character) OWNER TO postgres;

--
-- Name: ss_student_district_cm_insert(integer, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_district_cm_insert(integer, character, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ID_DIS ALIAS FOR $3;
    ssSearch RECORD;
BEGIN 
	SELECT INTO ssSearch ss_student_district_cm_exist(ID_STU, ID_COU, ID_DIS) as recsExist;
	IF (ssSearch.recsExist = true) THEN
		RAISE NOTICE 'STUDENT COUNTY RECORDS ALREADY EXIST: % ', ssSearch.recsExist;
		--SELECT INTO ssDelete ss_delete_priv_recs(ID_PER, ID_PRIVILEGE) as deleteSSresult;
	END IF;

	IF ( ssSearch.recsExist = false) THEN

	INSERT INTO student_search2 
		(cm, 
			id_privileges, 
			id_student, 
			id_student_local, 
			class, 
			id_personnel, 
			id_county, 
			id_district, 
			id_school, 
			student_name_first, 
			student_name_last, 
			status, 
			pub_school_student, 
			address, 
			phone) 
		select true, 
			pr.id_privileges, 
			s.id_student, 
			s.id_student_local, 
			pr.class, 
			p.id_personnel, 
			s.id_county, 
			s.id_district, 
			s.id_school, 
        s.name_first, 
        s.name_last, 
			s.status, 
			s.pub_school_student, 
			s.address_street1 || ', 
			' || s.address_city || ' ' || CAST(s.address_state AS TEXT) || ', 
			' || CAST(s.address_zip AS TEXT) as address, 
			s.phone
		from iep_personnel p, 
			iep_privileges pr, 
			iep_student s WHERE s.id_student = ID_STU AND 
			s.id_case_mgr = p.id_personnel AND 
			(pr.id_county=s.id_county OR pr.id_county = '' OR pr.id_county is null) AND 
			(pr.id_district=s.id_district OR pr.id_district = '' OR pr.id_district is null) AND 
			pr.class <=5 AND 
			pr.class !=1 AND 
			p.id_personnel = pr.id_personnel AND 
			p.id_personnel=p.id_personnel_master;

		-- HOW DO I ERROR CHECK THE INSERT?
	END IF;	
	RETURN true; 
	
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_district_cm_insert(integer, character, character) OWNER TO postgres;

--
-- Name: ss_student_district_del(integer, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_district_del(integer, character, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ID_DIS ALIAS FOR $3;
    ssSearch RECORD;
BEGIN 
	DELETE FROM student_search2 where id_student = ID_STU AND id_county = ID_COU AND id_district = ID_DIS;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_district_del(integer, character, character) OWNER TO postgres;

--
-- Name: ss_student_district_exist(integer, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_district_exist(integer, character, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ID_DIS ALIAS FOR $3;
    ssSearch RECORD;

BEGIN 
	SELECT INTO ssSearch COUNT(*) FROM student_search2 WHERE id_student = ID_STU AND id_county = ID_COU AND id_district = ID_DIS;
	IF NOT FOUND OR ssSearch.count = 0 OR ssSearch.count is null THEN
		RETURN false; 
	ELSE
		RETURN true; 
	END IF;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_district_exist(integer, character, character) OWNER TO postgres;

--
-- Name: ss_student_district_insert(integer, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_district_insert(integer, character, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ID_DIS ALIAS FOR $3;
    ssSearch RECORD;
BEGIN 
	SELECT INTO ssSearch ss_student_district_exist(ID_STU, ID_COU, ID_DIS) as recsExist;
	IF (ssSearch.recsExist = true) THEN
		RAISE NOTICE 'STUDENT COUNTY RECORDS ALREADY EXIST: % ', ssSearch.recsExist;
		--SELECT INTO ssDelete ss_delete_priv_recs(ID_PER, ID_PRIVILEGE) as deleteSSresult;
	END IF;

	IF ( ssSearch.recsExist = false) THEN

	INSERT INTO student_search2 
		(id_privileges, 
			id_student, 
			id_student_local, 
			class, 
			id_personnel, 
			id_county, 
			id_district, 
			id_school, 
			student_name_first, 
			student_name_last, 
			status, 
			pub_school_student, 
			address, 
			phone) 
		select pr.id_privileges, 
			s.id_student, 
			s.id_student_local, 
			pr.class, 
			p.id_personnel, 
			s.id_county, 
			s.id_district, 
			s.id_school, 
        s.name_first, 
        s.name_last, 
			s.status, 
			s.pub_school_student, 
			s.address_street1 || ', 
			' || s.address_city || ' ' || CAST(s.address_state AS TEXT) || ', 
			' || CAST(s.address_zip AS TEXT) as address, 
			s.phone
		from iep_personnel p, 
			iep_privileges pr, 
			iep_student s WHERE s.id_student = ID_STU AND 
			(pr.id_county=s.id_county OR pr.id_county = '' OR pr.id_district is null) AND 
			(pr.id_district=s.id_district OR pr.id_district = '' OR pr.id_district is null) AND 
			pr.class <=5 AND 
			pr.class !=1 AND 
			p.id_personnel = pr.id_personnel AND 
			p.id_personnel=p.id_personnel_master;

		-- HOW DO I ERROR CHECK THE INSERT?
	END IF;	
	RETURN true; 
	
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_district_insert(integer, character, character) OWNER TO postgres;

--
-- Name: ss_student_sc_del(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_sc_del(integer) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ssSearch RECORD;
BEGIN 
	RAISE NOTICE 'DELETING STUDENTS';
	DELETE FROM student_search2 where id_student = ID_STU AND 
			sc = true;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_sc_del(integer) OWNER TO postgres;

--
-- Name: ss_student_sc_exist(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_sc_exist(integer) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ssSearch RECORD;

BEGIN 
	SELECT INTO ssSearch COUNT(*) FROM student_search2 WHERE id_student = ID_STU AND 
			sc = true;
	IF NOT FOUND OR ssSearch.count = 0 OR ssSearch.count is null THEN
		RETURN false; 
	ELSE
		RETURN true; 
	END IF;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_sc_exist(integer) OWNER TO postgres;

--
-- Name: ss_student_sc_insert(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_sc_insert(integer) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ssSearch RECORD;
BEGIN 
	SELECT INTO ssSearch ss_student_sc_exist(ID_STU) as recsExist;
	IF (ssSearch.recsExist = true) THEN
		RAISE NOTICE 'STUDENT COUNTY RECORDS ALREADY EXIST: % ', ssSearch.recsExist;
		--SELECT INTO ssDelete ss_delete_priv_recs(ID_PER, ID_PRIVILEGE) as deleteSSresult;
	END IF;

	IF ( ssSearch.recsExist = false) THEN
	-- s.id_case_mgr = p.id_personnel
	-- class <=6 sc true <--- differences from ss_student_county_insert function
	--

	INSERT INTO student_search2 
		(   sc, 
			id_privileges, 
			id_student, 
			id_student_local, 
			class, 
			access_type, 
			id_personnel, 
			id_county, 
			id_district, 
			id_school, 
			student_name_first, 
			student_name_last, 
			status, 
			pub_school_student, 
			address, 
			phone) 
		SELECT 
		    true, 
			pr.id_privileges, 
			s.id_student, 
			s.id_student_local, 
			pr.class, 
			'SC', 
			p.id_personnel, 
			s.id_county, 
			s.id_district, 
			s.id_school, 
        s.name_first, 
        s.name_last, 
			s.status, 
			s.pub_school_student, 
			s.address_street1 || ', ' || s.address_city || ' ' || CAST(s.address_state AS TEXT) || ', ' || CAST(s.address_zip AS TEXT) as address, 
			s.phone
		FROM  
			iep_personnel p, 
			iep_privileges pr, 
			iep_student s 
		WHERE 
			s.id_student = ID_STU AND 
			s.id_ser_cord = p.id_personnel AND 
			(pr.id_county=s.id_county OR pr.id_county = '' OR pr.id_county is null) AND 
			pr.class =10 AND 
			pr.class !=1 AND 
			p.id_personnel = pr.id_personnel AND 
			p.id_personnel=p.id_personnel_master;


		-- HOW DO I ERROR CHECK THE INSERT?
	END IF;	
	RETURN true; 
	
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_sc_insert(integer) OWNER TO postgres;

--
-- Name: ss_student_school_cm_del(integer, character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_school_cm_del(integer, character, character, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ID_DIS ALIAS FOR $3;
    ID_SCH ALIAS FOR $4;
    ssSearch RECORD;
BEGIN 
    DELETE FROM student_search2 where id_student = ID_STU and 
            id_county = ID_COU and 
            id_district = ID_DIS and 
            id_school = ID_SCH and 
            cm = true;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_school_cm_del(integer, character, character, character) OWNER TO postgres;

--
-- Name: ss_student_school_cm_exist(integer, character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_school_cm_exist(integer, character, character, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ID_DIS ALIAS FOR $3;
    ID_SCH ALIAS FOR $4;
    ssSearch RECORD;

BEGIN 
    SELECT INTO ssSearch COUNT(*) FROM student_search2 WHERE id_student = ID_STU and 
            id_county = ID_COU and 
            id_district = ID_DIS and 
            id_school = ID_SCH and 
            cm = true;
    IF NOT FOUND OR ssSearch.count = 0 OR ssSearch.count is null THEN
        RETURN false; 
    ELSE
        RETURN true; 
    END IF;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_school_cm_exist(integer, character, character, character) OWNER TO postgres;

--
-- Name: ss_student_school_cm_insert(integer, character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_school_cm_insert(integer, character, character, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ID_DIS ALIAS FOR $3;
    ID_SCH ALIAS FOR $4;
    ssSearch RECORD;
BEGIN 
    SELECT INTO ssSearch ss_student_school_cm_exist(ID_STU, ID_COU, ID_DIS, ID_SCH) as recsExist;
    IF (ssSearch.recsExist = true) THEN
        RAISE NOTICE 'STUDENT COUNTY RECORDS ALREADY EXIST: % ', ssSearch.recsExist;
        --SELECT INTO ssDelete ss_delete_priv_recs(ID_PER, ID_PRIVILEGE) as deleteSSresult;
    END IF;

    IF ( ssSearch.recsExist = false) THEN
        --RAISE NOTICE 'ssSearch recs: % ', ssSearch.recsExist;
        --RAISE NOTICE 'id_student: %', ID_STU;
        --RAISE NOTICE 'xid_county: %', ID_COU;
        --RAISE NOTICE 'xid_district: %', ID_DIS;
        --RAISE NOTICE 'xid_school: %', ID_SCH;

    INSERT INTO student_search2 
        (cm, 
            id_privileges, 
            id_student, 
            id_student_local, 
            class, 
            id_personnel, 
            id_county, 
            id_district, 
            id_school, 
            student_name_first, 
            student_name_last, 
            status, 
            pub_school_student, 
            address, 
            phone) 
        SELECT 
            true, 
            pr.id_privileges, 
            s.id_student, 
            s.id_student_local, 
            pr.class, 
            p.id_personnel, 
            s.id_county, 
            s.id_district, 
            s.id_school, 
            lower(s.name_first), 
            lower(s.name_last), 
            s.status, 
            s.pub_school_student, 
            s.address_street1 || ', 
            ' || s.address_city || ' ' || CAST(s.address_state AS TEXT) || ', 
            ' || CAST(s.address_zip AS TEXT) as address, 
            s.phone
        FROM iep_personnel p, 
            iep_privileges pr, 
            iep_student s WHERE s.id_student = ID_STU and 
            s.id_case_mgr = p.id_personnel and 
            ( pr.id_county=s.id_county OR pr.id_county = '' OR pr.id_county is nul) and 
            (pr.id_district=s.id_district OR pr.id_district = '' OR pr.id_district is null) and 
            (pr.id_school=s.id_school OR pr.id_school = '' OR pr.id_school is null) and 
            pr.class <=5 and 
            pr.class !=1 AND 
            p.id_personnel = pr.id_personnel and 
            p.id_personnel=p.id_personnel_master;

        -- HOW DO I ERROR CHECK THE INSERT?
    END IF; 
    RETURN true; 
    
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_school_cm_insert(integer, character, character, character) OWNER TO postgres;

--
-- Name: ss_student_school_del(integer, character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_school_del(integer, character, character, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ID_DIS ALIAS FOR $3;
    ID_SCH ALIAS FOR $4;
    ssSearch RECORD;
BEGIN 
    DELETE FROM student_search2 where id_student = ID_STU AND id_county = ID_COU AND id_district = ID_DIS AND id_school = ID_SCH;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_school_del(integer, character, character, character) OWNER TO postgres;

--
-- Name: ss_student_school_exist(integer, character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_school_exist(integer, character, character, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ID_DIS ALIAS FOR $3;
    ID_SCH ALIAS FOR $4;
    ssSearch RECORD;

BEGIN 
    SELECT INTO ssSearch COUNT(*) FROM student_search2 WHERE id_student = ID_STU AND id_county = ID_COU AND id_district = ID_DIS AND id_school = ID_SCH;
    IF NOT FOUND OR ssSearch.count = 0 OR ssSearch.count is null THEN
        RETURN false; 
    ELSE
        RETURN true; 
    END IF;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_school_exist(integer, character, character, character) OWNER TO postgres;

--
-- Name: ss_student_school_insert(integer, character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_school_insert(integer, character, character, character) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ID_COU ALIAS FOR $2;
    ID_DIS ALIAS FOR $3;
    ID_SCH ALIAS FOR $4;
    ssSearch RECORD;
BEGIN 
    SELECT INTO ssSearch ss_student_school_exist(ID_STU, ID_COU, ID_DIS, ID_SCH) as recsExist;
    IF (ssSearch.recsExist = true) THEN
        RAISE NOTICE 'STUDENT COUNTY RECORDS ALREADY EXIST: % ', ssSearch.recsExist;
        --SELECT INTO ssDelete ss_delete_priv_recs(ID_PER, ID_PRIVILEGE) as deleteSSresult;
    END IF;

    IF ( ssSearch.recsExist = false) THEN
        --RAISE NOTICE 'ssSearch recs: % ', ssSearch.recsExist;
        --RAISE NOTICE 'id_student: %', ID_STU;
        --RAISE NOTICE 'xid_county: %', ID_COU;
        --RAISE NOTICE 'xid_district: %', ID_DIS;
        --RAISE NOTICE 'xid_school: %', ID_SCH;

    INSERT INTO student_search2 
        (id_privileges, 
            id_student, 
            id_student_local, 
            class, 
            id_personnel, 
            id_county, 
            id_district, 
            id_school, 
            student_name_first, 
            student_name_last, 
            status, 
            pub_school_student, 
            address, 
            phone) 
        select pr.id_privileges, 
            s.id_student, 
            s.id_student_local, 
            pr.class, 
            p.id_personnel, 
            s.id_county, 
            s.id_district, 
            s.id_school, 
            lower(s.name_first), 
            lower(s.name_last), 
            s.status, 
            s.pub_school_student, 
            s.address_street1 || ', 
            ' || s.address_city || ' ' || CAST(s.address_state AS TEXT) || ', 
            ' || CAST(s.address_zip AS TEXT) as address, 
            s.phone
        from 
            iep_personnel p, 
            iep_privileges pr, 
            iep_student s 
        WHERE s.id_student = ID_STU and 
            ( pr.id_county=s.id_county OR pr.id_county = '' OR pr.id_county is null) and 
            (pr.id_district=s.id_district OR pr.id_district = '' OR pr.id_district is null) and 
            (pr.id_school=s.id_school OR pr.id_school = '' OR pr.id_school IS NULL) and 
            pr.class <=5 and 
            pr.class !=1 AND 
            p.id_personnel = pr.id_personnel and 
            p.id_personnel=p.id_personnel_master;

        -- HOW DO I ERROR CHECK THE INSERT?
    END IF; 
    RETURN true; 
    
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_school_insert(integer, character, character, character) OWNER TO postgres;

--
-- Name: ss_student_team_del(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_team_del(integer) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ssSearch RECORD;
BEGIN 
	RAISE NOTICE 'DELETING STUDENTS';
	DELETE FROM student_search2 where id_student = ID_STU AND 
			team = true;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_team_del(integer) OWNER TO postgres;

--
-- Name: ss_student_team_exist(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_team_exist(integer) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ssSearch RECORD;

BEGIN 
	SELECT INTO ssSearch COUNT(*) FROM student_search2 WHERE id_student = ID_STU AND 
			team = true;
	IF NOT FOUND OR ssSearch.count = 0 OR ssSearch.count is null THEN
		RETURN false; 
	ELSE
		RETURN true; 
	END IF;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_team_exist(integer) OWNER TO postgres;

--
-- Name: ss_student_team_insert(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_student_team_insert(integer) RETURNS boolean
    AS $_$DECLARE 
    ID_STU ALIAS FOR $1;
    ssSearch RECORD;
BEGIN 
	SELECT INTO ssSearch ss_student_team_exist(ID_STU) as recsExist;
	IF (ssSearch.recsExist = true) THEN
		RAISE NOTICE 'STUDENT COUNTY RECORDS ALREADY EXIST: % ', ssSearch.recsExist;
		--SELECT INTO ssDelete ss_delete_priv_recs(ID_PER, ID_PRIVILEGE) as deleteSSresult;
	END IF;

	IF ( ssSearch.recsExist = false) THEN
	-- s.id_case_mgr = p.id_personnel
	-- class <=6 team true <--- differences from ss_student_county_insert function
	--

	INSERT INTO student_search2 
		(	
			team, 
			id_privileges, 
			id_student_team, 
			id_student, 
			id_student_local, 
			class, 
			id_personnel, 
			id_county, 
			id_district, 
			id_school, 
			student_name_first, 
			student_name_last, 
			status, 
			pub_school_student, 
			address, 
			phone
		) 
		select 
			true, 
			pr.id_privileges, 
			st.id_student_team, 
			s.id_student, 
			s.id_student_local, 
			pr.class, 
			p.id_personnel, 
			s.id_county, 
			s.id_district, 
			s.id_school, 
        s.name_first, 
        s.name_last, 
			s.status, 
			s.pub_school_student, 
			s.address_street1 || ', ' || s.address_city || ' ' || CAST(s.address_state AS TEXT) || ', ' || CAST(s.address_zip AS TEXT) as address, 
			s.phone
		FROM 
			iep_student_team st, 
			iep_privileges pr, 
			iep_personnel p, 
			iep_student s 
		WHERE 
			s.id_student = ID_STU AND 

			st.id_personnel = pr.id_personnel AND
			st.id_student = s.id_student AND
			st.id_personnel = p.id_personnel AND
			st.status = 'Active' AND 
			(pr.id_county=s.id_county OR pr.id_county = '' OR pr.id_county is null) AND 
			(pr.id_district=s.id_district OR pr.id_district = '' OR pr.id_district is null) AND 
			(pr.id_school=s.id_school OR pr.id_school = '' OR pr.id_school is null) AND 
			
			pr.class <=10 AND 
			pr.class !=1 AND 
			
			p.id_personnel = pr.id_personnel AND 
			p.id_personnel=p.id_personnel_master;


		-- HOW DO I ERROR CHECK THE INSERT?
	END IF;	
	RETURN true; 
	
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_student_team_insert(integer) OWNER TO postgres;

--
-- Name: ss_update_student(integer, character varying, character varying, boolean, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ss_update_student(integer, character varying, character varying, boolean, character varying) RETURNS boolean
    AS $_$
DECLARE 
    ID_STU ALIAS FOR $1;
    DATA_ADDRESS ALIAS FOR $2;
    DATA_STATUS ALIAS FOR $3;
    DATA_PUB_SCHOOL ALIAS FOR $4;
    DATA_PHONE ALIAS FOR $5;
BEGIN 
	UPDATE student_search4 set 
		address = DATA_ADDRESS,
		status = DATA_STATUS,
		pub_school_student = DATA_PUB_SCHOOL,
		phone = DATA_PHONE
	WHERE id_student = ID_STU;
    RETURN true; 
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ss_update_student(integer, character varying, character varying, boolean, character varying) OWNER TO postgres;

--
-- Name: ssrecs(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ssrecs(integer) RETURNS boolean
    AS $_$DECLARE
    PERSONNEL_ID alias for $1;
BEGIN 

select * from student_search4 where id_personnel = PERSONNEL_ID;



    RETURN false;
END;$_$
    LANGUAGE plpgsql IMMUTABLE STRICT;


ALTER FUNCTION public.ssrecs(integer) OWNER TO postgres;

--
-- Name: state_id_unique(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION state_id_unique() RETURNS "trigger"
    AS $$
DECLARE
    STUREC RECORD;

BEGIN
    --raise notice 'unique_id_state: %', NEW.unique_id_state;

    IF NEW.unique_id_state IS NULL THEN
        RETURN NEW;
    END IF;
    
    SELECT INTO STUREC count(1) FROM iep_student WHERE unique_id_state = NEW.unique_id_state AND id_student != NEW.id_student;
    IF NOT FOUND THEN
      RAISE EXCEPTION 'select failure.';
    END IF;
    raise notice 'STUREC COUNT: %', STUREC.count;


    IF STUREC.count = 0 THEN
        NEW.unique_id_state_duplicate := null;
    ELSE
        NEW.unique_id_state_duplicate := NEW.unique_id_state;
        NEW.unique_id_state := NULL;
    END IF;
    RETURN NEW;
    
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.state_id_unique() OWNER TO postgres;

--
-- Name: student_change_status(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION student_change_status() RETURNS "trigger"
    AS $$DECLARE
     district_rec RECORD;

BEGIN 
IF new.status != old.status THEN 
    IF new.status = 'Active' THEN
        RAISE NOTICE 'STUDENT STATUS: %', new.status;

    ELSIF new.status = 'Remove' THEN
        RAISE NOTICE 'STUDENT STATUS: %', new.status;

    ELSIF new.status = 'Inactive' THEN
        RAISE NOTICE 'STUDENT STATUS: %', new.status;

    ELSIF new.status = 'Never Qualified' THEN
        RAISE NOTICE 'STUDENT STATUS: %', new.status;

        PERFORM student_team_inactivate(new.id_student);
        new.id_case_mgr := NULL;
        new.id_ser_cord := NULL;
        new.id_ei_case_mgr := NULL;


    ELSIF new.status = 'Transferred to Non-SRS District' THEN
        RAISE NOTICE 'STUDENT STATUS: %', new.status;

        PERFORM disabletriggers('iep_student_team');
        PERFORM student_team_inactivate(new.id_student);
        PERFORM enabletriggers('iep_student_team');

        new.id_list_team = get_active_id_list_team(OLD.id_student);
        new.id_case_mgr := NULL;
        new.id_case_mgr := NULL;
        new.id_ser_cord := NULL;
        new.id_ei_case_mgr := NULL;
        
    ELSIF new.status = 'No Longer Qualifies' THEN
        RAISE NOTICE 'STUDENT STATUS: %', new.status;

        PERFORM disabletriggers('iep_student_team');
        PERFORM student_team_inactivate(new.id_student);
        PERFORM enabletriggers('iep_student_team');

        --UPDATE iep_student set id_list_team = get_active_id_list_team(OLD.id_student) WHERE id_student = OLD.id_student;
        --RAISE NOTICE 'student_change_status: UPDATED Student with new team data';
        new.id_list_team = get_active_id_list_team(OLD.id_student);
        new.id_case_mgr := NULL;
        new.id_ser_cord := NULL;
        new.id_ei_case_mgr := NULL;

    END IF;
    
END IF;
   RETURN new; 
END;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.student_change_status() OWNER TO postgres;

--
-- Name: student_dupe_info(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION student_dupe_info(id_student integer) RETURNS void
    AS $_$
DECLARE

    IDSTUDENT           alias for $1;
    selectStudentSql    varchar;
    rec                 record;
    tmprec                          record;
BEGIN
    
    selectStudentSql := 'SELECT * FROM iep_student  where id_student = \'' || IDSTUDENT || '\'; ';

    --RAISE NOTICE 'getKeywordList: %', selectStudentSql;
    FOR rec IN EXECUTE selectStudentSql     
    LOOP
        
        RAISE NOTICE 'id_student: %', rec.id_student;
        RAISE NOTICE 'student_has_parents: %', student_has_parents(rec.id_student);
        
        select into tmprec form_count(rec.id_student) as formcount;
        RAISE NOTICE 'formcount: %', tmprec.formcount;
        
        RAISE NOTICE 'student_has_CM: %', student_has_cm(rec.id_student);
        RAISE NOTICE 'student data source: %', rec.data_source;
        
        
        IF ((not student_has_cm(rec.id_student)) and rec.data_source is null) THEN
            RAISE NOTICE 'student can be removed: %', rec.id_student;
        END IF;
    END LOOP;
    
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.student_dupe_info(id_student integer) OWNER TO postgres;

--
-- Name: student_has_cm(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION student_has_cm(id_student integer) RETURNS boolean
    AS $_$
DECLARE

    IDSTUDENT           alias for $1;
    sql                 varchar;
    rec                 record;
BEGIN
    
    sql := 'SELECT id_case_mgr FROM iep_student where id_student = \'' || IDSTUDENT || '\'; ';

    FOR rec IN EXECUTE sql     
    LOOP
        if (rec.id_case_mgr is not null) then
            --RAISE NOTICE 'id_case_mgr: %', rec.id_case_mgr;
            return true;
        Else    
            return false;
        end if;
    END LOOP;
    return false;
    
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.student_has_cm(id_student integer) OWNER TO postgres;

--
-- Name: student_has_parents(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION student_has_parents(id_student integer) RETURNS boolean
    AS $_$
DECLARE

    IDSTUDENT           alias for $1;
    sql                 varchar;
    rec                 record;
BEGIN
    
    sql := 'SELECT count(1) FROM iep_guardian where id_student = \'' || IDSTUDENT || '\'; ';

    --RAISE NOTICE 'sql: %', sql;
    FOR rec IN EXECUTE sql     
    LOOP
        --RAISE NOTICE 'parents: %', rec.count;
        if (rec.count > 0) then
            return true;
        Else    
            return false;
        end if;
    END LOOP;
    return false;
    
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.student_has_parents(id_student integer) OWNER TO postgres;

--
-- Name: student_lps_merge_id_student_local(integer, character, character, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION student_lps_merge_id_student_local(integer, character, character, boolean) RETURNS integer
    AS $_$DECLARE
     student_rec RECORD;
     merge_rec RECORD;
     student_local alias for $1;
     COU alias for $2;
     DIS alias for $3;
     delete_student_a alias for $4;

     i INTEGER;
     id_student_a INTEGER;
     id_student_b INTEGER;

BEGIN 

    i := 0;
    FOR student_rec IN select * from iep_student where id_student_local = student_local and id_county = COU and id_district = DIS order by id_student LOOP
        i := i + 1;
        --RAISE NOTICE 'id_student: %', student_rec.id_student;
        IF i = 1 THEN
            id_student_a := student_rec.id_student;
        ELSIF i = 2 THEN
            id_student_B := student_rec.id_student;
        END IF;
    END LOOP;
    
    --RAISE NOTICE 'i: %', i;
    IF i > 2 THEN
        RAISE NOTICE '----------------------TOO MANY DUPE RECORDS TO CALL AUTOMATICALLY';
    ELSIF i < 2 THEN
        RAISE NOTICE '---------------------------------------------TOO FEW DUPE RECORDS';
    ELSE
        -- call the merge function
        RAISE NOTICE '------------------------------------------------------------MERGE';
        RAISE NOTICE '-------------------------------------PROCESSING ID_STUDENT_LOCAL: %', student_local;
        select into merge_rec student_lps_merge_id_students(id_student_a, id_student_b, delete_student_a);
    END IF;

    return student_rec.id_student;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.student_lps_merge_id_student_local(integer, character, character, boolean) OWNER TO postgres;

--
-- Name: student_lps_merge_id_students(integer, integer, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION student_lps_merge_id_students(integer, integer, boolean) RETURNS boolean
    AS $_$DECLARE
     id_student_old alias for $1;
     id_student_new alias for $2;
     delete_student_a alias for $3;
     student_rec_old RECORD;
     student_rec_new RECORD;
     MERGE_RESULT            boolean;
     MERGE_ACTION            VARCHAR;

BEGIN 
    
    select into student_rec_old * from iep_student where id_student = id_student_old;
    select into student_rec_new * from iep_student where id_student = id_student_new;

    RAISE NOTICE '_________________________________________________________________________________id_student_old: %', id_student_old;
    RAISE NOTICE '_________________________________________________________________________________student_rec_old.data_source: %', student_rec_old.data_source;

    RAISE NOTICE '_________________________________________________________________________________id_student_new: %', id_student_new;
    RAISE NOTICE '_________________________________________________________________________________student_rec_new.data_source: %', student_rec_new.data_source;

--    RAISE NOTICE '_________________________________________________________________________________grade: %', student_rec_old.grade;
--    RAISE NOTICE '_________________________________________________________________________________date_web_notify: %', student_rec_old.date_web_notify;
--    RAISE NOTICE '_________________________________________________________________________________id_case_mgr: %', student_rec_old.id_case_mgr;
--    RAISE NOTICE '_________________________________________________________________________________unique_id_state: %', student_rec_old.unique_id_state;
--    RAISE NOTICE '_________________________________________________________________________________primary_disability: %', student_rec_old.primary_disability;
--    RAISE NOTICE '_________________________________________________________________________________date_last_mdt: %', student_rec_old.date_last_mdt;
--    RAISE NOTICE '_________________________________________________________________________________date_last_iep: %', student_rec_old.date_last_iep;
--    RAISE NOTICE '_________________________________________________________________________________date_last_iep: %', student_rec_old.date_last_iep;
--    RAISE NOTICE '_________________________________________________________________________________program_provider: %', student_rec_old.program_provider;
    RAISE NOTICE '_________________________________________________________________________________student_rec_new.grade: %', student_rec_new.grade;
    RAISE NOTICE '_________________________________________________________________________________student_rec_old.grade: %', student_rec_old.grade;
--    RAISE NOTICE '_________________________________________________________________________________student_rec_new.grade: %', to_number(student_rec_new.grade, '999');
--    RAISE NOTICE '_________________________________________________________________________________student_rec_old.grade: %', to_number(student_rec_old.grade, '999');
    --
    -- check grades match and run appropriate code
    --
    
    MERGE_ACTION := 'NONE';
    IF student_rec_old.grade = null OR student_rec_old.grade = '' THEN
        RAISE NOTICE '----------------------------------------------------GRADE IS NULL';
        MERGE_ACTION := 'NONE';
        
    ELSIF student_rec_old.grade = 'K' THEN
        RAISE NOTICE 'MATCH GRADE__: %', student_rec_old.grade;
        MERGE_ACTION := 'STUDENT';

    ELSIF student_rec_new.grade = 'K' THEN
        RAISE NOTICE 'MATCH GRADE__: %', student_rec_old.grade;
        MERGE_ACTION := 'STUDENT';

    ELSIF student_rec_old.grade = 'CB' OR student_rec_old.grade = 'ECSE' THEN
        MERGE_ACTION := 'PRE';
    
    ELSIF to_number(student_rec_old.grade, '999') >= 1 AND to_number(student_rec_new.grade, '999') >= 1 THEN
        RAISE NOTICE '---------------------------GRADES DO NOT MATCH - BUT BOTH ABOVE K';
        RAISE NOTICE 'student_rec_old grade: %', student_rec_old.grade;
        RAISE NOTICE 'student_rec_new grade: %', student_rec_new.grade;
        MERGE_ACTION := 'STUDENT';

    ELSIF to_number(student_rec_old.grade, '999') != to_number(student_rec_new.grade, '999') THEN
        RAISE NOTICE '----------------------------------------------GRADES DO NOT MATCH';
        RAISE NOTICE 'student_rec_old grade: %', student_rec_old.grade;
        RAISE NOTICE 'student_rec_new grade: %', student_rec_new.grade;
        MERGE_ACTION := 'NONE';
        
    ELSIF student_rec_old.grade = 'K' OR to_number(student_rec_old.grade, '999') >= 1 THEN
        RAISE NOTICE 'MATCH GRADE__: %', student_rec_old.grade;
        MERGE_ACTION := 'STUDENT';

    END IF;
    
    
    
    IF MERGE_ACTION = 'STUDENT' THEN        
        --
        -- update the new student with the old student info
        --
        RAISE NOTICE '------------------------------------UPDATING MERGE STUDENT ACTION';
        update iep_student set 
            data_source_jesse_modified = true,
            date_web_notify = student_rec_old.date_web_notify,          --notification date
            id_case_mgr = student_rec_old.id_case_mgr,                  --the case manager
            unique_id_state = student_rec_old.unique_id_state,          --nssrs id#
            primary_disability = student_rec_old.primary_disability,    --verified disability
            date_last_mdt = student_rec_old.date_last_mdt,              --last MDT date
            date_last_iep = student_rec_old.date_last_iep,              --last IEP date
            pub_school_student = student_rec_old.pub_school_student,    --pub school student
            program_provider = student_rec_old.program_provider         --Child Receives Majority Of Special Education from
        where id_student = student_rec_new.id_student;
        
        --
        -- merge the students - this merges the forms and 
        --
        select into MERGE_RESULT merge_students(id_student_new, id_student_old);
        IF MERGE_RESULT THEN
            RAISE NOTICE 'successful merge';
            -- remove related data
            -- delete from iep_guardian where id_student = id_student_old;
            
            --
            -- update guardians / move to new student
            --
            RAISE NOTICE '------------------------------------------BEGIN SECONDARY UPDATES';
            UPDATE iep_guardian SET id_student = id_student_new where id_student = id_student_old;
            RAISE NOTICE '------------------------------------SUCCESSFUL IEP_GUARDIAN MERGE';
            
--            if RECORDS_WITH_TEAM_COUNT > 0 then
--                UPDATE iep_student_team SET status = 'Inactive' where id_student = id_student_old;
--                RAISE NOTICE 'successful iep_student_team inactivate';
--            else
--                RAISE NOTICE 'no team records';
--            end if;
--            
            UPDATE iep_log SET id_student = id_student_new where id_student = id_student_old;
            RAISE NOTICE '-----------------------------------------SUCCESSFUL IEP_LOG MERGE';
            
            IF delete_student_a THEN
                delete from iep_student where id_student = id_student_old;
                RAISE NOTICE '-------------------------------------------------------------SUCCESSFUL DELETE';
            ELSE
                RAISE NOTICE '----------------------------------------------------------------DELETE SKIPPED';
            END IF;
        ELSE 
            RAISE NOTICE '------------------------------------------------------------------------------FAIL';
        END IF;
        
        
        
        
        
        
    ELSIF MERGE_ACTION = 'PRE' THEN
        RAISE NOTICE '----------------------------------------UPDATING MERGE PRE ACTION';
        --
        -- update the new student with the old student info
        --
        update iep_student set 
            data_source_jesse_modified = true,
            date_web_notify = student_rec_old.date_web_notify,          --notification date
            id_case_mgr = student_rec_old.id_case_mgr,                  --the case manager
            unique_id_state = student_rec_old.unique_id_state,          --nssrs id#
            primary_disability = student_rec_old.primary_disability,    --verified disability
            date_last_mdt = student_rec_old.date_last_mdt,              --last MDT date
            date_last_iep = student_rec_old.date_last_iep,              --last IEP date
            id_ser_cord = student_rec_old.id_ser_cord,                  --id_ser_cord
            id_ei_case_mgr = student_rec_old.id_ei_case_mgr,            --id_ei_case_mgr
            medicaid = student_rec_old.medicaid,                        --medicaid
            ei_ref_date = student_rec_old.ei_ref_date                  --ei_ref_date
        where id_student = student_rec_new.id_student;
        
        --
        -- merge the students - this merges the forms and 
        --
        select into MERGE_RESULT merge_students(id_student_new, id_student_old);
        IF MERGE_RESULT THEN
            RAISE NOTICE 'successful merge';
            -- remove related data
            -- delete from iep_guardian where id_student = id_student_old;
            
            --
            -- update guardians / move to new student
            --
            RAISE NOTICE '------------------------------------------BEGIN SECONDARY UPDATES';
            UPDATE iep_guardian SET id_student = id_student_new where id_student = id_student_old;
            RAISE NOTICE '------------------------------------SUCCESSFUL IEP_GUARDIAN MERGE';
            
--            if RECORDS_WITH_TEAM_COUNT > 0 then
--                UPDATE iep_student_team SET status = 'Inactive' where id_student = id_student_old;
--                RAISE NOTICE 'successful iep_student_team inactivate';
--            else
--                RAISE NOTICE 'no team records';
--            end if;
--            
            UPDATE iep_log SET id_student = id_student_new where id_student = id_student_old;
            RAISE NOTICE '-----------------------------------------SUCCESSFUL IEP_LOG MERGE';
            
            IF delete_student_a THEN
                delete from iep_student where id_student = id_student_old;
                RAISE NOTICE '-------------------------------------------------------------SUCCESSFUL DELETE';
            ELSE
                RAISE NOTICE '----------------------------------------------------------------DELETE SKIPPED';
            END IF;
        ELSE 
            RAISE NOTICE '------------------------------------------------------------------------------FAIL';
        END IF;

    END IF;    
    
    return true;    
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.student_lps_merge_id_students(integer, integer, boolean) OWNER TO postgres;

--
-- Name: student_maintain_non_pub(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION student_maintain_non_pub() RETURNS "trigger"
    AS $$DECLARE 

	BEGIN 
	
	--RAISE NOTICE 'RUNNING student_maintain_non_pub TRIGGER';
	
	----------------------------------------------------------------------------------------------------------------
	----------------------------------------------------------------------------------------------------------------
	-- 
	-- CHECK TO SEE IF nonPubCounty ONLY HAS CHANGED
	-- 
	IF NEW.nonPubDistrict != OLD.nonPubDistrict THEN
		RAISE NOTICE 'NON PUB COUNTY CHANGED - CLEAR SCHOOL';
		--
		-- CLEAR SCHOOL
		--
		NEW.nonPubSchool := NULL; 
	END IF;
	
	IF NEW.nonPubCounty != OLD.nonPubCounty THEN
		RAISE NOTICE 'NON PUB COUNTY CHANGED - CLEAR DIST AND SCHOOL';
		--
		-- CLEAR DIST AND SCHOOL
		--
		NEW.nonPubDistrict := NULL; 
		NEW.nonPubSchool := NULL; 
	END IF; 
	---------------------------------------------------------------------------------------------------------------- 
	----------------------------------------------------------------------------------------------------------------

	----------------------------------------------------------------------------------------------------------------
	----------------------------------------------------------------------------------------------------------------
	-- 
	-- CHECK TO SEE IF nonPubCounty ONLY HAS CHANGED
	-- 
	IF NEW.pub_school_student != OLD.pub_school_student THEN
		--
		-- CLEAR NON PUB FIELDS
		--
		NEW.nonPubCounty := NULL; 
		NEW.nonPubDistrict := NULL; 
		NEW.nonPubSchool := NULL; 
	END IF;
	---------------------------------------------------------------------------------------------------------------- 
	----------------------------------------------------------------------------------------------------------------
	
	RETURN NEW; 
	
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.student_maintain_non_pub() OWNER TO postgres;

--
-- Name: student_move_forms(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION student_move_forms(integer, integer) RETURNS bigint
    AS $_$UPDATE iep_form_001 set id_student = $1 where id_student = $2; 

UPDATE iep_form_002 set id_student = $1 where id_student = $2; 
UPDATE iep_form_003 set id_student = $1 where id_student = $2; 
UPDATE iep_form_004 set id_student = $1 where id_student = $2; 
UPDATE iep_form_005 set id_student = $1 where id_student = $2; 
UPDATE iep_form_006 set id_student = $1 where id_student = $2; 
UPDATE iep_form_007 set id_student = $1 where id_student = $2; 
UPDATE iep_form_008 set id_student = $1 where id_student = $2; 
UPDATE iep_form_009 set id_student = $1 where id_student = $2; 
UPDATE iep_form_010 set id_student = $1 where id_student = $2; 
UPDATE iep_form_011 set id_student = $1 where id_student = $2; 
UPDATE iep_form_012 set id_student = $1 where id_student = $2; 



select count(*) from iep_student where id_student = $1;$_$
    LANGUAGE sql;


ALTER FUNCTION public.student_move_forms(integer, integer) OWNER TO postgres;

--
-- Name: student_team_inactivate(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION student_team_inactivate(integer) RETURNS integer
    AS $_$DECLARE

    studentID alias for $1;    
BEGIN 
   UPDATE iep_student_team set status = 'Inactive' where id_student = studentID;
   RAISE NOTICE 'student ID: %', studentID;
   RETURN studentID; 
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.student_team_inactivate(integer) OWNER TO postgres;

--
-- Name: student_update(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION student_update() RETURNS "trigger"
    AS $$DECLARE
    district_rec      record;
    data_source_modified boolean;
BEGIN 
    --
    -- INIT VARIABLES
    --
    data_source_modified := false;

    --
    -- IF STUDENT IS AT A NEW SCHOOL, UPDATE THEIR DATA_SOURCE
    --
    IF NEW.id_county != old.id_county OR NEW.id_district != old.id_district OR NEW.id_school != old.id_school THEN 
       --
       -- UPDATE THE DATA SOURCE TO MATCH THE DISTRICT RECORD
       --
       SELECT INTO district_rec pref_district_imports, district_import_code FROM iep_district WHERE id_county = new.id_county AND id_district = new.id_district;
       IF district_rec.pref_district_imports THEN
               --
               -- data_source added
            --
            NEW.data_source := district_rec.district_import_code;
            data_source_modified := true;
       ELSE
               --
               -- data_source cleared
            --
            NEW.data_source := NULL;
            data_source_modified := true;
       END IF;
    END IF;

    --
    -- IF NEW RECORD (THE ATTEMPTED UPDATE) HAS SOMETHING IN DATA_SOURCE BUT
    --  OLD RECORD (TO BE UPDATED) IS EMPTY
    -- CANCEL THE UPDATE
    --
    IF(    (NEW.data_source != NULL AND (OLD.data_source = NULL OR OLD.data_source = ''))
        AND data_source_modified = false
      ) THEN
        return OLD;
    END IF;
    
    
    --
    -- IF STUDENT IS AT A NEW SCHOOL, 
    --
    IF new.id_county != old.id_county OR new.id_district != old.id_district OR new.id_school != old.id_school THEN 
        --
        -- CLEAR THE CASE MGR
        --
           new.id_case_mgr := NULL;   

        --
        -- CLEAR THE LOCAL STUDENT ID
        --
        IF (NEW.data_source != OLD.data_source OR NEW.data_source = NULL)THEN
        	new.id_student_local := NULL;
        END IF;
       
    END IF;

   RETURN new; 
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.student_update() OWNER TO postgres;

--
-- Name: table_field_names_less(character varying, character varying[], character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION table_field_names_less(character varying, character varying[], character varying) RETURNS character varying
    AS $_$DECLARE
    TABLE_NAME          alias for $1;
    FIELDS_ELIMINATE    alias for $2;
    TEXT_PREFIX         alias for $3;

    FIELD_NAMES         varchar[];
    ssSearch            record;
    TEMP_FIELD_NAME     varchar;
    RETTEXT             varchar;
    i                   integer;

BEGIN 
    i := 1;

    FOR ssSearch IN 
    SELECT 
            a.attname AS field
        FROM 
            pg_class c, 
            pg_attribute a, 
            pg_type t, 
            pg_tables 
        WHERE 
            c.relname = pg_tables.tablename
            AND pg_tables.tablename like TABLE_NAME 
            and a.attnum > 0
            and a.attrelid = c.oid
            and a.atttypid = t.oid
        ORDER BY pg_tables.tablename, field
    LOOP
        TEMP_FIELD_NAME := ssSearch.field;
        --RAISE NOTICE 'field: %', TEMP_FIELD_NAME;
        IF( not element_in_array(FIELDS_ELIMINATE, TEMP_FIELD_NAME) ) THEN
            IF(i = 1) THEN
                RETTEXT := TEXT_PREFIX || TEMP_FIELD_NAME;
            ELSE
                RETTEXT := RETTEXT || ',' || TEXT_PREFIX || TEMP_FIELD_NAME;
            END IF;
        END IF;
        i := i + 1;
    END LOOP;
   
    RETURN RETTEXT; 

END;$_$
    LANGUAGE plpgsql IMMUTABLE STRICT;


ALTER FUNCTION public.table_field_names_less(character varying, character varying[], character varying) OWNER TO postgres;

--
-- Name: team_rec_count(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION team_rec_count(integer) RETURNS integer
    AS $_$DECLARE
    PK_STUDENT     alias for $1;
    TEAM_COUNT  integer;
BEGIN 
    
    select into TEAM_COUNT count(1) from iep_student_team where id_student = $1;
    RETURN TEAM_COUNT;
END;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.team_rec_count(integer) OWNER TO postgres;

--
-- Name: transfer_student(integer, character, character, character, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION transfer_student(integer, character, character, character, integer) RETURNS integer
    AS $_$
    BEGIN;
    UPDATE iep_student
        SET id_county = $2, 
            id_district = $3, 
            id_school = $4, 
            id_case_mgr = 0, 
            sesis_exit_code = null, -- 20050202 - jlavere added for bug 2920
            sesis_exit_date = null, -- 20050202 - jlavere added for bug 2920
            id_list_team=''
        WHERE id_student = $1;
    UPDATE iep_student_team SET status='Inactive' WHERE id_student = $1;
    UPDATE iep_transfer_request SET transfer_type='Confirmed' where id_transfer_request = $5;
    COMMIT;
    SELECT id_student from iep_student where id_student = $1;
$_$
    LANGUAGE sql;


ALTER FUNCTION public.transfer_student(integer, character, character, character, integer) OWNER TO postgres;

--
-- Name: transfer_student_plpgsql(integer, character, character, character, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION transfer_student_plpgsql(integer, character, character, character, integer) RETURNS character varying
    AS $_$DECLARE 

BEGIN
    UPDATE iep_student
        SET id_county = $2, 
            id_district = $3, 
            id_school = $4, 
            id_case_mgr = 0, 
            sesis_exit_code = null, -- 20050202 - jlavere added for bug 2920
            sesis_exit_date = null, -- 20050202 - jlavere added for bug 2920
            id_list_team=null
        WHERE id_student = $1;
    UPDATE iep_student_team SET status='Inactive' WHERE id_student = $1;
    UPDATE iep_transfer_request SET transfer_type='Confirmed' where id_transfer_request = $5;
    RETURN TRUE;
END;$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.transfer_student_plpgsql(integer, character, character, character, integer) OWNER TO postgres;

--
-- Name: translate_user_class(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION translate_user_class(integer) RETURNS text
    AS $_$-- takes a class numeric value and produces the text equivalent
-- sl 2003-03-13
DECLARE ret text; class ALIAS FOR $1; BEGIN SELECT INTO ret CAST( CASE WHEN class=1 THEN 'System Administrator' when class=2 THEN 'District Manager' when class=3 THEN 'Assistant District Manager' when class=4 then 'School Manager' when class=5 then 'Assistant School Manager' when class=6 then 'Case Manager' when class=7 then 'School Staff' when class=8 then 'Specialist' when class=9 then 'Parent' else 'Unknown' END AS TEXT) ; RETURN ret; END$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.translate_user_class(integer) OWNER TO postgres;

--
-- Name: translate_user_class_short(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION translate_user_class_short(integer) RETURNS text
    AS $_$-- takes a class numeric value and produces the short text equivalent
-- sl 2003-03-13
DECLARE ret text; class ALIAS FOR $1; BEGIN SELECT INTO ret CAST( CASE WHEN class=1 THEN 'SA' when class=2 THEN 'DM' when class=3 THEN 'ADM' when class=4 then 'SM' when class=5 then 'ASM' when class=6 then 'CM' when class=7 then 'SS' when class=8 then 'SP' when class=9 then 'PG' else 'UNK' END AS TEXT) ; RETURN ret; END$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.translate_user_class_short(integer) OWNER TO postgres;

--
-- Name: update_cds_county(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_cds_county() RETURNS "trigger"
    AS $$
DECLARE

BEGIN
    --
    -- DELETE RECORDS
    --
    UPDATE iep_school_name 
    SET name_county = NEW.name_county 
    where id_county = OLD.id_county;
    
    RETURN NEW;
    
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.update_cds_county() OWNER TO postgres;

--
-- Name: update_cds_district(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_cds_district() RETURNS "trigger"
    AS $$
DECLARE

BEGIN
    --
    -- DELETE RECORDS
    --
    UPDATE iep_school_name 
    SET name_district = NEW.name_district 
    where id_county = OLD.id_county AND 
          id_district = OLD.id_district;
    
    RETURN NEW;
    
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.update_cds_district() OWNER TO postgres;

--
-- Name: update_cds_school(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_cds_school() RETURNS "trigger"
    AS $$
DECLARE

BEGIN
    --
    -- DELETE RECORDS
    --
    UPDATE iep_school_name 
    SET name_school = NEW.name_school 
    where id_cds = OLD.id_county || OLD.id_district || OLD.id_school;
    
    RETURN NEW;
    
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.update_cds_school() OWNER TO postgres;

--
-- Name: uppercase_imp_code(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION uppercase_imp_code() RETURNS "trigger"
    AS $$
DECLARE

BEGIN
    --
    -- DELETE RECORDS
    --
    NEW.district_import_code := upper(NEW.district_import_code);
    RETURN NEW;
    
END;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.uppercase_imp_code() OWNER TO postgres;

--
-- Name: iep_school; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_school (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    address_street1 character varying NOT NULL,
    address_street2 character varying,
    address_city character varying NOT NULL,
    address_state character(2) NOT NULL,
    address_zip character varying NOT NULL,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    id_school character(3) NOT NULL,
    name_school character varying NOT NULL,
    status character varying DEFAULT 'Inactive'::character varying,
    id_school_mgr integer,
    id_account_sprv integer,
    checkout_id_user integer,
    checkout_time integer,
    phone_main character varying,
    minutes_per_week smallint,
    date_report1 date,
    date_report2 date,
    date_report3 date,
    date_report4 date,
    date_report5 date,
    date_report6 date,
    id_school_mgr_old integer,
    id_account_sprv_old integer
);


ALTER TABLE public.iep_school OWNER TO postgres;

--
-- Name: iep_student; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_student (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    address_street1 character varying NOT NULL,
    address_street2 character varying,
    address_city character varying NOT NULL,
    address_state character varying NOT NULL,
    address_zip character varying NOT NULL,
    date_last_iep date,
    date_last_iep_update date,
    date_last_mdt date,
    dob date NOT NULL,
    email_address character varying,
    ethnic_group character(1) NOT NULL,
    exit_code character varying,
    xxxgender character(1) DEFAULT 'd'::bpchar NOT NULL,
    grade character varying NOT NULL,
    id_case_mgr integer,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    id_school character(3) NOT NULL,
    id_student integer DEFAULT nextval(('iep_student_id_student_seq'::text)::regclass) NOT NULL,
    name_first character varying NOT NULL,
    name_middle character varying,
    name_last character varying NOT NULL,
    phone character varying,
    primary_disability character varying,
    primary_language character varying NOT NULL,
    xxxprimary_language_family character varying DEFAULT 'd'::character varying NOT NULL,
    program_provider character varying,
    xxxstatus character(1) DEFAULT 'a'::bpchar NOT NULL,
    ward boolean,
    ward_surrogate boolean,
    ward_surrogate_nn boolean,
    ward_surrogate_other character varying,
    id_list_team character varying,
    id_list_guardian character varying,
    status character varying DEFAULT 'Active'::character varying,
    gender character varying,
    checkout_id_user integer,
    checkout_time integer,
    date_web_notify date,
    id_student_local integer,
    change_type text,
    last_auto_update timestamp with time zone,
    transition_plan boolean DEFAULT false,
    pub_school_student boolean,
    id_case_mgr_old integer,
    id_team_list_old text,
    data_source text,
    sesis_exit_code smallint,
    program_provider_name character varying,
    program_provider_code character varying,
    ssn character varying,
    medicaid character varying,
    ei_ref_date character varying,
    eval_date character varying,
    medicaid_off boolean DEFAULT false,
    ssn_off boolean DEFAULT false,
    id_ser_cord integer,
    id_ei_case_mgr integer,
    transitioned boolean,
    nonpubcounty character(2),
    nonpubdistrict character(4),
    nonpubschool character(3),
    vere_ss_update boolean,
    sesis_exit_date date,
    program_provider_id_school character varying,
    ell_student boolean,
    unique_id_state bigint,
    unique_id_state_duplicate bigint,
    id_county_orphan character(2),
    id_district_orphan character(4),
    id_school_orphan character(3),
    parental_placement boolean,
    exclude_from_nssrs_report boolean,
    alternate_assessment boolean
);


ALTER TABLE public.iep_student OWNER TO postgres;

--
-- Name: active_school_list_short; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW active_school_list_short AS
    SELECT get_name_county((iep_school.id_county)::text) AS county, get_name_district((iep_school.id_county)::text, (iep_school.id_district)::text) AS district, get_name_school((iep_school.id_county)::text, (iep_school.id_district)::text, (iep_school.id_school)::text) AS school, (SELECT count(*) AS count FROM iep_student s WHERE (((s.id_county = iep_school.id_county) AND (s.id_district = iep_school.id_district)) AND (s.id_school = iep_school.id_school))) AS student_count FROM iep_school WHERE ((iep_school.status)::text = ('Active'::character varying)::text) ORDER BY get_name_county((iep_school.id_county)::text), get_name_district((iep_school.id_county)::text, (iep_school.id_district)::text), get_name_school((iep_school.id_county)::text, (iep_school.id_district)::text, (iep_school.id_school)::text);


ALTER TABLE public.active_school_list_short OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: admin_settings; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE admin_settings (
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_admin_settings serial NOT NULL,
    nssrs_submition_date date,
    nssrs_school_year date
);


ALTER TABLE public.admin_settings OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: archived_forms; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE archived_forms (
    id_archived_forms serial NOT NULL,
    id_form integer,
    form_name character varying,
    form_keys character varying,
    form_data character varying,
    id_student integer,
    student_name character varying,
    date_created date,
    date_archived date,
    status character varying DEFAULT 'archived'::character varying,
    deleted_by integer
);


ALTER TABLE public.archived_forms OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: bu_fm01; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm01 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_001 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    explanation character varying,
    options character varying,
    reasons character varying,
    proposal character varying,
    other_factors character varying,
    amount_time character varying,
    academic character varying,
    intellectual character varying,
    perceptual character varying,
    social character varying,
    speech character varying,
    other character varying,
    contact_name character varying,
    contact_num character varying,
    consent character varying,
    no_consent_reason character varying,
    consent_date date,
    signature_on_file boolean,
    form_options text,
    dob date,
    grade text,
    id_case_mgr_old integer,
    version_number integer
);


ALTER TABLE public.bu_fm01 OWNER TO postgres;

--
-- Name: bu_fm02; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm02 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_002 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    date_mdt date,
    mdt_00602b1a boolean,
    mdt_00602b1b character(1),
    mdt_00602b1b_text character varying,
    mdt_00602b2 boolean,
    mdt_00602b3 boolean,
    mdt_00602b3a boolean,
    mdt_00602b3b boolean,
    mdt_00602b4 boolean,
    mdt_00602b4_text character varying,
    mdt_00602b4a boolean,
    mdt_00602b4b boolean,
    mdt_00602b4b_text character varying,
    mdt_00602b5 boolean,
    mdt_00602b6 boolean,
    mdt_00602b7 boolean,
    mdt_00602b8 boolean,
    mdt_00602b9 boolean,
    mdt_00602b10 boolean,
    mdt_00602b11 boolean,
    mdt_00602c1 boolean,
    mdt_00602c2 boolean,
    mdt_00603c boolean,
    mdt_00603g_contact character varying,
    mdt_00603e2b character varying,
    mdt_00603f2 character varying,
    mdt_00603f2d character varying,
    mdt_00603f2e character varying,
    mdt_00603f2f boolean,
    mdt_00603f2f_correctable boolean,
    mdt_00603f2g character varying,
    date_provided date,
    name_provided_by character varying,
    team_member_name character varying,
    team_member_position character varying,
    team_member_agree character varying,
    mdt_00603e2a character varying,
    mdt_00603f2a character varying,
    mdt_00603f2a_sli character varying,
    mdt_00603f2a_vi character varying,
    mdt_00603g date,
    disability_au boolean,
    disability_bd boolean,
    disability_db boolean,
    disability_hi boolean,
    disability_mhmi boolean,
    disability_mhmo boolean,
    disability_mhsp boolean,
    disability_multi boolean,
    disability_oi boolean,
    disability_ohi boolean,
    disability_sld boolean,
    disability_sli_language boolean,
    disability_sli_articulation boolean,
    disability_sli_voice boolean,
    disability_sli_fluency boolean,
    disability_vi character varying,
    disability_dd boolean,
    disability_tbi boolean,
    disability_primary character varying,
    dob date,
    grade text,
    id_case_mgr_old integer,
    initial_verification boolean,
    sesisdisability_bl boolean,
    sesisdisability_dl boolean,
    sesisdisability_none boolean,
    initial_verification_date date,
    disability_vi_checkbox boolean,
    notused_bool2 boolean,
    disability_hi_detail character varying,
    bug_3023 character varying,
    bug2085_manually_updated_verification_date boolean,
    version_number integer,
    mdt_00602b1c boolean
);


ALTER TABLE public.bu_fm02 OWNER TO postgres;

--
-- Name: bu_fm03; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm03 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_003 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    notice_to character varying,
    address character varying,
    iep_meeting character varying,
    general_ed character varying,
    special_ed character varying,
    school_rep character varying,
    other_attendees character varying,
    other_staff character varying,
    contact_name character varying,
    contact_num character varying,
    rights_contact character varying,
    rights_contact_num character varying,
    attend boolean,
    schedule_meeting character varying,
    parent_date_1 date,
    school_contact character varying,
    response_address character varying,
    city_state_zip character varying,
    school_phone character varying,
    date_sent date,
    signature_on_file boolean,
    dob date,
    grade text,
    id_case_mgr_old integer,
    version_number integer,
    on_off_checkbox boolean
);


ALTER TABLE public.bu_fm03 OWNER TO postgres;

--
-- Name: bu_fm04; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm04 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_004 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_conference date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    address character varying,
    date_last_mdt date,
    dob date,
    grade character varying,
    percent_sewre smallint,
    percent_senwre smallint,
    percent_re smallint,
    phone character varying,
    primary_disability character varying,
    primary_service_from date,
    primary_service_to date,
    primary_service_calendar boolean,
    primary_service_location character varying,
    primary_service_tpd_unit character varying,
    primary_service_tpd character varying,
    primary_service_dpw character varying,
    primary_service_mpy character varying,
    present_lev_perf character varying,
    student_strengths character varying,
    parental_concerns character varying,
    results_evaluation character varying,
    results_perf character varying,
    behavioral_strategies character varying,
    language_needs character varying,
    braille_instruction character varying,
    comm_needs character varying,
    deaf_comm_needs character varying,
    deaf_comm_opp character varying,
    deaf_academic_lev character varying,
    assistive_tech character varying,
    participant_names character varying,
    participant_dates character varying,
    doc_signed_parent boolean,
    date_doc_signed_parent date,
    necessary_action boolean,
    received_copy boolean,
    transition_14_stmt character varying,
    transition_16_instruction character varying,
    transition_16_rel_services character varying,
    transition_16_comm_exp character varying,
    transition_16_emp_options character varying,
    transition_16_dly_liv_skills character varying,
    transition_16_func_voc_eval character varying,
    transition_16_inter_agency_link character varying,
    transition_activity1 character varying,
    transition_activity2 character varying,
    transition_activity3 character varying,
    transition_agency1 character varying,
    transition_agency2 character varying,
    transition_agency3 character varying,
    transition_date1 date,
    transition_date2 date,
    transition_date3 date,
    transportation_yn character varying,
    transportation_why character varying,
    transportation_desc character varying,
    assessment_accom character varying,
    assessment_alt character varying,
    ext_school_year_desc character varying,
    assessment_desc character varying,
    ext_school_year_yn boolean,
    related_service character varying,
    related_service_from_date character varying,
    related_service_to_date character varying,
    related_service_location character varying,
    related_service_tpd character varying,
    related_service_tpd_unit character varying,
    related_service_dpw character varying,
    related_service_mpy character varying,
    related_service_calendar character varying,
    supp_service character varying,
    supp_service_from_date character varying,
    supp_service_to_date character varying,
    supp_service_location character varying,
    supp_service_tpd character varying,
    supp_service_tpd_unit character varying,
    supp_service_dpw character varying,
    supp_service_mpy character varying,
    supp_service_calendar character varying,
    prog_mod character varying,
    prog_mod_from_date character varying,
    prog_mod_to_date character varying,
    prog_mod_location character varying,
    prog_mod_tpd character varying,
    prog_mod_tpd_unit character varying,
    prog_mod_dpw character varying,
    prog_mod_mpy character varying,
    prog_mod_calendar character varying,
    ass_tech character varying,
    ass_tech_from_date character varying,
    ass_tech_to_date character varying,
    ass_tech_location character varying,
    ass_tech_tpd character varying,
    ass_tech_tpd_unit character varying,
    ass_tech_dpw character varying,
    ass_tech_mpy character varying,
    ass_tech_calendar character varying,
    supports character varying,
    supports_from_date character varying,
    supports_to_date character varying,
    supports_location character varying,
    supports_tpd character varying,
    supports_tpd_unit character varying,
    supports_dpw character varying,
    supports_mpy character varying,
    supports_calendar character varying,
    row_count_rs smallint,
    row_count_sa smallint,
    row_count_ma smallint,
    row_count_at smallint,
    row_count_sp smallint,
    primary_service_dpm character varying,
    related_service_dpm character varying,
    supp_service_dpm character varying,
    prog_mod_dpm character varying,
    ass_tech_dpm character varying,
    supports_dpm character varying,
    extracurricular_nonacademic character varying,
    primary_service_location_other character varying,
    related_service_location_other character varying,
    supp_service_location_other character varying,
    prog_mod_location_other character varying,
    ass_tech_location_other character varying,
    supports_location_other character varying,
    lps_sig_understand_process boolean,
    lps_sig_agree boolean,
    lps_sig_no_agree_reason character varying,
    lps_sig_understand_purpose boolean,
    lps_sig_understand_covers boolean,
    lps_sig_understand_receive boolean,
    lps_sig_received_rights boolean,
    lps_sig_participated boolean,
    transition_plan boolean,
    primary_disability_drop text,
    primary_disability_drop_other text,
    related_service_drop text,
    participant_type_par character varying,
    participant_other_par character varying,
    participant_names_par character varying,
    participant_names_dis character varying,
    participant_type_dis character varying,
    participant_other_dis character varying,
    participant_dates_dis character varying,
    participant_dates_par character varying,
    row_count_par smallint,
    row_count_dis smallint,
    no_sig_explanation character varying,
    mdt_primary_disability character varying,
    id_case_mgr_old integer,
    program_provider character varying,
    program_provider_name character varying,
    program_provider_code character varying,
    special_ed_peer_percent character varying,
    special_ed_non_peer_percent character varying,
    reg_ed_percent character varying,
    primary_service_dwm_unit character varying,
    related_service_dwm_unit character varying,
    supp_service_dwm_unit character varying,
    prog_mod_dwm_unit character varying,
    ass_tech_dwm_unit character varying,
    supports_dwm_unit character varying,
    override_supp boolean,
    override_prog_mod boolean,
    override_ass_tech boolean,
    override_school_supp boolean,
    override_related boolean,
    primary_service_days_unit character varying,
    primary_service_days_value character varying,
    related_service_days_unit character varying,
    related_service_days_value character varying,
    supp_service_days_value character varying,
    supp_service_days_unit character varying,
    prog_service_days_value character varying,
    prog_service_days_unit character varying,
    ass_tech_days_unit character varying,
    ass_tech_days_value character varying,
    supports_days_unit character varying,
    supports_days_value character varying,
    version_number integer,
    transition_16_course_study character varying,
    absences_approved boolean,
    student_strengths_checkbox boolean,
    parental_concerns_checkbox boolean,
    results_evaluation_checkbox boolean,
    results_perf_checkbox boolean,
    behavioral_strategies_checkbox boolean,
    language_needs_checkbox boolean,
    braille_instruction_checkbox boolean,
    comm_needs_checkbox boolean,
    deaf_comm_needs_checkbox boolean,
    deaf_comm_opp_checkbox boolean,
    deaf_academic_lev_checkbox boolean,
    assistive_tech_checkbox boolean,
    transition_secgoals boolean
);


ALTER TABLE public.bu_fm04 OWNER TO postgres;

--
-- Name: bu_fm05; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm05 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_005 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    date_met date,
    describe_program character varying,
    describe_reason character varying,
    provide_description character varying,
    proposed_placement character varying,
    other_factors character varying,
    contact_name character varying,
    contact_num character varying,
    consent boolean,
    no_consent_reason character varying,
    consent_date date,
    signature_on_file boolean,
    dob date,
    grade text,
    id_case_mgr_old integer,
    version_number integer
);


ALTER TABLE public.bu_fm05 OWNER TO postgres;

--
-- Name: bu_fm06; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm06 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_006 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    describe_action character varying,
    describe_reason character varying,
    options_considered character varying,
    options_rejected character varying,
    decision_based character varying,
    other_factors character varying,
    contact_name character varying,
    contact_num character varying,
    dob date,
    grade text,
    id_case_mgr_old integer,
    proposition_reason character varying,
    proposition_option_accept character varying,
    version_number integer
);


ALTER TABLE public.bu_fm06 OWNER TO postgres;

--
-- Name: bu_fm07; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm07 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_007 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    explanation character varying,
    options character varying,
    reasons character varying,
    proposal character varying,
    other_factors character varying,
    amount_time character varying,
    academic character varying,
    intellectual character varying,
    perceptual character varying,
    social character varying,
    speech character varying,
    other character varying,
    contact_name character varying,
    contact_num character varying,
    consent boolean,
    no_consent_reason character varying,
    consent_date date,
    signature_on_file boolean,
    form_options text,
    dob date,
    grade text,
    id_case_mgr_old integer,
    version_number integer
);


ALTER TABLE public.bu_fm07 OWNER TO postgres;

--
-- Name: bu_fm08; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm08 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_008 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    date_met date,
    describe_changes character varying,
    reasons character varying,
    rejected character varying,
    change_based character varying,
    other_factors character varying,
    contact_name character varying,
    contact_num character varying,
    dob date,
    grade text,
    id_case_mgr_old integer,
    version_number integer
);


ALTER TABLE public.bu_fm08 OWNER TO postgres;

--
-- Name: bu_fm09; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm09 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_009 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    date_met date,
    describe_discontinue character varying,
    rejected_options character varying,
    basis character varying,
    other_factors character varying,
    contact_name character varying,
    contact_num character varying,
    dob date,
    grade text,
    sesis_exit_code smallint,
    id_case_mgr_old integer,
    id_sesis_snapshot integer,
    version_number integer
);


ALTER TABLE public.bu_fm09 OWNER TO postgres;

--
-- Name: bu_fm10; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm10 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_010 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    date_report date,
    pr_text1 character varying,
    pr_text2 character varying,
    pr_text3 character varying,
    dob date,
    grade text,
    id_case_mgr_old integer,
    id_form_004 integer,
    version_number integer
);


ALTER TABLE public.bu_fm10 OWNER TO postgres;

--
-- Name: bu_fm11; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm11 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_011 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    mdt_conf_date date,
    mdt_conf_time character varying,
    mdt_conf_loc character varying,
    general_ed character varying,
    special_ed character varying,
    school_rep character varying,
    other_attendees character varying,
    other_staff character varying,
    contact_name character varying,
    contact_num character varying,
    rights_contact character varying,
    rights_contact_num character varying,
    attend character varying,
    pg_invites character varying,
    parent_date_1 date,
    school_contact character varying,
    response_address character varying,
    city_state_zip character varying,
    school_phone character varying,
    date_sent date,
    signature_on_file boolean,
    dob date,
    grade text,
    no_signature_reason text,
    id_case_mgr_old integer,
    version_number integer
);


ALTER TABLE public.bu_fm11 OWNER TO postgres;

--
-- Name: bu_fm12; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm12 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_012 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    guardian_address character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    determination character varying,
    existing_evals character varying,
    pg_report character varying,
    classroom_performance character varying,
    actual_achievement character varying,
    performance_measurements character varying,
    staff_observations character varying,
    other_information character varying,
    contact_name character varying,
    contact_num character varying,
    date_sent date,
    agree character varying,
    parent_date_1 date,
    signature_on_file boolean,
    sender character varying,
    dob date,
    grade text,
    no_signature_reason text,
    id_case_mgr_old integer,
    version_number integer
);


ALTER TABLE public.bu_fm12 OWNER TO postgres;

--
-- Name: bu_fm13; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm13 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    name_county character varying,
    name_district character varying,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    id_form_013 integer,
    ifsptype character varying,
    interpreter boolean,
    family_lang character varying,
    sc_name character varying,
    sc_phone character varying,
    sc_address character varying,
    date_family_concerns date,
    family_concerns character varying,
    date_child_strengths date,
    child_strengths character varying,
    tran_con_date date,
    extimated_tran_date date,
    service_sp_conditions character varying,
    service_sp_conditions_yn boolean,
    service_justification character varying,
    parent_understand_content boolean,
    parent_understand_distribition boolean,
    parent_sig_1 character varying,
    parent_sig_1_on_file character varying,
    parent_sig_2 character varying,
    parent_sig_2_on_file character varying,
    parent_date_1 date,
    parent_date_2 date,
    parent_comments character varying,
    parent_sig_on_file_explain character varying,
    dev_vision_desc character varying,
    dev_vision_date date,
    dev_hearing_desc character varying,
    dev_hearing_date date,
    dev_health_status_desc character varying,
    dev_health_status_date date,
    dev_cognitive_desc character varying,
    dev_cognitive_date date,
    dev_communication_desc character varying,
    dev_communication_date date,
    dev_social_desc character varying,
    dev_social_date date,
    dev_self_help_desc character varying,
    dev_self_help_date date,
    dev_fine_motor_desc character varying,
    dev_fine_motor_date date,
    dev_gross_motor_desc character varying,
    dev_gross_motor_date date,
    meeting_date date,
    meeting_date_sent date,
    meeting_date_list character varying,
    meeting_date_sent_list character varying,
    date_mdt date,
    transition_plan boolean,
    transitioned boolean,
    dob date,
    grade character varying,
    eval_date date,
    id_case_mgr_old integer,
    family_lang_second character varying,
    ssn_form character varying,
    medicaid_form character varying,
    dev_vision_checkbox boolean,
    dev_hearing_checkbox boolean,
    dev_health_status_checkbox boolean,
    dev_cognitive_checkbox boolean,
    dev_communication_checkbox boolean,
    dev_social_checkbox boolean,
    dev_self_help_checkbox boolean,
    dev_fine_motor_checkbox boolean,
    dev_gross_motor_checkbox boolean,
    ifsptype_secondary_role character varying,
    version_number integer
);


ALTER TABLE public.bu_fm13 OWNER TO postgres;

--
-- Name: bu_fm14; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm14 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_014 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    notice_to character varying,
    address character varying,
    iep_meeting character varying,
    general_ed character varying,
    special_ed character varying,
    school_rep character varying,
    other_attendees character varying,
    other_staff character varying,
    contact_name character varying,
    contact_num character varying,
    rights_contact character varying,
    rights_contact_num character varying,
    attend boolean,
    schedule_meeting character varying,
    parent_date_1 date,
    school_contact character varying,
    response_address character varying,
    city_state_zip character varying,
    school_phone character varying,
    date_sent date,
    signature_on_file boolean,
    dob date,
    grade text,
    id_case_mgr_old integer,
    version_number integer
);


ALTER TABLE public.bu_fm14 OWNER TO postgres;

--
-- Name: bu_fm15; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm15 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_015 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    explanation character varying,
    options character varying,
    reasons character varying,
    proposal character varying,
    other_factors character varying,
    amount_time character varying,
    academic character varying,
    intellectual character varying,
    perceptual character varying,
    social character varying,
    speech character varying,
    other character varying,
    contact_name character varying,
    contact_num character varying,
    consent character varying,
    no_consent_reason character varying,
    consent_date date,
    signature_on_file boolean,
    form_options text,
    dob date,
    grade text,
    id_case_mgr_old integer,
    version_number integer
);


ALTER TABLE public.bu_fm15 OWNER TO postgres;

--
-- Name: bu_fm16; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm16 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_016 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    date_met date,
    describe_program character varying,
    describe_reason character varying,
    provide_description character varying,
    proposed_placement character varying,
    other_factors character varying,
    contact_name character varying,
    contact_num character varying,
    consent boolean,
    no_consent_reason character varying,
    consent_date date,
    signature_on_file boolean,
    dob date,
    grade text,
    id_case_mgr_old integer,
    version_number integer
);


ALTER TABLE public.bu_fm16 OWNER TO postgres;

--
-- Name: bu_fm17; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm17 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    name_county character varying,
    name_district character varying,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    dob date,
    grade character varying,
    id_form_017 integer,
    title character varying,
    dialog_text character varying,
    id_case_mgr_old integer,
    version_number integer
);


ALTER TABLE public.bu_fm17 OWNER TO postgres;

--
-- Name: bu_fm18; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_fm18 (
    id_form_018 integer,
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    title character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    name_county character varying,
    name_district character varying,
    name_school character varying,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    date_notice date,
    date_graduation date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    version_number integer,
    summary_of_performance character varying,
    school_district_contact character varying,
    school_district_contact_phone character varying,
    date_summary_performance date,
    name_summary_performance character varying,
    grade text,
    dob date,
    name_list_guardian text
);


ALTER TABLE public.bu_fm18 OWNER TO postgres;

--
-- Name: bu_guardian; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_guardian (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character(2),
    address_zip character varying,
    email_address character varying,
    id_guardian integer,
    id_student integer,
    name_first character varying,
    name_last character varying,
    name_middle character varying,
    relation_to_child character varying,
    xxxprimary_language character varying,
    phone_home character varying,
    phone_work character varying,
    status character varying,
    user_name character varying,
    "password" character varying,
    password_reset_flag boolean,
    date_last_pw_change timestamp with time zone,
    date_expiration date,
    checkout_id_user integer,
    checkout_time integer,
    online_access character varying,
    id_student_local integer,
    id_guardian_local integer,
    last_auto_update timestamp with time zone,
    last_login timestamp with time zone,
    data_source text
);


ALTER TABLE public.bu_guardian OWNER TO postgres;

--
-- Name: bu_log; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_log (
    id_author integer,
    timestamp_created timestamp with time zone,
    id_log integer,
    id_rel_record character varying,
    id_student integer,
    "type" smallint,
    table_name character varying,
    notes character varying,
    page smallint,
    id_guardian integer
);


ALTER TABLE public.bu_log OWNER TO postgres;

--
-- Name: bu_student_team; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bu_student_team (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    id_student_team integer,
    id_student integer,
    id_personnel integer,
    date_added timestamp with time zone,
    date_removed timestamp with time zone,
    status character varying,
    flag_view integer,
    flag_edit integer,
    flag_create integer,
    id_personnel_old integer,
    flag_ei_only integer
);


ALTER TABLE public.bu_student_team OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: delete_goal_backup_bug2465; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE delete_goal_backup_bug2465 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_004_goal integer,
    id_form_004 integer,
    id_student integer,
    measurable_ann_goal character varying,
    short_term_obj character varying,
    short_term_obj_comments character varying,
    stmt_of_progress character varying,
    schedule character varying,
    eval_procedure character varying,
    person_responsible character varying,
    progress_date1 date,
    progress_date2 date,
    progress_date3 date,
    progress_date4 date,
    progress_code1 character varying,
    progress_code2 character varying,
    progress_code3 character varying,
    progress_code4 character varying,
    progress_other1 character varying,
    progress_other2 character varying,
    progress_other3 character varying,
    progress_other4 character varying,
    progress_suff_date1 date,
    progress_suff_date2 date,
    progress_suff_date3 date,
    progress_suff_date4 date,
    progress_suff_code1 character varying,
    progress_suff_code2 character varying,
    progress_suff_code3 character varying,
    progress_suff_code4 character varying,
    schedule_other character varying,
    eval_procedure_other character varying,
    person_responsible_other character varying,
    progress_date5 date,
    progress_date6 date,
    bug2465_checked integer
);


ALTER TABLE public.delete_goal_backup_bug2465 OWNER TO postgres;

--
-- Name: deleted_forms; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE deleted_forms (
    id_deleted_forms serial NOT NULL,
    id_form integer,
    form_name character varying,
    form_keys character varying,
    form_data character varying,
    id_student integer,
    student_name character varying,
    date_created date,
    date_deleted date,
    status character varying DEFAULT 'deleted'::character varying,
    deleted_by integer
);


ALTER TABLE public.deleted_forms OWNER TO postgres;

--
-- Name: iep_personnel; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_personnel (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character(2),
    address_zip character varying,
    "class" smallint NOT NULL,
    email_address character varying,
    id_personnel integer DEFAULT nextval(('iep_personnel_id_personnel_seq'::text)::regclass) NOT NULL,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    name_first character varying NOT NULL,
    name_last character varying NOT NULL,
    name_middle character varying,
    phone_home character varying,
    phone_work character varying,
    access_list character varying,
    checkout_id_user integer,
    checkout_time integer,
    status character varying DEFAULT 'Inactive'::character varying,
    user_name character varying,
    "password" character varying,
    password_reset_flag boolean,
    date_last_pw_change timestamp with time zone DEFAULT "timestamp"('now'::text),
    date_expiration date,
    online_access character varying DEFAULT 'Disabled'::character varying,
    last_login timestamp with time zone,
    email_valid boolean,
    id_personnel_master integer,
    single_converted boolean,
    scrubflag character varying,
    survey_date_list character varying,
    email_bu character varying,
    team_count integer,
    case_mgr_count integer,
    update_flag integer,
    vere_ss_update boolean,
    agency character varying
);


ALTER TABLE public.iep_personnel OWNER TO postgres;

--
-- Name: demo_personnel; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW demo_personnel AS
    SELECT (((p.name_first)::text || (' '::character varying)::text) || (p.name_last)::text) AS name, p.user_name, p."password", p.id_district, sc.name_school, p.status, p."class" FROM iep_personnel p, iep_school sc WHERE ((p.id_county = '99'::bpchar) AND (p.id_school = sc.id_school));


ALTER TABLE public.demo_personnel OWNER TO postgres;

--
-- Name: demo_schools; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW demo_schools AS
    SELECT iep_school.id_county, iep_school.id_district, iep_school.id_school, iep_school.name_school FROM iep_school WHERE (iep_school.id_county = '99'::bpchar);


ALTER TABLE public.demo_schools OWNER TO postgres;

--
-- Name: demo_students; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW demo_students AS
    SELECT (((st.name_first)::text || (' '::character varying)::text) || (st.name_last)::text) AS name, st.id_student, sc.name_school FROM iep_student st, iep_school sc WHERE ((((sc.id_district = st.id_district) AND (sc.id_school = st.id_school)) AND (sc.id_county = st.id_county)) AND (st.id_county = '99'::bpchar));


ALTER TABLE public.demo_students OWNER TO postgres;

--
-- Name: dev_ri; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW dev_ri AS
    SELECT t.oid AS trigoid, c.relname AS trig_tbl, t.tgfoid, f.proname AS trigfunc, t.tgenabled, t.tgconstrname, c2.relname AS const_tbl, t.tgdeferrable, t.tginitdeferred FROM pg_trigger t, pg_class c, pg_class c2, pg_proc f WHERE ((((t.tgrelid = c.oid) AND (t.tgconstrrelid = c2.oid)) AND (t.tgfoid = f.oid)) AND (t.tgname ~ '^RI_'::text)) ORDER BY t.oid;


ALTER TABLE public.dev_ri OWNER TO postgres;

--
-- Name: dupe_student_backup_20060831; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE dupe_student_backup_20060831 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character varying,
    address_zip character varying,
    date_last_iep date,
    date_last_iep_update date,
    date_last_mdt date,
    dob date,
    email_address character varying,
    ethnic_group character(1),
    exit_code character varying,
    xxxgender character(1),
    grade character varying,
    id_case_mgr integer,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    phone character varying,
    primary_disability character varying,
    primary_language character varying,
    xxxprimary_language_family character varying,
    program_provider character varying,
    xxxstatus character(1),
    ward boolean,
    ward_surrogate boolean,
    ward_surrogate_nn boolean,
    ward_surrogate_other character varying,
    id_list_team character varying,
    id_list_guardian character varying,
    status character varying,
    gender character varying,
    checkout_id_user integer,
    checkout_time integer,
    date_web_notify date,
    id_student_local integer,
    change_type text,
    last_auto_update timestamp with time zone,
    transition_plan boolean,
    pub_school_student boolean,
    id_case_mgr_old integer,
    id_team_list_old text,
    data_source text,
    sesis_exit_code smallint,
    program_provider_name character varying,
    program_provider_code character varying,
    ssn character varying,
    medicaid character varying,
    ei_ref_date character varying,
    eval_date character varying,
    medicaid_off boolean,
    ssn_off boolean,
    id_ser_cord integer,
    id_ei_case_mgr integer,
    transitioned boolean,
    nonpubcounty character(2),
    nonpubdistrict character(4),
    nonpubschool character(3),
    vere_ss_update boolean,
    sesis_exit_date date,
    program_provider_id_school character varying,
    ell_student boolean,
    unique_id_state bigint,
    unique_id_state_duplicate bigint
);


ALTER TABLE public.dupe_student_backup_20060831 OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: error_log; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE error_log (
    id_error_log serial NOT NULL,
    status character varying DEFAULT 'Active'::character varying,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    error_code character varying,
    error_text character varying,
    id_county character varying,
    id_district character varying,
    id_school character varying,
    id_student character varying,
    id_form character varying,
    form_table character varying,
    form_key character varying
);


ALTER TABLE public.error_log OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: form_002_supplemental_form; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE form_002_supplemental_form (
    id_form_002_supplemental_form serial NOT NULL,
    id_student integer NOT NULL,
    status character varying DEFAULT 'Active'::character varying NOT NULL,
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_002 integer NOT NULL,
    title character varying,
    text character varying,
    sortnum integer
);


ALTER TABLE public.form_002_supplemental_form OWNER TO postgres;

--
-- Name: form_002_team_member; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE form_002_team_member (
    id_form_002_team_member serial NOT NULL,
    id_student integer,
    status character varying DEFAULT 'Active'::character varying,
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_form_002 integer NOT NULL,
    team_member_name character varying,
    team_member_position character varying,
    team_member_agree boolean,
    sortnum integer
);


ALTER TABLE public.form_002_team_member OWNER TO postgres;

--
-- Name: form_003_agency_representitive; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE form_003_agency_representitive (
    id_form_003_agency_representitive serial NOT NULL,
    id_form_003 integer,
    id_student integer,
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone,
    timestamp_last_mod timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone,
    representitive_name character varying,
    status character varying,
    consent_invite boolean,
    consent_release boolean,
    release_records_all boolean,
    release_records_scholastic_grades boolean,
    release_records_psychological_evaluations boolean,
    release_records_activity_records boolean,
    release_records_discipline_records boolean,
    release_records_health_records boolean,
    release_records_standardized_test_scores boolean,
    release_records_special_educational_records boolean,
    release_records_other boolean,
    release_records_other_description character varying
);


ALTER TABLE public.form_003_agency_representitive OWNER TO postgres;

--
-- Name: form_004_assist_tech_id_form_004_assist_tech_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE form_004_assist_tech_id_form_004_assist_tech_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.form_004_assist_tech_id_form_004_assist_tech_seq OWNER TO postgres;

--
-- Name: form_004_assist_tech; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE form_004_assist_tech (
    timestamp_created timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    id_form_004_assist_tech integer DEFAULT nextval('form_004_assist_tech_id_form_004_assist_tech_seq'::regclass) NOT NULL,
    id_form_004 integer,
    ass_tech character varying,
    assist_tech_from_date date,
    assist_tech_to_date date,
    assist_tech_location character varying,
    assist_tech_tpd character varying,
    assist_tech_tpd_unit character varying,
    assist_tech_days_value character varying,
    assist_tech_days_unit character varying,
    assist_tech_mpy character varying,
    assist_tech_calendar character varying,
    status character varying DEFAULT 'Active'::character varying,
    id_author integer DEFAULT 0,
    id_author_last_mod integer DEFAULT 0,
    id_student integer
);


ALTER TABLE public.form_004_assist_tech OWNER TO postgres;

--
-- Name: form_004_prog_mods_id_form_004_prog_mods_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE form_004_prog_mods_id_form_004_prog_mods_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.form_004_prog_mods_id_form_004_prog_mods_seq OWNER TO postgres;

--
-- Name: form_004_prog_mods; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE form_004_prog_mods (
    timestamp_created timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    id_form_004_prog_mods integer DEFAULT nextval('form_004_prog_mods_id_form_004_prog_mods_seq'::regclass) NOT NULL,
    id_form_004 integer,
    prog_mod character varying,
    prog_mod_from_date date,
    prog_mod_to_date date,
    prog_mod_location character varying,
    prog_mod_tpd character varying,
    prog_mod_tpd_unit character varying,
    prog_mod_days_value character varying,
    prog_mod_days_unit character varying,
    prog_mod_mpy character varying,
    prog_mod_calendar character varying,
    status character varying DEFAULT 'Active'::character varying,
    id_author integer DEFAULT 0,
    id_author_last_mod integer DEFAULT 0,
    id_student integer
);


ALTER TABLE public.form_004_prog_mods OWNER TO postgres;

--
-- Name: form_004_related_service_id_form_004_related_service_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE form_004_related_service_id_form_004_related_service_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.form_004_related_service_id_form_004_related_service_seq OWNER TO postgres;

--
-- Name: form_004_related_service; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE form_004_related_service (
    timestamp_created timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    id_form_004_related_service integer DEFAULT nextval('form_004_related_service_id_form_004_related_service_seq'::regclass) NOT NULL,
    id_form_004 integer,
    related_service_drop character varying,
    related_service character varying,
    related_service_location character varying,
    related_service_tpd character varying,
    related_service_tpd_unit character varying,
    related_service_dpw character varying,
    related_service_mpy character varying,
    related_service_calendar character varying,
    related_service_from_date date,
    related_service_to_date date,
    related_service_days_value character varying,
    related_service_days_unit character varying,
    status character varying DEFAULT 'Active'::character varying,
    id_author integer DEFAULT 0,
    id_author_last_mod integer DEFAULT 0,
    id_student integer
);


ALTER TABLE public.form_004_related_service OWNER TO postgres;

--
-- Name: form_004_school_supp_id_form_004_school_supp_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE form_004_school_supp_id_form_004_school_supp_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.form_004_school_supp_id_form_004_school_supp_seq OWNER TO postgres;

--
-- Name: form_004_school_supp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE form_004_school_supp (
    timestamp_created timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    id_form_004_school_supp integer DEFAULT nextval('form_004_school_supp_id_form_004_school_supp_seq'::regclass) NOT NULL,
    id_form_004 integer,
    supports character varying,
    school_supp_from_date date,
    school_supp_to_date date,
    school_supp_location character varying,
    school_supp_tpd character varying,
    school_supp_tpd_unit character varying,
    school_supp_days_value character varying,
    school_supp_days_unit character varying,
    school_supp_mpy character varying,
    school_supp_calendar character varying,
    status character varying DEFAULT 'Active'::character varying,
    id_author integer DEFAULT 0,
    id_author_last_mod integer DEFAULT 0,
    id_student integer
);


ALTER TABLE public.form_004_school_supp OWNER TO postgres;

--
-- Name: form_004_supp_service_id_form_004_supp_service_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE form_004_supp_service_id_form_004_supp_service_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.form_004_supp_service_id_form_004_supp_service_seq OWNER TO postgres;

--
-- Name: form_004_supp_service; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE form_004_supp_service (
    timestamp_created timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    id_form_004_supp_service integer DEFAULT nextval('form_004_supp_service_id_form_004_supp_service_seq'::regclass) NOT NULL,
    id_form_004 integer,
    supp_service character varying,
    supp_service_from_date date,
    supp_service_to_date date,
    supp_service_location character varying,
    supp_service_tpd character varying,
    supp_service_tpd_unit character varying,
    supp_service_days_value character varying,
    supp_service_days_unit character varying,
    supp_service_mpy character varying,
    supp_service_calendar character varying,
    status character varying DEFAULT 'Active'::character varying,
    id_author integer DEFAULT 0,
    id_author_last_mod integer DEFAULT 0,
    id_student integer
);


ALTER TABLE public.form_004_supp_service OWNER TO postgres;

--
-- Name: iep_form_004_goal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_004_goal (
    id_author integer NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_004_goal integer DEFAULT nextval(('iep_form_004_goal_seq'::text)::regclass) NOT NULL,
    id_form_004 integer NOT NULL,
    id_student integer NOT NULL,
    measurable_ann_goal character varying,
    short_term_obj character varying,
    short_term_obj_comments character varying,
    stmt_of_progress character varying,
    schedule character varying,
    eval_procedure character varying,
    person_responsible character varying,
    progress_date1 date,
    progress_date2 date,
    progress_date3 date,
    progress_date4 date,
    progress_code1 character varying,
    progress_code2 character varying,
    progress_code3 character varying,
    progress_code4 character varying,
    progress_other1 character varying,
    progress_other2 character varying,
    progress_other3 character varying,
    progress_other4 character varying,
    progress_suff_date1 date,
    progress_suff_date2 date,
    progress_suff_date3 date,
    progress_suff_date4 date,
    progress_suff_code1 character varying,
    progress_suff_code2 character varying,
    progress_suff_code3 character varying,
    progress_suff_code4 character varying,
    schedule_other character varying,
    eval_procedure_other character varying,
    person_responsible_other character varying,
    progress_date5 date,
    progress_date6 date,
    bug2465_checked integer,
    bug2465_checkedreal integer,
    savetype character varying,
    original_iep_id integer,
    alternate_assessments character varying
);


ALTER TABLE public.iep_form_004_goal OWNER TO postgres;

--
-- Name: iep_form_004_goal_progress; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_004_goal_progress (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_goal_progress integer DEFAULT nextval(('"iep_form_004__id_goal_progr_seq"'::text)::regclass) NOT NULL,
    id_form_004_goal integer NOT NULL,
    id_form_010 integer NOT NULL,
    id_form_004 integer NOT NULL,
    id_student integer NOT NULL,
    progress_measurement character varying,
    progress_sufficient boolean,
    progress_comment character varying,
    frequency character varying,
    schedule character varying,
    progress_measurement_explain character varying,
    progress_chart_id integer
);


ALTER TABLE public.iep_form_004_goal_progress OWNER TO postgres;

--
-- Name: goal_progress; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW goal_progress AS
    SELECT goal.short_term_obj, goal.measurable_ann_goal, goal.schedule, goal.eval_procedure, goal.id_student, progress.id_form_004_goal, progress.id_form_010, progress.progress_measurement, progress.progress_sufficient, progress.progress_comment, progress.id_goal_progress, progress.progress_measurement_explain FROM iep_form_004_goal goal, iep_form_004_goal_progress progress WHERE (goal.id_form_004_goal = progress.id_form_004_goal) ORDER BY progress.id_form_004_goal;


ALTER TABLE public.goal_progress OWNER TO postgres;

--
-- Name: iep_guardian; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_guardian (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character(2),
    address_zip character varying,
    email_address character varying,
    id_guardian integer DEFAULT nextval(('iep_guardian_id_guardian_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    name_first character varying NOT NULL,
    name_last character varying NOT NULL,
    name_middle character varying,
    relation_to_child character varying DEFAULT 'Parent'::character varying NOT NULL,
    xxxprimary_language character varying DEFAULT 'd'::character varying NOT NULL,
    phone_home character varying,
    phone_work character varying,
    status character varying DEFAULT 'Active'::character varying,
    user_name character varying,
    "password" character varying,
    password_reset_flag boolean DEFAULT true,
    date_last_pw_change timestamp with time zone DEFAULT "timestamp"('now'::text),
    date_expiration date,
    checkout_id_user integer,
    checkout_time integer,
    online_access character varying DEFAULT 'Enabled'::character varying,
    id_student_local integer,
    id_guardian_local integer,
    last_auto_update timestamp with time zone,
    last_login timestamp with time zone,
    data_source text
);


ALTER TABLE public.iep_guardian OWNER TO postgres;

--
-- Name: guardian_data_check; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW guardian_data_check AS
    SELECT (SELECT count(*) AS count FROM iep_guardian WHERE (iep_guardian.user_name IS NULL)) AS null_g_user_name, (SELECT count(*) AS count FROM iep_guardian WHERE (iep_guardian."password" IS NULL)) AS null_g_pw, (SELECT count(*) AS count FROM iep_guardian WHERE (iep_guardian.id_student IS NULL)) AS null_g_id_student;


ALTER TABLE public.guardian_data_check OWNER TO postgres;

--
-- Name: helper_student_team; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE helper_student_team (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    id_student_team integer,
    id_student integer,
    id_personnel integer,
    date_added timestamp with time zone,
    date_removed timestamp with time zone,
    status character varying,
    flag_view integer,
    flag_edit integer,
    flag_create integer,
    id_personnel_old integer,
    flag_ei_only integer
);


ALTER TABLE public.helper_student_team OWNER TO postgres;

--
-- Name: id_form_004_supp_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE id_form_004_supp_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.id_form_004_supp_seq OWNER TO postgres;

--
-- Name: iep_absence; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_absence (
    id_iep_absence serial NOT NULL,
    id_form_003 integer,
    id_student integer,
    timestamp_created timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone,
    timestamp_last_mod timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone,
    absence_name character varying,
    absence_role character varying,
    absence_role_other character varying,
    area_of_curriculum character varying,
    id_author integer,
    id_author_last_mod integer,
    status character varying,
    doc_signed_parent boolean,
    date_doc_signed_parent date,
    no_sig_explanation character varying,
    display_team_member_input boolean,
    input_information character varying
);


ALTER TABLE public.iep_absence OWNER TO postgres;

--
-- Name: iep_accom_checklist; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_accom_checklist (
    id_author integer,
    id_author_last_mod integer,
    checkout_id_user integer,
    checkout_time integer,
    id_accom_checklist serial NOT NULL,
    id_form_004 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    ass_adapt_worksheet character varying,
    ass_allow_copying character varying,
    ass_allo_use_resource character varying,
    ass_avoide_penalizing character varying,
    ass_give_directions character varying,
    ass_give_oral_cues character varying,
    ass_lower_diff_level character varying,
    ass_other character varying,
    ass_provide_alternate character varying,
    ass_provide_oral_directions character varying,
    ass_read_directions character varying,
    ass_record_assignment character varying,
    ass_redo_for_grade character varying,
    ass_reduce_paper_tasks character varying,
    ass_shorten_assign character varying,
    env_alter_physical_room character varying,
    env_avoid_distr character varying,
    env_define_areas character varying,
    env_increase_distance character varying,
    env_other character varying,
    env_planned_seating character varying,
    env_pref_seating character varying,
    env_reduce_distractions character varying,
    env_seat_near_role character varying,
    env_seat_near_teacher character varying,
    env_teach_pos_rules character varying,
    grade_attendance character varying,
    grade_commensurate_effort character varying,
    grade_graded_on_skills character varying,
    grade_modified_grading character varying,
    grade_oral_presentation character varying,
    grade_other character varying,
    grade_pass_fail character varying,
    grade_regular_grading character varying,
    lessson_emph_info character varying,
    lessson_functional_app character varying,
    lessson_make_use_voc character varying,
    lessson_oral_intrepreter character varying,
    lessson_other character varying,
    lessson_present_demo character varying,
    lessson_preteach_voc character varying,
    lessson_reduce_lang character varying,
    lessson_sign_lang character varying,
    lessson_sm_grp_inst character varying,
    lessson_spec_curr character varying,
    lessson_tape_lectures character varying,
    lessson_teacher_emph character varying,
    lessson_teacher_provides character varying,
    lessson_total_comm character varying,
    lessson_utilize_manip character varying,
    lessson_visual_sequences character varying,
    mat_arrangement character varying,
    mat_enlarge_notes character varying,
    mat_highlighted_texts character varying,
    mat_large_print character varying,
    mat_note_taking character varying,
    mat_other character varying,
    mat_special_equip character varying,
    mat_taped_texts character varying,
    mat_type_handwritten character varying,
    mat_use_supp_mats character varying,
    mot_allow_movement character varying,
    mot_concrete_reinforcement character varying,
    mot_increase_rewards character varying,
    mot_nonverbal character varying,
    mot_offer_choice character varying,
    mot_other character varying,
    mot_positive_reinforcement character varying,
    mot_use_contracts character varying,
    mot_use_strengths_often character varying,
    mot_verbal character varying,
    pacing_allow_breaks character varying,
    pacing_extended_time character varying,
    pacing_omit_assignments character varying,
    pacing_other character varying,
    pacing_school_texts character varying,
    pacing_vary_activity character varying,
    self_man_assignment_book character varying,
    self_man_behavior_manage character varying,
    self_man_con_reinforcement character varying,
    self_man_daily_schedule character varying,
    self_man_long_term_assign character varying,
    self_man_other character varying,
    self_man_peer_tutoring character varying,
    self_man_plan_general character varying,
    self_man_pos_reinforcement character varying,
    self_man_redo_assignment character varying,
    self_man_repeated_review character varying,
    self_man_repeat_directions character varying,
    self_man_req_par_reinforcement character varying,
    self_man_study_sheets character varying,
    self_man_teach_skill_sev character varying,
    self_man_teach_study_skills character varying,
    self_man_understand_review character varying,
    self_man_voc_files character varying,
    soc_coop_learning_groups character varying,
    soc_multiple_peers character varying,
    soc_other character varying,
    soc_peer_advocacy character varying,
    soc_perr_tutoring character varying,
    soc_shared_experience character varying,
    soc_social_process character varying,
    soc_structure_activities character varying,
    soc_teach_friendship character varying,
    soc_teach_social_com character varying,
    testing_allow_students character varying,
    testing_app_settings character varying,
    testing_check_understand character varying,
    testing_circle_items character varying,
    testing_color_coded character varying,
    testing_correct_test character varying,
    testing_divide_test character varying,
    testing_extended_time character varying,
    testing_flash_cards character varying,
    testing_mod_format character varying,
    testing_mult_choice character varying,
    testing_oral character varying,
    testing_other character varying,
    testing_para_test character varying,
    testing_prev_lang character varying,
    testing_provide_reminders character varying,
    testing_provide_study character varying,
    testing_provide_visual character varying,
    testing_read_test character varying,
    testing_reteach_material character varying,
    testing_retest_options character varying,
    testing_shorten_length character varying,
    testing_short_ans character varying,
    testing_sign_directions character varying,
    testing_sign_test character varying,
    testing_taped character varying,
    testing_test_admin character varying,
    testing_use_more_objective character varying,
    testing_word_bank character varying,
    writing_allow_computer character varying,
    writing_allow_flow_chart character varying,
    writing_dictate_ideas character varying,
    writing_grade_content character varying,
    writing_other character varying,
    writing_provide_structure character varying,
    writing_shorten_assignment character varying,
    writing_use_tape_recorder character varying,
    writing_visual_rep_ideas character varying,
    other character varying,
    env_comp_tech_work character varying,
    ass_provide_electronic character varying,
    testing_utilize_writing_sys character varying,
    asstech_supp_writ_device character varying,
    asstech_pro_writ_sw character varying,
    asstech_speech_gen character varying,
    asstech_aug_options character varying,
    asstech_enlarged_print character varying,
    asstech_braille character varying,
    asstech_aud_trainer character varying,
    asstech_other character varying,
    asstech_physical_access character varying,
    asstech_other_text character varying,
    flag_subject_areas_entered boolean,
    status character varying DEFAULT 'Active'::character varying,
    hide character varying
);


ALTER TABLE public.iep_accom_checklist OWNER TO postgres;

--
-- Name: iep_county; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_county (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_county character(2) NOT NULL,
    name_county character varying NOT NULL,
    status character varying DEFAULT 'Active'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer
);


ALTER TABLE public.iep_county OWNER TO postgres;

--
-- Name: iep_district; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_district (
    id_author integer NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    name_district character varying NOT NULL,
    status character varying DEFAULT 'Inactive'::character varying,
    id_district_mgr integer,
    id_account_sprv integer,
    checkout_id_user integer,
    checkout_time integer,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character(2),
    address_zip character varying,
    phone_main character varying,
    logo_flag boolean DEFAULT false,
    add_resource1 character varying DEFAULT 'Nebraska Parent Training Center: 800-284-8520 or 402-346-0525'::character varying,
    add_resource2 character varying DEFAULT 'Nebraska Advocacy Services: 800-422-6091 or 402-474-3183'::character varying,
    sch_yr_start_mth integer,
    sch_yr_start_day integer,
    sch_yr_end_month integer,
    sch_yr_end_day integer,
    dev_delay_cutoff_age integer,
    use_goal_helper boolean,
    use_form_011 boolean,
    use_form_012 boolean,
    optional_features boolean,
    approving_mgr_id character varying,
    id_district_mgr_old integer,
    id_account_sprv_old integer,
    use_sesis_snapshot boolean,
    assurance_stmt boolean,
    pref_district_imports boolean,
    district_import_code character varying,
    use_accomodations_checklist boolean,
    sesis_email character varying,
    sesis_send_tonight character varying,
    imagefile character varying,
    print_header character varying,
    use_iep_benchmarks boolean,
    fedrep_email character varying,
    fedrep_send_tonight character varying,
    use_form_019 boolean,
    use_form_020 boolean,
    use_form_021 boolean,
    report_nssrs_time_to_run character varying,
    use_nssrs boolean,
    email_nssrs character varying,
    nssrs_send_tonight character varying,
    district_import_code_sept character varying,
    jesse_temp character varying,
    use_nssrs_overview boolean
);


ALTER TABLE public.iep_district OWNER TO postgres;

--
-- Name: iep_district_list; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW iep_district_list AS
    SELECT c.id_county, c.name_county, d.id_district, d.name_district, d.status, (((p1.name_first)::text || (' '::character varying)::text) || (p1.name_last)::text) AS district_mgr, (((p2.name_first)::text || (' '::character varying)::text) || (p2.name_last)::text) AS acct_sprvsr FROM iep_county c, iep_district d, iep_personnel p1, iep_personnel p2 WHERE (((c.id_county = d.id_county) AND (d.id_district_mgr = p1.id_personnel)) AND (d.id_account_sprv = p2.id_personnel)) UNION SELECT c.id_county, c.name_county, d.id_district, d.name_district, d.status, NULL::"unknown" AS district_mgr, NULL::"unknown" AS acct_sprvsr FROM iep_county c, iep_district d WHERE ((c.id_county = d.id_county) AND (NOT (EXISTS (SELECT 1 FROM iep_personnel p WHERE ((d.id_district_mgr = p.id_personnel) OR (d.id_account_sprv = p.id_personnel))))));


ALTER TABLE public.iep_district_list OWNER TO postgres;

--
-- Name: iep_district_report_date; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_district_report_date (
    id_district_report_date serial NOT NULL,
    date_report1 date,
    date_report2 date,
    date_report3 date,
    date_report4 date,
    date_report5 date,
    date_report6 date,
    year_identifier integer,
    id_county character(2),
    id_district character(4),
    id_author integer,
    id_author_last_mod integer
);


ALTER TABLE public.iep_district_report_date OWNER TO postgres;

--
-- Name: iep_extracurriculars_saved; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_extracurriculars_saved (
    id_form_004 integer,
    extracurricular_nonacademic character varying
);


ALTER TABLE public.iep_extracurriculars_saved OWNER TO postgres;

--
-- Name: iep_form_001; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_001 (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_001 integer DEFAULT nextval(('iep_form_001_id_form_001_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    name_district character varying,
    id_school character(3) NOT NULL,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying DEFAULT '8/01'::character varying,
    page_status character varying(10),
    explanation character varying,
    options character varying,
    reasons character varying,
    proposal character varying,
    other_factors character varying,
    amount_time character varying,
    academic character varying,
    intellectual character varying,
    perceptual character varying,
    social character varying,
    speech character varying,
    other character varying,
    contact_name character varying,
    contact_num character varying,
    consent character varying,
    no_consent_reason character varying,
    consent_date date,
    signature_on_file boolean,
    form_options text,
    dob date,
    grade text,
    id_case_mgr_old integer,
    version_number integer,
    date_district_received date,
    utf8header boolean,
    academic_required boolean,
    intellectual_required boolean,
    perceptual_required boolean,
    social_required boolean,
    speech_required boolean,
    other_required boolean,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer,
    rejected_reasons character varying
);


ALTER TABLE public.iep_form_001 OWNER TO postgres;

--
-- Name: iep_form_001_id_form_001_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_001_id_form_001_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_001_id_form_001_seq OWNER TO postgres;

--
-- Name: iep_form_002; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_002 (
    id_author integer NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_002 integer DEFAULT nextval(('iep_form_002_id_form_002_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    name_district character varying,
    id_school character(3) NOT NULL,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying DEFAULT '8/01'::character varying,
    page_status character varying(10),
    date_mdt date,
    mdt_00602b1a boolean,
    mdt_00602b1b character(1),
    mdt_00602b1b_text character varying,
    mdt_00602b2 boolean,
    mdt_00602b3 boolean,
    mdt_00602b3a boolean,
    mdt_00602b3b boolean,
    mdt_00602b4 boolean,
    mdt_00602b4_text character varying,
    mdt_00602b4a boolean,
    mdt_00602b4b boolean,
    mdt_00602b4b_text character varying,
    mdt_00602b5 boolean,
    mdt_00602b6 boolean,
    mdt_00602b7 boolean,
    mdt_00602b8 boolean,
    mdt_00602b9 boolean,
    mdt_00602b10 boolean,
    mdt_00602b11 boolean,
    mdt_00602c1 boolean,
    mdt_00602c2 boolean,
    mdt_00603c boolean,
    mdt_00603g_contact character varying,
    mdt_00603e2b character varying,
    mdt_00603f2 character varying,
    mdt_00603f2d character varying,
    mdt_00603f2e character varying,
    mdt_00603f2f boolean,
    mdt_00603f2f_correctable boolean,
    mdt_00603f2g character varying,
    date_provided date,
    name_provided_by character varying,
    team_member_name character varying,
    team_member_position character varying,
    team_member_agree character varying,
    mdt_00603e2a character varying,
    mdt_00603f2a character varying,
    mdt_00603f2a_sli character varying,
    mdt_00603f2a_vi character varying,
    mdt_00603g date,
    disability_au boolean,
    disability_bd boolean,
    disability_db boolean,
    disability_hi boolean,
    disability_mhmi boolean,
    disability_mhmo boolean,
    disability_mhsp boolean,
    disability_multi boolean,
    disability_oi boolean,
    disability_ohi boolean,
    disability_sld boolean,
    disability_sli_language boolean,
    disability_sli_articulation boolean,
    disability_sli_voice boolean,
    disability_sli_fluency boolean,
    disability_vi character varying,
    disability_dd boolean,
    disability_tbi boolean,
    disability_primary character varying,
    dob date,
    grade text,
    id_case_mgr_old integer,
    initial_verification boolean,
    sesisdisability_bl boolean,
    sesisdisability_dl boolean,
    sesisdisability_none boolean,
    initial_verification_date date,
    disability_vi_checkbox boolean,
    notused_bool2 boolean,
    disability_hi_detail character varying,
    bug_3023 character varying,
    bug2085_manually_updated_verification_date boolean,
    version_number integer,
    mdt_00602b1c boolean,
    initial_verification_date_sesis date,
    never_verified boolean,
    educationalneeds_ddview boolean,
    educationalneeds_text character varying,
    educationalneeds_cognitive_dev character varying,
    educationalneeds_fine_dev character varying,
    educationalneeds_lang_dev character varying,
    educationalneeds_social_dev character varying,
    educationalneeds_self_help_skills character varying,
    utf8header boolean,
    backup_mh character varying,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_002 OWNER TO postgres;

--
-- Name: iep_form_002_id_form_002_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_002_id_form_002_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_002_id_form_002_seq OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: iep_form_002_issues; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_002_issues (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_002 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    date_mdt date,
    mdt_00602b1a boolean,
    mdt_00602b1b character(1),
    mdt_00602b1b_text character varying,
    mdt_00602b2 boolean,
    mdt_00602b3 boolean,
    mdt_00602b3a boolean,
    mdt_00602b3b boolean,
    mdt_00602b4 boolean,
    mdt_00602b4_text character varying,
    mdt_00602b4a boolean,
    mdt_00602b4b boolean,
    mdt_00602b4b_text character varying,
    mdt_00602b5 boolean,
    mdt_00602b6 boolean,
    mdt_00602b7 boolean,
    mdt_00602b8 boolean,
    mdt_00602b9 boolean,
    mdt_00602b10 boolean,
    mdt_00602b11 boolean,
    mdt_00602c1 boolean,
    mdt_00602c2 boolean,
    mdt_00603c boolean,
    mdt_00603g_contact character varying,
    mdt_00603e2b character varying,
    mdt_00603f2 character varying,
    mdt_00603f2d character varying,
    mdt_00603f2e character varying,
    mdt_00603f2f boolean,
    mdt_00603f2f_correctable boolean,
    mdt_00603f2g character varying,
    date_provided date,
    name_provided_by character varying,
    team_member_name character varying,
    team_member_position character varying,
    team_member_agree character varying,
    mdt_00603e2a character varying,
    mdt_00603f2a character varying,
    mdt_00603f2a_sli character varying,
    mdt_00603f2a_vi character varying,
    mdt_00603g date,
    disability_au boolean,
    disability_bd boolean,
    disability_db boolean,
    disability_hi boolean,
    disability_mhmi boolean,
    disability_mhmo boolean,
    disability_mhsp boolean,
    disability_multi boolean,
    disability_oi boolean,
    disability_ohi boolean,
    disability_sld boolean,
    disability_sli_language boolean,
    disability_sli_articulation boolean,
    disability_sli_voice boolean,
    disability_sli_fluency boolean,
    disability_vi character varying,
    disability_dd boolean,
    disability_tbi boolean,
    disability_primary character varying,
    dob date,
    grade text,
    id_case_mgr_old integer,
    initial_verification boolean,
    sesisdisability_bl boolean,
    sesisdisability_dl boolean,
    sesisdisability_none boolean,
    initial_verification_date date,
    disability_vi_checkbox boolean,
    notused_bool2 boolean,
    disability_hi_detail character varying,
    bug_3023 character varying,
    bug2085_manually_updated_verification_date boolean,
    version_number integer,
    mdt_00602b1c boolean,
    initial_verification_date_sesis date,
    never_verified boolean,
    educationalneeds_ddview boolean,
    educationalneeds_text character varying,
    educationalneeds_cognitive_dev character varying,
    educationalneeds_fine_dev character varying,
    educationalneeds_lang_dev character varying,
    educationalneeds_social_dev character varying,
    educationalneeds_self_help_skills character varying,
    utf8header boolean,
    backup_mh character varying
);


ALTER TABLE public.iep_form_002_issues OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: iep_form_003; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_003 (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_003 integer DEFAULT nextval(('iep_form_003_id_form_003_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    name_district character varying,
    id_school character(3) NOT NULL,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying DEFAULT '8/01'::character varying,
    page_status character varying(10),
    notice_to character varying,
    address character varying,
    iep_meeting character varying,
    general_ed character varying,
    special_ed character varying,
    school_rep character varying,
    other_attendees character varying,
    other_staff character varying,
    contact_name character varying,
    contact_num character varying,
    rights_contact character varying,
    rights_contact_num character varying,
    attend boolean,
    schedule_meeting character varying,
    parent_date_1 date,
    school_contact character varying,
    response_address character varying,
    city_state_zip character varying,
    school_phone character varying,
    date_sent date,
    signature_on_file boolean,
    dob date,
    grade text,
    id_case_mgr_old integer,
    version_number integer,
    on_off_checkbox boolean,
    utf8header boolean,
    on_off_checkbox_page_4 boolean,
    consent_give boolean,
    consent_deny boolean,
    p4_signature_on_file boolean,
    p4_parent_date_1 date,
    p4_signature_on_file_other character varying,
    consent_deny_records boolean,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer,
    voluntary_consent boolean
);


ALTER TABLE public.iep_form_003 OWNER TO postgres;

--
-- Name: iep_form_003_id_form_003_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_003_id_form_003_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_003_id_form_003_seq OWNER TO postgres;

--
-- Name: iep_form_004; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_004 (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_004 integer DEFAULT nextval(('iep_form_004_id_form_004_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    name_district character varying,
    id_school character(3) NOT NULL,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_conference date,
    form_document_root character varying,
    form_version character varying DEFAULT '8/01'::character varying,
    page_status character varying(10),
    address character varying,
    date_last_mdt date,
    dob date,
    grade character varying,
    percent_sewre smallint,
    percent_senwre smallint,
    percent_re smallint,
    phone character varying,
    primary_disability character varying,
    primary_service_from date,
    primary_service_to date,
    primary_service_calendar boolean,
    primary_service_location character varying,
    primary_service_tpd_unit character varying,
    primary_service_tpd character varying,
    primary_service_dpw character varying,
    primary_service_mpy character varying,
    present_lev_perf character varying,
    student_strengths character varying,
    parental_concerns character varying,
    results_evaluation character varying,
    results_perf character varying,
    behavioral_strategies character varying,
    language_needs character varying,
    braille_instruction character varying,
    comm_needs character varying,
    deaf_comm_needs character varying,
    deaf_comm_opp character varying,
    deaf_academic_lev character varying,
    assistive_tech character varying,
    participant_names character varying,
    participant_dates character varying,
    doc_signed_parent boolean,
    date_doc_signed_parent date,
    necessary_action boolean,
    received_copy boolean,
    transition_14_stmt character varying,
    transition_16_instruction character varying,
    transition_16_rel_services character varying,
    transition_16_comm_exp character varying,
    transition_16_emp_options character varying,
    transition_16_dly_liv_skills character varying,
    transition_16_func_voc_eval character varying,
    transition_16_inter_agency_link character varying,
    transition_activity1 character varying,
    transition_activity2 character varying,
    transition_activity3 character varying,
    transition_agency1 character varying,
    transition_agency2 character varying,
    transition_agency3 character varying,
    transition_date1 date,
    transition_date2 date,
    transition_date3 date,
    transportation_yn character varying,
    transportation_why character varying,
    transportation_desc character varying,
    assessment_accom character varying,
    assessment_alt character varying,
    ext_school_year_desc character varying,
    assessment_desc character varying,
    ext_school_year_yn boolean,
    related_service character varying,
    related_service_from_date character varying,
    related_service_to_date character varying,
    related_service_location character varying,
    related_service_tpd character varying,
    related_service_tpd_unit character varying,
    related_service_dpw character varying,
    related_service_mpy character varying,
    related_service_calendar character varying,
    supp_service character varying,
    supp_service_from_date character varying,
    supp_service_to_date character varying,
    supp_service_location character varying,
    supp_service_tpd character varying,
    supp_service_tpd_unit character varying,
    supp_service_dpw character varying,
    supp_service_mpy character varying,
    supp_service_calendar character varying,
    prog_mod character varying,
    prog_mod_from_date character varying,
    prog_mod_to_date character varying,
    prog_mod_location character varying,
    prog_mod_tpd character varying,
    prog_mod_tpd_unit character varying,
    prog_mod_dpw character varying,
    prog_mod_mpy character varying,
    prog_mod_calendar character varying,
    ass_tech character varying,
    ass_tech_from_date character varying,
    ass_tech_to_date character varying,
    ass_tech_location character varying,
    ass_tech_tpd character varying,
    ass_tech_tpd_unit character varying,
    ass_tech_dpw character varying,
    ass_tech_mpy character varying,
    ass_tech_calendar character varying,
    supports character varying,
    supports_from_date character varying,
    supports_to_date character varying,
    supports_location character varying,
    supports_tpd character varying,
    supports_tpd_unit character varying,
    supports_dpw character varying,
    supports_mpy character varying,
    supports_calendar character varying,
    row_count_rs smallint,
    row_count_sa smallint,
    row_count_ma smallint,
    row_count_at smallint,
    row_count_sp smallint,
    primary_service_dpm character varying,
    related_service_dpm character varying,
    supp_service_dpm character varying,
    prog_mod_dpm character varying,
    ass_tech_dpm character varying,
    supports_dpm character varying,
    extracurricular_nonacademic character varying,
    primary_service_location_other character varying,
    related_service_location_other character varying,
    supp_service_location_other character varying,
    prog_mod_location_other character varying,
    ass_tech_location_other character varying,
    supports_location_other character varying,
    lps_sig_understand_process boolean,
    lps_sig_agree boolean,
    lps_sig_no_agree_reason character varying,
    lps_sig_understand_purpose boolean,
    lps_sig_understand_covers boolean,
    lps_sig_understand_receive boolean,
    lps_sig_received_rights boolean,
    lps_sig_participated boolean,
    transition_plan boolean DEFAULT false,
    primary_disability_drop text,
    primary_disability_drop_other text,
    related_service_drop text,
    participant_type_par character varying,
    participant_other_par character varying,
    participant_names_par character varying,
    participant_names_dis character varying,
    participant_type_dis character varying,
    participant_other_dis character varying,
    participant_dates_dis character varying,
    participant_dates_par character varying,
    row_count_par smallint,
    row_count_dis smallint,
    no_sig_explanation character varying,
    mdt_primary_disability character varying,
    id_case_mgr_old integer,
    program_provider character varying,
    program_provider_name character varying,
    program_provider_code character varying,
    special_ed_peer_percent character varying,
    special_ed_non_peer_percent character varying,
    reg_ed_percent character varying,
    primary_service_dwm_unit character varying,
    related_service_dwm_unit character varying,
    supp_service_dwm_unit character varying,
    prog_mod_dwm_unit character varying,
    ass_tech_dwm_unit character varying,
    supports_dwm_unit character varying,
    override_supp boolean,
    override_prog_mod boolean,
    override_ass_tech boolean,
    override_school_supp boolean,
    override_related boolean,
    primary_service_days_unit character varying,
    primary_service_days_value character varying,
    related_service_days_unit character varying,
    related_service_days_value character varying,
    supp_service_days_value character varying,
    supp_service_days_unit character varying,
    prog_service_days_value character varying,
    prog_service_days_unit character varying,
    ass_tech_days_unit character varying,
    ass_tech_days_value character varying,
    supports_days_unit character varying,
    supports_days_value character varying,
    version_number integer,
    transition_16_course_study character varying,
    absences_approved boolean,
    student_strengths_checkbox boolean,
    parental_concerns_checkbox boolean,
    results_evaluation_checkbox boolean,
    results_perf_checkbox boolean,
    behavioral_strategies_checkbox boolean,
    language_needs_checkbox boolean,
    braille_instruction_checkbox boolean,
    comm_needs_checkbox boolean,
    deaf_comm_needs_checkbox boolean,
    deaf_comm_opp_checkbox boolean,
    deaf_academic_lev_checkbox boolean,
    assistive_tech_checkbox boolean,
    transition_secgoals boolean,
    utf8header boolean,
    related_service_with_peers_tpd character varying,
    related_service_with_peers_tpd_unit character varying,
    related_service_with_peers_days_value character varying,
    related_service_with_peers_days_unit character varying,
    supp_service_with_peers_tpd character varying,
    supp_service_with_peers_tpd_unit character varying,
    supp_service_with_peers_days_value character varying,
    supp_service_with_peers_days_unit character varying,
    prog_mod_with_peers_tpd character varying,
    prog_mod_with_peers_tpd_unit character varying,
    prog_mod_with_peers_days_value character varying,
    prog_mod_with_peers_days_unit character varying,
    ass_tech_with_peers_tpd character varying,
    ass_tech_with_peers_tpd_unit character varying,
    ass_tech_with_peers_days_value character varying,
    ass_tech_with_peers_days_unit character varying,
    supports_with_peers_tpd character varying,
    supports_with_peers_tpd_unit character varying,
    supports_with_peers_days_value character varying,
    supports_with_peers_days_unit character varying,
    fape_consent boolean,
    pg6_doc_signed_parent boolean,
    pg6_no_sig_explanation character varying,
    pg6_date_doc_signed_parent date,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer,
    effect_from_date date,
    effect_to_date date,
    code_4_conversion integer,
    pdf_filepath_present_lev_perf character varying
);


ALTER TABLE public.iep_form_004 OWNER TO postgres;

--
-- Name: iep_form_004__id_form_004_g_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_004__id_form_004_g_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_004__id_form_004_g_seq OWNER TO postgres;

--
-- Name: iep_form_004__id_goal_progr_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_004__id_goal_progr_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_004__id_goal_progr_seq OWNER TO postgres;

--
-- Name: iep_form_004_goal_orphaned; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_004_goal_orphaned (
    id_form_004 integer
);


ALTER TABLE public.iep_form_004_goal_orphaned OWNER TO postgres;

--
-- Name: iep_form_004_goal_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_004_goal_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_004_goal_seq OWNER TO postgres;

--
-- Name: iep_form_004_id_form_004_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_004_id_form_004_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_004_id_form_004_seq OWNER TO postgres;

--
-- Name: iep_form_004_secondary_goal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_004_secondary_goal (
    id_form_004_secondary_goal serial NOT NULL,
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_student integer,
    id_form_004 integer,
    status character varying,
    post_secondary character varying
);


ALTER TABLE public.iep_form_004_secondary_goal OWNER TO postgres;

--
-- Name: iep_form_004_supp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_004_supp (
    id_author integer NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_004_supp integer DEFAULT nextval(('id_form_004_supp_seq'::text)::regclass) NOT NULL,
    id_form_004 integer NOT NULL,
    id_student integer NOT NULL,
    title character varying,
    text_content character varying,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    form_name character varying,
    page_status character varying,
    mdt boolean,
    import_flag boolean,
    newlines_to_br boolean
);


ALTER TABLE public.iep_form_004_supp OWNER TO postgres;

--
-- Name: iep_form_004_supplemental_for_id_form_004_supplemental_form_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_004_supplemental_for_id_form_004_supplemental_form_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_004_supplemental_for_id_form_004_supplemental_form_seq OWNER TO postgres;

--
-- Name: iep_form_004_supplemental_form; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_004_supplemental_form (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    status character varying DEFAULT 'Active'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_004_supplemental_form integer DEFAULT nextval('iep_form_004_supplemental_for_id_form_004_supplemental_form_seq'::regclass) NOT NULL,
    id_form_004 integer NOT NULL,
    id_student integer NOT NULL,
    title character varying,
    text character varying
);


ALTER TABLE public.iep_form_004_supplemental_form OWNER TO postgres;

--
-- Name: iep_form_005; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_005 (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_005 integer DEFAULT nextval(('iep_form_005_id_form_005_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    name_district character varying,
    id_school character(3) NOT NULL,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying DEFAULT '8/01'::character varying,
    page_status character varying(10),
    date_met date,
    describe_program character varying,
    describe_reason character varying,
    provide_description character varying,
    proposed_placement character varying,
    other_factors character varying,
    contact_name character varying,
    contact_num character varying,
    consent boolean,
    no_consent_reason character varying,
    consent_date date,
    signature_on_file boolean,
    dob date,
    grade text,
    id_case_mgr_old integer,
    version_number integer,
    utf8header boolean,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_005 OWNER TO postgres;

--
-- Name: iep_form_005_id_form_005_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_005_id_form_005_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_005_id_form_005_seq OWNER TO postgres;

--
-- Name: iep_form_006; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_006 (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_006 integer DEFAULT nextval(('iep_form_006_id_form_006_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    name_district character varying,
    id_school character(3) NOT NULL,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying DEFAULT '8/01'::character varying,
    page_status character varying(10),
    describe_action character varying,
    describe_reason character varying,
    options_considered character varying,
    options_rejected character varying,
    decision_based character varying,
    other_factors character varying,
    contact_name character varying,
    contact_num character varying,
    dob date,
    grade text,
    id_case_mgr_old integer,
    proposition_reason character varying,
    proposition_option_accept character varying,
    version_number integer,
    utf8header boolean,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_006 OWNER TO postgres;

--
-- Name: iep_form_006_id_form_006_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_006_id_form_006_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_006_id_form_006_seq OWNER TO postgres;

--
-- Name: iep_form_007; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_007 (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_007 integer DEFAULT nextval(('iep_form_007_id_form_007_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    name_district character varying,
    id_school character(3) NOT NULL,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying DEFAULT '8/01'::character varying,
    page_status character varying(10),
    explanation character varying,
    options character varying,
    reasons character varying,
    proposal character varying,
    other_factors character varying,
    amount_time character varying,
    academic character varying,
    intellectual character varying,
    perceptual character varying,
    social character varying,
    speech character varying,
    other character varying,
    contact_name character varying,
    contact_num character varying,
    consent boolean,
    no_consent_reason character varying,
    consent_date date,
    signature_on_file boolean,
    form_options text,
    dob date,
    grade text,
    id_case_mgr_old integer,
    version_number integer,
    date_district_received date,
    utf8header boolean,
    academic_required boolean,
    intellectual_required boolean,
    perceptual_required boolean,
    social_required boolean,
    speech_required boolean,
    other_required boolean,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_007 OWNER TO postgres;

--
-- Name: iep_form_007_id_form_007_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_007_id_form_007_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_007_id_form_007_seq OWNER TO postgres;

--
-- Name: iep_form_008; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_008 (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_008 integer DEFAULT nextval(('iep_form_008_id_form_008_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    name_district character varying,
    id_school character(3) NOT NULL,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying DEFAULT '8/01'::character varying,
    page_status character varying(10),
    date_met date,
    describe_changes character varying,
    reasons character varying,
    rejected character varying,
    change_based character varying,
    other_factors character varying,
    contact_name character varying,
    contact_num character varying,
    dob date,
    grade text,
    id_case_mgr_old integer,
    version_number integer,
    utf8header boolean,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_008 OWNER TO postgres;

--
-- Name: iep_form_008_id_form_008_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_008_id_form_008_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_008_id_form_008_seq OWNER TO postgres;

--
-- Name: iep_form_009; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_009 (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_009 integer DEFAULT nextval(('iep_form_009_id_form_009_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    name_district character varying,
    id_school character(3) NOT NULL,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying DEFAULT '8/01'::character varying,
    page_status character varying(10),
    date_met date,
    describe_discontinue character varying,
    rejected_options character varying,
    basis character varying,
    other_factors character varying,
    contact_name character varying,
    contact_num character varying,
    dob date,
    grade text,
    sesis_exit_code smallint,
    id_case_mgr_old integer,
    id_sesis_snapshot integer,
    version_number integer,
    utf8header boolean,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_009 OWNER TO postgres;

--
-- Name: iep_form_009_id_form_009_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_009_id_form_009_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_009_id_form_009_seq OWNER TO postgres;

--
-- Name: iep_form_010; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_010 (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_010 integer DEFAULT nextval(('iep_progress__id_progress_r_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    name_district character varying,
    id_school character(3) NOT NULL,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying DEFAULT '8/01'::character varying,
    page_status character varying(10),
    date_report date,
    pr_text1 character varying,
    pr_text2 character varying,
    pr_text3 character varying,
    dob date,
    grade text,
    id_case_mgr_old integer,
    id_form_004 integer,
    version_number integer,
    utf8header boolean DEFAULT true,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_010 OWNER TO postgres;

--
-- Name: iep_form_011; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_011 (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_011 integer DEFAULT nextval(('iep_form_011_id_form_011_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    name_district character varying,
    id_school character(3) NOT NULL,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying DEFAULT '07/02'::character varying,
    page_status character varying(10),
    mdt_conf_date date,
    mdt_conf_time character varying,
    mdt_conf_loc character varying,
    general_ed character varying,
    special_ed character varying,
    school_rep character varying,
    other_attendees character varying,
    other_staff character varying,
    contact_name character varying,
    contact_num character varying,
    rights_contact character varying,
    rights_contact_num character varying,
    attend character varying,
    pg_invites character varying,
    parent_date_1 date,
    school_contact character varying,
    response_address character varying,
    city_state_zip character varying,
    school_phone character varying,
    date_sent date,
    signature_on_file boolean,
    dob date,
    grade text,
    no_signature_reason text,
    id_case_mgr_old integer,
    version_number integer,
    utf8header boolean,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_011 OWNER TO postgres;

--
-- Name: iep_form_011_id_form_011_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_011_id_form_011_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_011_id_form_011_seq OWNER TO postgres;

--
-- Name: iep_form_012; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_012 (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_012 integer DEFAULT nextval(('iep_form_012_id_form_012_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    name_district character varying,
    id_school character(3) NOT NULL,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    guardian_address character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying DEFAULT '07/02'::character varying,
    page_status character varying(10),
    determination character varying,
    existing_evals character varying,
    pg_report character varying,
    classroom_performance character varying,
    actual_achievement character varying,
    performance_measurements character varying,
    staff_observations character varying,
    other_information character varying,
    contact_name character varying,
    contact_num character varying,
    date_sent date,
    agree character varying,
    parent_date_1 date,
    signature_on_file boolean,
    sender character varying,
    dob date,
    grade text,
    no_signature_reason text,
    id_case_mgr_old integer,
    version_number integer,
    utf8header boolean,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_012 OWNER TO postgres;

--
-- Name: iep_form_012_id_form_012_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_012_id_form_012_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_012_id_form_012_seq OWNER TO postgres;

--
-- Name: iep_form_013_id_form_013_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_013_id_form_013_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_013_id_form_013_seq OWNER TO postgres;

--
-- Name: iep_form_014; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_014 (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_014 integer DEFAULT nextval(('iep_form_014_id_form_014_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    name_district character varying,
    id_school character(3) NOT NULL,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying DEFAULT '8/01'::character varying,
    page_status character varying(10),
    notice_to character varying,
    address character varying,
    iep_meeting character varying,
    general_ed character varying,
    special_ed character varying,
    school_rep character varying,
    other_attendees character varying,
    other_staff character varying,
    contact_name character varying,
    contact_num character varying,
    rights_contact character varying,
    rights_contact_num character varying,
    attend boolean,
    schedule_meeting character varying,
    parent_date_1 date,
    school_contact character varying,
    response_address character varying,
    city_state_zip character varying,
    school_phone character varying,
    date_sent date,
    signature_on_file boolean,
    dob date,
    grade text,
    id_case_mgr_old integer,
    version_number integer,
    utf8header boolean,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_014 OWNER TO postgres;

--
-- Name: iep_form_014_id_form_014_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_014_id_form_014_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_014_id_form_014_seq OWNER TO postgres;

--
-- Name: iep_form_015; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_015 (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_015 integer DEFAULT nextval(('iep_form_015_id_form_015_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    name_district character varying,
    id_school character(3) NOT NULL,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying DEFAULT '8/01'::character varying,
    page_status character varying(10),
    explanation character varying,
    options character varying,
    reasons character varying,
    proposal character varying,
    other_factors character varying,
    amount_time character varying,
    academic character varying,
    intellectual character varying,
    perceptual character varying,
    social character varying,
    speech character varying,
    other character varying,
    contact_name character varying,
    contact_num character varying,
    consent character varying,
    no_consent_reason character varying,
    consent_date date,
    signature_on_file boolean,
    form_options text,
    dob date,
    grade text,
    id_case_mgr_old integer,
    version_number integer,
    utf8header boolean,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer,
    days integer
);


ALTER TABLE public.iep_form_015 OWNER TO postgres;

--
-- Name: iep_form_015_id_form_015_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_015_id_form_015_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_015_id_form_015_seq OWNER TO postgres;

--
-- Name: iep_form_016; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_016 (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form_016 integer DEFAULT nextval(('iep_form_016_id_form_016_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2) NOT NULL,
    id_district character(4) NOT NULL,
    name_district character varying,
    id_school character(3) NOT NULL,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying DEFAULT '8/01'::character varying,
    page_status character varying(10),
    date_met date,
    describe_program character varying,
    describe_reason character varying,
    provide_description character varying,
    proposed_placement character varying,
    other_factors character varying,
    contact_name character varying,
    contact_num character varying,
    consent boolean,
    no_consent_reason character varying,
    consent_date date,
    signature_on_file boolean,
    dob date,
    grade text,
    id_case_mgr_old integer,
    version_number integer,
    utf8header boolean,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_016 OWNER TO postgres;

--
-- Name: iep_form_016_id_form_016_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_016_id_form_016_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_016_id_form_016_seq OWNER TO postgres;

--
-- Name: master_form; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE master_form (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_form integer DEFAULT nextval(('"master_form_id_form_seq"'::text)::regclass) NOT NULL,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    name_county character varying,
    name_district character varying,
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_notice date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    dob date,
    grade character varying
);


ALTER TABLE public.master_form OWNER TO postgres;

--
-- Name: iep_form_017; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_017 (
    id_form_017 integer DEFAULT nextval(('"iep_form_017_id_form_017_seq"'::text)::regclass) NOT NULL,
    title character varying,
    dialog_text character varying,
    id_case_mgr_old integer,
    version_number integer,
    utf8header boolean,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
)
INHERITS (master_form);


ALTER TABLE public.iep_form_017 OWNER TO postgres;

--
-- Name: iep_form_017_id_form_017_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_form_017_id_form_017_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_form_017_id_form_017_seq OWNER TO postgres;

--
-- Name: iep_form_018; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_018 (
    id_form_018 serial NOT NULL,
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    title character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    name_county character varying,
    name_district character varying,
    name_school character varying,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    date_notice date,
    date_graduation date,
    form_document_root character varying,
    form_version character varying DEFAULT '5/07'::character varying,
    page_status character varying(10),
    version_number integer,
    summary_of_performance character varying,
    school_district_contact character varying,
    school_district_contact_phone character varying,
    date_summary_performance date,
    name_summary_performance character varying,
    grade text,
    dob date,
    name_list_guardian text,
    utf8header boolean,
    id_case_mgr_old integer,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_018 OWNER TO postgres;

--
-- Name: iep_form_018_agency; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_018_agency (
    id_form_018_agency serial NOT NULL,
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_student integer,
    id_form_018 integer,
    status character varying,
    agency character varying,
    status_of_referral character varying,
    status_other character varying,
    name_or_position character varying,
    phone character varying,
    email character varying,
    remember boolean
);


ALTER TABLE public.iep_form_018_agency OWNER TO postgres;

--
-- Name: iep_form_018_goal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_018_goal (
    id_form_018_goal serial NOT NULL,
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_student integer,
    id_form_018 integer,
    status character varying,
    post_secondary character varying,
    related_activity character varying,
    recommendation character varying
);


ALTER TABLE public.iep_form_018_goal OWNER TO postgres;

--
-- Name: iep_form_018_supp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_018_supp (
    id_form_018_supp serial NOT NULL,
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_student integer,
    id_form_018 integer,
    title character varying,
    text_content character varying,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    form_name character varying,
    page_status character varying,
    mdt boolean,
    import_flag boolean,
    status character varying DEFAULT 'Draft'::character varying
);


ALTER TABLE public.iep_form_018_supp OWNER TO postgres;

--
-- Name: iep_form_018_team_member; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_018_team_member (
    id_form_018_team_member serial NOT NULL,
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_student integer,
    id_form_018 integer,
    status character varying,
    name_or_position character varying,
    phone character varying,
    email character varying,
    remember boolean
);


ALTER TABLE public.iep_form_018_team_member OWNER TO postgres;

--
-- Name: iep_form_019; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_019 (
    id_form_019 serial NOT NULL,
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    title character varying,
    date_notice date,
    page_status character varying,
    grade_at_finalize character varying,
    name_student_full_at_finalize character varying,
    name_district_at_finalize character varying,
    name_school_at_finalize character varying,
    name_list_guardian_at_finalize character varying,
    phone_at_finalize character varying,
    age_at_finalize character varying,
    gender character varying,
    address_at_finalize character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    name_county character varying,
    name_district character varying,
    name_school character varying,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    fa_desc_of_problem character varying,
    fa_baseline_info character varying,
    fa_specific_antecedents character varying,
    fa_current_consequences character varying,
    fa_function_of_the_problem character varying,
    fa_appropriate_alternative character varying,
    bi_behavioral_goal character varying,
    bi_behaviors character varying,
    bi_list_data character varying,
    bi_behavior_management character varying,
    bi_skill_building character varying,
    bi_modifications character varying,
    bi_alternative_discipline character varying,
    bi_crisis_intervention character varying,
    bi_responsibilities character varying,
    per_resp_informing_parties character varying,
    per_resp_monitoring_progress character varying,
    per_resp_modifying_materials character varying,
    per_resp_other character varying,
    bi_alternative_discipline_reason character varying,
    bi_crisis_intervention_reason character varying,
    form_version character varying,
    version_number integer,
    utf8header boolean,
    id_case_mgr_old integer,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_019 OWNER TO postgres;

--
-- Name: iep_form_020; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_020 (
    id_form_020 serial NOT NULL,
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    title character varying,
    date_notice date,
    page_status character varying,
    grade_at_finalize character varying,
    name_student_full_at_finalize character varying,
    name_district_at_finalize character varying,
    name_school_at_finalize character varying,
    name_list_guardian_at_finalize character varying,
    phone_at_finalize character varying,
    age_at_finalize character varying,
    gender character varying,
    address_at_finalize character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    name_county character varying,
    name_district character varying,
    name_school character varying,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    bip_weight character varying,
    bip_height character varying,
    st_contact_1 character varying,
    st_name_1 character varying,
    st_phone_home_1 character varying,
    st_phone_work_1 character varying,
    st_contact_2 character varying,
    st_name_2 character varying,
    st_phone_home_2 character varying,
    st_phone_work_2 character varying,
    pu_add1_name character varying,
    pu_add1_address character varying,
    pu_add1_phone character varying,
    pu_add2_name character varying,
    pu_add2_address character varying,
    pu_add2_phone character varying,
    spec_transportation character varying,
    med_side_effect character varying,
    med_allergies character varying,
    med_physician character varying,
    parental_sig character varying,
    office_use_spec_transportation character varying,
    office_use_based_on character varying,
    ssr_wheel_chair_lift character varying,
    ssr_nurse_aid character varying,
    srs_safety_restraint character varying,
    ssr_child_seat character varying,
    handi_specific_learning boolean,
    handi_behavior_disorder boolean,
    handi_mild_mental_dis boolean,
    handi_mod_mental_dis boolean,
    handi_sev_mental_dis boolean,
    handi_speech_imp boolean,
    handi_autism boolean,
    handi_hearing_imp boolean,
    handi_orth_imp boolean,
    handi_visual_dis boolean,
    handi_deaf_blind boolean,
    handi_multihandi boolean,
    handi_tram_brain boolean,
    handi_other_hearing boolean,
    handi_dev_dis boolean,
    handi_other boolean,
    attending_school character varying,
    preschool_program character varying,
    form_version character varying,
    version_number integer,
    utf8header boolean,
    id_case_mgr_old integer,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_020 OWNER TO postgres;

--
-- Name: iep_form_021; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_021 (
    id_form_021 serial NOT NULL,
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    title character varying,
    date_notice date,
    page_status character varying,
    grade_at_finalize character varying,
    name_student_full_at_finalize character varying,
    name_district_at_finalize character varying,
    name_school_at_finalize character varying,
    name_list_guardian_at_finalize character varying,
    phone_at_finalize character varying,
    age_at_finalize character varying,
    gender character varying,
    address_at_finalize character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    name_county character varying,
    name_district character varying,
    name_school character varying,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    wl_pencil boolean,
    wl_adapted_paper boolean,
    wl_slantboard boolean,
    wl_word_cards boolean,
    wl_pocket_dict boolean,
    wl_electronic_dict boolean,
    wl_use_class_computer boolean,
    wl_talk_word_process boolean,
    wl_wp_spell_check boolean,
    wl_wp_grammar_check boolean,
    wl_portable_wp boolean,
    wl_laptop_computer boolean,
    wl_word_predict boolean,
    wl_easy_access boolean,
    wl_keyguard boolean,
    wl_arm_support boolean,
    wl_tracball boolean,
    wl_alternate_keyboard boolean,
    wl_onscreen_keyboard boolean,
    wl_mouth_stick boolean,
    wl_switch_input boolean,
    wl_morse_code boolean,
    wl_scanning_sw boolean,
    wl_name_stamp boolean,
    wl_other boolean,
    com_dict boolean,
    com_obj_symbols boolean,
    com_graphic_symbol boolean,
    com_picture_symbol boolean,
    com_behavior_cue_cards boolean,
    com_books_boards boolean,
    com_voice_output boolean,
    com_eye_gaze_board boolean,
    com_laptop_computer boolean,
    com_other boolean,
    aca_low_tech boolean,
    aca_abacus boolean,
    aca_standard_calc boolean,
    aca_large_key_calc boolean,
    aca_adapted_book boolean,
    aca_book_holder boolean,
    aca_talking_electronic boolean,
    aca_taped_text boolean,
    aca_voice_output boolean,
    aca_sw_pict_text boolean,
    aca_scanner_talking_sw boolean,
    aca_electronic_book boolean,
    aca_talking_calc boolean,
    aca_adapted_aca_sw boolean,
    aca_tactile_measuring boolean,
    aca_electronic_research boolean,
    aca_other boolean,
    rec_adapted_toys boolean,
    rec_adapted_sport_eq boolean,
    rec_switch_ordered_toys boolean,
    rec_app_relay boolean,
    rec_adapted_sw boolean,
    rec_universal_cuff boolean,
    rec_adapted_scissors boolean,
    rec_env_control_unit boolean,
    rec_other boolean,
    otpt_adapted_eating boolean,
    otpt_adapted_dressing boolean,
    otpt_walker boolean,
    otpt_grab_rails boolean,
    otpt_adapted_toilet boolean,
    otpt_adapted_class boolean,
    otpt_position_eq boolean,
    otpt_wheelchair boolean,
    otpt_other boolean,
    vis_magnigier boolean,
    vis_large_print boolean,
    vis_adapted_computer boolean,
    vis_cctv boolean,
    vis_braille_keyboard boolean,
    vis_braille_sw boolean,
    vis_braille_printer boolean,
    vis_other boolean,
    hear_amplification boolean,
    hear_auditory_trainer boolean,
    hear_captioning boolean,
    hear_signaling boolean,
    hear_tdd_tty boolean,
    hear_other boolean,
    nothing_recommended boolean,
    other_assistave_technologies character varying,
    version_number integer,
    utf8header boolean,
    id_case_mgr_old integer,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_021 OWNER TO postgres;

--
-- Name: iep_form_022; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_022 (
    id_form_022 serial NOT NULL,
    id_author integer DEFAULT 0,
    id_author_last_mod integer DEFAULT 0,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    title character varying,
    date_mdt date,
    date_notice date,
    page_status character varying,
    grade_at_finalize character varying,
    name_student_full_at_finalize character varying,
    name_district_at_finalize character varying,
    name_school_at_finalize character varying,
    name_list_guardian_at_finalize character varying,
    phone_at_finalize character varying,
    age_at_finalize character varying,
    gender character varying,
    address_at_finalize character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    name_county character varying,
    name_district character varying,
    name_school character varying,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    disability_primary character varying,
    initial_verification_date date,
    version_number integer,
    form_version character varying,
    utf8header boolean,
    id_case_mgr_old integer,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_022 OWNER TO postgres;

--
-- Name: iep_form_023; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_023 (
    id_form_023 serial NOT NULL,
    id_author integer DEFAULT 0,
    id_author_last_mod integer DEFAULT 0,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    title character varying,
    date_conference date,
    date_notice date,
    page_status character varying,
    grade_at_finalize character varying,
    name_student_full_at_finalize character varying,
    name_district_at_finalize character varying,
    name_school_at_finalize character varying,
    name_list_guardian_at_finalize character varying,
    phone_at_finalize character varying,
    age_at_finalize character varying,
    gender character varying,
    address_at_finalize character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    name_county character varying,
    name_district character varying,
    name_school character varying,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    special_ed_non_peer_percent character varying,
    service_where character varying,
    primary_service_location character varying,
    version_number integer,
    special_education_service character varying,
    service_ot boolean,
    service_pt boolean,
    service_slt boolean,
    service_none boolean,
    utf8header boolean,
    student_age_override character varying,
    id_case_mgr_old integer,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_023 OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: iep_form_024; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_024 (
    id_form_024 serial NOT NULL,
    id_author integer DEFAULT 0,
    id_author_last_mod integer DEFAULT 0,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    status character varying DEFAULT 'Draft'::character varying NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    title character varying,
    date_conference date,
    date_notice date,
    page_status character varying,
    grade_at_finalize character varying,
    name_student_full_at_finalize character varying,
    name_district_at_finalize character varying,
    name_school_at_finalize character varying,
    name_list_guardian_at_finalize character varying,
    phone_at_finalize character varying,
    age_at_finalize character varying,
    gender character varying,
    address_at_finalize character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    id_student integer NOT NULL,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    name_county character varying,
    name_district character varying,
    name_school character varying,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    version_number integer,
    parent_names character varying,
    iep_date date,
    options_considered character varying,
    return_contact character varying,
    return_address character varying,
    return_city_st_zip character varying,
    district_contact character varying,
    district_contact_name_title character varying,
    district_contact_phone character varying,
    give_consent boolean,
    do_not_give_consent boolean,
    consent_receiver character varying,
    zend_checkout_time timestamp without time zone,
    zend_checkout_user integer
);


ALTER TABLE public.iep_form_024 OWNER TO postgres;

--
-- Name: iep_form_024_consent; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_024_consent (
    id_form_024_consent serial NOT NULL,
    id_form_024 integer NOT NULL,
    id_author integer DEFAULT 0,
    id_author_last_mod integer DEFAULT 0,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    subformnum integer,
    give_consent boolean,
    do_not_give_consent boolean,
    consent_receiver character varying,
    sig_on_file boolean,
    sig_date timestamp with time zone,
    consent_all_records boolean,
    consent_scholastic boolean,
    consent_psychological boolean,
    consent_activity boolean,
    consent_discipline boolean,
    consent_health boolean,
    consent_standard_tests boolean,
    consent_special_ed boolean,
    consent_other boolean,
    consent_other_comment character varying,
    consent_all_of_the_above boolean,
    consent_none_of_the_above boolean
);


ALTER TABLE public.iep_form_024_consent OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: iep_form_newdupes; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_form_newdupes (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    status character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_form_004 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    id_county character(2),
    id_district character(4),
    name_district character varying,
    id_school character(3),
    name_school character varying,
    id_case_mgr integer,
    name_case_mgr character varying,
    name_list_guardian character varying,
    date_conference date,
    form_document_root character varying,
    form_version character varying,
    page_status character varying(10),
    address character varying,
    date_last_mdt date,
    dob date,
    grade character varying,
    percent_sewre smallint,
    percent_senwre smallint,
    percent_re smallint,
    phone character varying,
    primary_disability character varying,
    primary_service_from date,
    primary_service_to date,
    primary_service_calendar boolean,
    primary_service_location character varying,
    primary_service_tpd_unit character varying,
    primary_service_tpd character varying,
    primary_service_dpw character varying,
    primary_service_mpy character varying,
    present_lev_perf character varying,
    student_strengths character varying,
    parental_concerns character varying,
    results_evaluation character varying,
    results_perf character varying,
    behavioral_strategies character varying,
    language_needs character varying,
    braille_instruction character varying,
    comm_needs character varying,
    deaf_comm_needs character varying,
    deaf_comm_opp character varying,
    deaf_academic_lev character varying,
    assistive_tech character varying,
    participant_names character varying,
    participant_dates character varying,
    doc_signed_parent boolean,
    date_doc_signed_parent date,
    necessary_action boolean,
    received_copy boolean,
    transition_14_stmt character varying,
    transition_16_instruction character varying,
    transition_16_rel_services character varying,
    transition_16_comm_exp character varying,
    transition_16_emp_options character varying,
    transition_16_dly_liv_skills character varying,
    transition_16_func_voc_eval character varying,
    transition_16_inter_agency_link character varying,
    transition_activity1 character varying,
    transition_activity2 character varying,
    transition_activity3 character varying,
    transition_agency1 character varying,
    transition_agency2 character varying,
    transition_agency3 character varying,
    transition_date1 date,
    transition_date2 date,
    transition_date3 date,
    transportation_yn character varying,
    transportation_why character varying,
    transportation_desc character varying,
    assessment_accom character varying,
    assessment_alt character varying,
    ext_school_year_desc character varying,
    assessment_desc character varying,
    ext_school_year_yn boolean,
    related_service character varying,
    related_service_from_date character varying,
    related_service_to_date character varying,
    related_service_location character varying,
    related_service_tpd character varying,
    related_service_tpd_unit character varying,
    related_service_dpw character varying,
    related_service_mpy character varying,
    related_service_calendar character varying,
    supp_service character varying,
    supp_service_from_date character varying,
    supp_service_to_date character varying,
    supp_service_location character varying,
    supp_service_tpd character varying,
    supp_service_tpd_unit character varying,
    supp_service_dpw character varying,
    supp_service_mpy character varying,
    supp_service_calendar character varying,
    prog_mod character varying,
    prog_mod_from_date character varying,
    prog_mod_to_date character varying,
    prog_mod_location character varying,
    prog_mod_tpd character varying,
    prog_mod_tpd_unit character varying,
    prog_mod_dpw character varying,
    prog_mod_mpy character varying,
    prog_mod_calendar character varying,
    ass_tech character varying,
    ass_tech_from_date character varying,
    ass_tech_to_date character varying,
    ass_tech_location character varying,
    ass_tech_tpd character varying,
    ass_tech_tpd_unit character varying,
    ass_tech_dpw character varying,
    ass_tech_mpy character varying,
    ass_tech_calendar character varying,
    supports character varying,
    supports_from_date character varying,
    supports_to_date character varying,
    supports_location character varying,
    supports_tpd character varying,
    supports_tpd_unit character varying,
    supports_dpw character varying,
    supports_mpy character varying,
    supports_calendar character varying,
    row_count_rs smallint,
    row_count_sa smallint,
    row_count_ma smallint,
    row_count_at smallint,
    row_count_sp smallint,
    primary_service_dpm character varying,
    related_service_dpm character varying,
    supp_service_dpm character varying,
    prog_mod_dpm character varying,
    ass_tech_dpm character varying,
    supports_dpm character varying,
    extracurricular_nonacademic character varying,
    primary_service_location_other character varying,
    related_service_location_other character varying,
    supp_service_location_other character varying,
    prog_mod_location_other character varying,
    ass_tech_location_other character varying,
    supports_location_other character varying,
    lps_sig_understand_process boolean,
    lps_sig_agree boolean,
    lps_sig_no_agree_reason character varying,
    lps_sig_understand_purpose boolean,
    lps_sig_understand_covers boolean,
    lps_sig_understand_receive boolean,
    lps_sig_received_rights boolean,
    lps_sig_participated boolean,
    transition_plan boolean,
    primary_disability_drop text,
    primary_disability_drop_other text,
    related_service_drop text,
    participant_type_par character varying,
    participant_other_par character varying,
    participant_names_par character varying,
    participant_names_dis character varying,
    participant_type_dis character varying,
    participant_other_dis character varying,
    participant_dates_dis character varying,
    participant_dates_par character varying,
    row_count_par smallint,
    row_count_dis smallint,
    no_sig_explanation character varying,
    mdt_primary_disability character varying,
    id_case_mgr_old integer,
    program_provider character varying,
    program_provider_name character varying,
    program_provider_code character varying,
    special_ed_peer_percent character varying,
    special_ed_non_peer_percent character varying,
    reg_ed_percent character varying,
    primary_service_dwm_unit character varying,
    related_service_dwm_unit character varying,
    supp_service_dwm_unit character varying,
    prog_mod_dwm_unit character varying,
    ass_tech_dwm_unit character varying,
    supports_dwm_unit character varying,
    override_supp boolean,
    override_prog_mod boolean,
    override_ass_tech boolean,
    override_school_supp boolean,
    override_related boolean,
    primary_service_days_unit character varying,
    primary_service_days_value character varying,
    related_service_days_unit character varying,
    related_service_days_value character varying,
    supp_service_days_value character varying,
    supp_service_days_unit character varying,
    prog_service_days_value character varying,
    prog_service_days_unit character varying,
    ass_tech_days_unit character varying,
    ass_tech_days_value character varying,
    supports_days_unit character varying,
    supports_days_value character varying
);


ALTER TABLE public.iep_form_newdupes OWNER TO postgres;

--
-- Name: iep_goal_condition; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_goal_condition (
    "domain" character varying,
    condition_code character varying,
    condition_text character varying,
    condition_code_backup character varying,
    id_goal_condition serial NOT NULL
);


ALTER TABLE public.iep_goal_condition OWNER TO postgres;

--
-- Name: iep_goal_domain; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_goal_domain (
    domain_description character varying NOT NULL,
    domain_code character varying NOT NULL,
    id_goal_domain serial NOT NULL
);


ALTER TABLE public.iep_goal_domain OWNER TO postgres;

--
-- Name: iep_goal_objective; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_goal_objective (
    domain_code character varying NOT NULL,
    topic_code character varying NOT NULL,
    subtopic_code character varying NOT NULL,
    objective_code character varying NOT NULL,
    objective_description character varying NOT NULL,
    topic_code_backup character varying,
    id_goal_objective serial NOT NULL
);


ALTER TABLE public.iep_goal_objective OWNER TO postgres;

--
-- Name: iep_goal_standard; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_goal_standard (
    standard_description character varying NOT NULL,
    standard_domain character varying NOT NULL,
    standard_code character varying,
    id_goal_standard serial NOT NULL
);


ALTER TABLE public.iep_goal_standard OWNER TO postgres;

--
-- Name: iep_goal_subtopic; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_goal_subtopic (
    subtopic_description character varying NOT NULL,
    subtopic_code character varying NOT NULL,
    topic_code character varying NOT NULL,
    id_goal_subtopic serial NOT NULL
);


ALTER TABLE public.iep_goal_subtopic OWNER TO postgres;

--
-- Name: iep_goal_topic; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_goal_topic (
    topic_description character varying NOT NULL,
    topic_code character varying NOT NULL,
    domain_code character varying NOT NULL,
    id_goal_topic serial NOT NULL
);


ALTER TABLE public.iep_goal_topic OWNER TO postgres;

--
-- Name: iep_guardian_id_guardian_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_guardian_id_guardian_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_guardian_id_guardian_seq OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: iep_guardian_lps_bu_20070831; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_guardian_lps_bu_20070831 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character(2),
    address_zip character varying,
    email_address character varying,
    id_guardian integer,
    id_student integer,
    name_first character varying,
    name_last character varying,
    name_middle character varying,
    relation_to_child character varying,
    xxxprimary_language character varying,
    phone_home character varying,
    phone_work character varying,
    status character varying,
    user_name character varying,
    "password" character varying,
    password_reset_flag boolean,
    date_last_pw_change timestamp with time zone,
    date_expiration date,
    checkout_id_user integer,
    checkout_time integer,
    online_access character varying,
    id_student_local integer,
    id_guardian_local integer,
    last_auto_update timestamp with time zone,
    last_login timestamp with time zone,
    data_source text,
    restore_flag integer
);


ALTER TABLE public.iep_guardian_lps_bu_20070831 OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: iep_guardian_temp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_guardian_temp (
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character(2),
    address_zip character varying,
    email_address character varying,
    id_guardian_local integer,
    id_student_local integer,
    name_first character varying NOT NULL,
    name_middle character varying,
    name_last character varying NOT NULL,
    phone_home character varying,
    phone_work character varying
);


ALTER TABLE public.iep_guardian_temp OWNER TO postgres;

--
-- Name: iep_log; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_log (
    id_author integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_log integer DEFAULT nextval(('iep_log_id_log_seq'::text)::regclass) NOT NULL,
    id_rel_record character varying NOT NULL,
    id_student integer,
    "type" smallint NOT NULL,
    table_name character varying NOT NULL,
    notes character varying,
    page smallint,
    id_guardian integer
);


ALTER TABLE public.iep_log OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: iep_log_deleted; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_log_deleted (
    id_author integer,
    timestamp_created timestamp with time zone,
    id_log integer,
    id_rel_record character varying,
    id_student integer,
    "type" smallint,
    table_name character varying,
    notes character varying,
    page smallint,
    id_guardian integer
);


ALTER TABLE public.iep_log_deleted OWNER TO postgres;

--
-- Name: iep_log_id_log_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_log_id_log_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_log_id_log_seq OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: iep_log_old; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_log_old (
    id_author integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_log integer DEFAULT nextval(('iep_log_id_log_seq'::text)::regclass) NOT NULL,
    id_rel_record character varying NOT NULL,
    id_student integer,
    "type" smallint NOT NULL,
    table_name character varying NOT NULL,
    notes character varying,
    page smallint,
    id_guardian integer
);


ALTER TABLE public.iep_log_old OWNER TO postgres;

--
-- Name: iep_session; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_session (
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    expiration integer,
    id_session character(32) NOT NULL,
    id_user integer DEFAULT 10000001 NOT NULL,
    ip character varying,
    platform character varying,
    value character varying,
    version real,
    status character varying DEFAULT 'Active'::character varying,
    token_key character varying,
    token_timeout timestamp without time zone,
    zfvalue character varying,
    token_key_non_zf character varying,
    note character varying,
    first_id_user integer
);


ALTER TABLE public.iep_session OWNER TO postgres;

--
-- Name: iep_login_history; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW iep_login_history AS
    SELECT date(iep_session.timestamp_last_mod) AS "Date", count(*) AS "Total Logins", count(DISTINCT iep_session.id_user) AS "Total Users" FROM iep_session GROUP BY date(iep_session.timestamp_last_mod) ORDER BY date(iep_session.timestamp_last_mod);


ALTER TABLE public.iep_login_history OWNER TO postgres;

--
-- Name: iep_message; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_message (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_message integer DEFAULT nextval(('iep_message_id_message_seq'::text)::regclass) NOT NULL,
    id_user character varying NOT NULL,
    link character varying,
    message character varying,
    status character varying DEFAULT 'New'::character varying NOT NULL,
    subject character varying,
    checkout_id_user integer,
    checkout_time integer,
    id_user_bad integer,
    id_user_old character varying
);


ALTER TABLE public.iep_message OWNER TO postgres;

--
-- Name: iep_message_id_message_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_message_id_message_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_message_id_message_seq OWNER TO postgres;

--
-- Name: iep_messages; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_messages (
    id_messages integer DEFAULT nextval(('"iep_messages_id_messages_seq"'::text)::regclass) NOT NULL,
    msg_title character varying NOT NULL,
    message_text character varying NOT NULL,
    create_date date NOT NULL,
    display_until_date date,
    msg_type character varying NOT NULL
);


ALTER TABLE public.iep_messages OWNER TO postgres;

--
-- Name: iep_messages_id_messages_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_messages_id_messages_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_messages_id_messages_seq OWNER TO postgres;

--
-- Name: iep_pageviews; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_pageviews (
    user_id integer,
    session_key character(32),
    request_vars text,
    area text,
    sub text,
    client_ip inet,
    access_time timestamp with time zone,
    page_load_time double precision
);


ALTER TABLE public.iep_pageviews OWNER TO postgres;

--
-- Name: iep_pageviews_core; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW iep_pageviews_core AS
    SELECT iep_pageviews.user_id, iep_pageviews.area, iep_pageviews.sub, iep_pageviews.client_ip, iep_pageviews.access_time, iep_pageviews.page_load_time FROM iep_pageviews;


ALTER TABLE public.iep_pageviews_core OWNER TO postgres;

--
-- Name: iep_personnel_deleted; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_personnel_deleted (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character(2),
    address_zip character varying,
    "class" smallint,
    email_address character varying,
    id_personnel integer,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    name_first character varying,
    name_last character varying,
    name_middle character varying,
    phone_home character varying,
    phone_work character varying,
    access_list character varying,
    checkout_id_user integer,
    checkout_time integer,
    status character varying,
    user_name character varying,
    "password" character varying,
    password_reset_flag boolean,
    date_last_pw_change timestamp with time zone,
    date_expiration date,
    online_access character varying,
    last_login timestamp with time zone,
    email_valid boolean,
    id_personnel_master integer,
    single_converted boolean,
    scrubflag character varying,
    survey_date_list character varying,
    email_bu character varying,
    team_count integer,
    case_mgr_count integer,
    update_flag integer,
    vere_ss_update boolean
);


ALTER TABLE public.iep_personnel_deleted OWNER TO postgres;

--
-- Name: iep_personnel_full; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW iep_personnel_full AS
    SELECT p.name_first, p.name_last, p.user_name, p."password", p."class", p.status, c.name_county, d.name_district, s.name_school FROM iep_personnel p, iep_county c, iep_district d, iep_school s WHERE ((((((p.id_county = c.id_county) AND (c.id_county = d.id_county)) AND (p.id_district = d.id_district)) AND (d.id_district = s.id_district)) AND (d.id_county = s.id_county)) AND (p.id_school = s.id_school));


ALTER TABLE public.iep_personnel_full OWNER TO postgres;

--
-- Name: iep_personnel_id_personnel_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_personnel_id_personnel_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_personnel_id_personnel_seq OWNER TO postgres;

--
-- Name: iep_priv_id_priv_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_priv_id_priv_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_priv_id_priv_seq OWNER TO postgres;

--
-- Name: iep_privileges; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_privileges (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    "class" smallint NOT NULL,
    id_personnel integer NOT NULL,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    access_list character varying,
    checkout_id_user integer,
    checkout_time integer,
    status character varying DEFAULT 'Inactive'::character varying,
    user_name character varying,
    "password" character varying,
    password_reset_flag character varying,
    date_last_pw_change timestamp with time zone DEFAULT "timestamp"('now'::text),
    date_expiration date,
    online_access character varying DEFAULT 'Disabled'::character varying,
    id_privileges integer DEFAULT nextval(('iep_priv_id_priv_seq'::text)::regclass),
    never_activated character varying DEFAULT 'new'::character varying,
    name_county character varying,
    name_district character varying,
    name_school character varying,
    lower_name_county character varying,
    lower_name_district character varying,
    lower_name_school character varying
);


ALTER TABLE public.iep_privileges OWNER TO postgres;

--
-- Name: iep_priv_view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW iep_priv_view AS
    SELECT p.id_personnel, (((p.name_first)::text || (' '::character varying)::text) || (p.name_last)::text) AS name, c.id_county, c.name_county, d.id_district, d.name_district, s.id_school, s.name_school, pr."class" FROM iep_personnel p, iep_county c, iep_district d, iep_school s, iep_privileges pr WHERE ((((pr.id_personnel = p.id_personnel) AND (p.id_county = c.id_county)) AND ((p.id_county = d.id_county) AND (p.id_district = d.id_district))) AND (((p.id_county = s.id_county) AND (p.id_district = s.id_district)) AND (p.id_school = s.id_school)));


ALTER TABLE public.iep_priv_view OWNER TO postgres;

--
-- Name: iep_progress__id_progress_r_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_progress__id_progress_r_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_progress__id_progress_r_seq OWNER TO postgres;

--
-- Name: iep_rule51; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_rule51 (
    id_rule51 character varying NOT NULL,
    "comment" character varying,
    description character varying
);


ALTER TABLE public.iep_rule51 OWNER TO postgres;

--
-- Name: iep_school_list; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW iep_school_list AS
    SELECT c.name_county, d.name_district, s.name_school, (((((s.id_county)::text || ('-'::bpchar)::text) || (s.id_district)::text) || ('-'::bpchar)::text) || (s.id_school)::text) AS school_key, s.status, (((p1.name_first)::text || (' '::character varying)::text) || (p1.name_last)::text) AS school_mgr, (((p2.name_first)::text || (' '::character varying)::text) || (p2.name_last)::text) AS acct_sprvsr, (SELECT count(*) AS count FROM iep_student st WHERE (s.id_school = st.id_school)) AS student_count FROM iep_county c, iep_district d, iep_school s, iep_personnel p1, iep_personnel p2 WHERE ((((c.id_county = d.id_county) AND (d.id_district = s.id_district)) AND (s.id_school_mgr = p1.id_personnel)) AND (s.id_account_sprv = p2.id_personnel)) UNION SELECT c.name_county, d.name_district, s.name_school, (((((s.id_county)::text || ('-'::bpchar)::text) || (s.id_district)::text) || ('-'::bpchar)::text) || (s.id_school)::text) AS school_key, s.status, NULL::"unknown" AS school_mgr, NULL::"unknown" AS acct_sprvsr, NULL::"unknown" AS student_count FROM iep_county c, iep_district d, iep_school s WHERE (((c.id_county = d.id_county) AND (d.id_district = s.id_district)) AND (NOT (EXISTS (SELECT 1 FROM iep_personnel p WHERE ((s.id_school_mgr = p.id_personnel) OR (s.id_account_sprv = p.id_personnel)))))) ORDER BY 1, 2, 3;


ALTER TABLE public.iep_school_list OWNER TO postgres;

--
-- Name: iep_school_name; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_school_name (
    id_cds character(9),
    id_county character(2),
    id_district character(4),
    id_school character(3),
    name_county character varying,
    name_school character varying,
    name_district character varying
);


ALTER TABLE public.iep_school_name OWNER TO postgres;

--
-- Name: iep_school_non_public; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_school_non_public (
    id_iep_school_non_public integer DEFAULT nextval(('"iep_school_no_id_iep_school_seq"'::text)::regclass) NOT NULL,
    agency_record_type_code character varying,
    id_agency integer,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    name character varying,
    mailing_city character varying,
    county_name character varying
);


ALTER TABLE public.iep_school_non_public OWNER TO postgres;

--
-- Name: iep_school_report_date; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_school_report_date (
    id_school_report_date serial NOT NULL,
    date_report1 date,
    date_report2 date,
    date_report3 date,
    date_report4 date,
    date_report5 date,
    date_report6 date,
    year_identifier integer,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    id_author integer,
    id_author_last_mod integer
);


ALTER TABLE public.iep_school_report_date OWNER TO postgres;

--
-- Name: iep_sesis_sna_id_sesis_snap_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_sesis_sna_id_sesis_snap_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_sesis_sna_id_sesis_snap_seq OWNER TO postgres;

--
-- Name: iep_sesis_snapshot; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_sesis_snapshot (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text),
    timestamp_last_mod timestamp with time zone,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character varying,
    address_zip character varying,
    date_last_iep date,
    date_last_iep_update date,
    date_last_mdt date,
    dob date,
    email_address character varying,
    ethnic_group character(1),
    exit_code character varying,
    xxxgender character(1),
    grade character varying,
    id_case_mgr integer,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    phone character varying,
    primary_disability character varying,
    primary_language character varying,
    xxxprimary_language_family character varying,
    program_provider character varying,
    xxxstatus character(1),
    ward boolean,
    ward_surrogate boolean,
    ward_surrogate_nn boolean,
    ward_surrogate_other character varying,
    id_list_team character varying,
    id_list_guardian character varying,
    status character varying,
    gender character varying,
    checkout_id_user integer,
    checkout_time integer,
    date_web_notify date,
    id_student_local integer,
    change_type text,
    last_auto_update timestamp with time zone,
    transition_plan boolean,
    pub_school_student boolean,
    id_case_mgr_old integer,
    id_team_list_old text,
    sesis_exit_code smallint,
    program_provider_name character varying,
    program_provider_code character varying,
    data_source character varying,
    ssn character varying,
    medicaid character varying,
    ei_ref_date character varying,
    eval_date character varying,
    medicaid_off boolean,
    ssn_off boolean,
    id_ser_cord integer,
    id_ei_case_mgr integer,
    transitioned boolean,
    "1-1" character varying,
    "1-2-Mo" character varying,
    "1-2-Day" character varying,
    "1-2-Yr" character varying,
    "1-2" character varying,
    "1-3-name" character varying,
    "1-3-number" character varying,
    "1-4-gender" character varying,
    "1-4-race" character varying,
    "1-5" character varying,
    "1-6" character varying,
    "1-7" character varying,
    "1-7A" character varying,
    "1-7B-parent-involved" character varying,
    "1-7B-specify" character varying,
    "1-7B-other" character varying,
    "1-9-1" character varying,
    "1-9-2" character varying,
    "1-9-3" character varying,
    "1-9-name" character varying,
    "1-9-number" character varying,
    "1-8" character varying,
    "1-8A" character varying,
    "1-8B1" character varying,
    "1-8B2" character varying,
    "1-8B3" character varying,
    "1-8B4" character varying,
    "1-8B5" character varying,
    "1-8B6" character varying,
    "1-8B8" character varying,
    "1-8B9" character varying,
    "1-8B10" character varying,
    "1-8B11" character varying,
    "1-8B12" character varying,
    "1-8B13" character varying,
    "1-8B14" character varying,
    "1-8B15" character varying,
    "1-10" character varying,
    "1-11-1" character varying,
    "1-11-2" character varying,
    "1-11-3" character varying,
    "1-11-4" character varying,
    "1-11-5" character varying,
    "1-11-6" character varying,
    "1-11-7" character varying,
    "1-11-8" character varying,
    "1-11-9" character varying,
    "1-11-10" character varying,
    "1-11-11" character varying,
    "1-11-12" character varying,
    "1-11-13" character varying,
    "1-11-14" character varying,
    "1-11-15" character varying,
    "1-11-16" character varying,
    "1-11-17" character varying,
    "1-11-18" character varying,
    "1-11-19" character varying,
    "1-11-20" character varying,
    "1-11-99" character varying,
    "1-11-99-specify" character varying,
    "1-12A-with" character varying,
    "1-12A-not-with" character varying,
    "1-12B" character varying,
    from_id_county character(2),
    from_id_district character(4),
    from_id_school character(3),
    id_sesis_snapshot integer DEFAULT nextval(('iep_sesis_sna_id_sesis_snap_seq'::text)::regclass)
);


ALTER TABLE public.iep_sesis_snapshot OWNER TO postgres;

--
-- Name: iep_sesis_snapshot2; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_sesis_snapshot2 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text),
    timestamp_last_mod timestamp with time zone,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character varying,
    address_zip character varying,
    date_last_iep date,
    date_last_iep_update date,
    date_last_mdt date,
    dob date,
    email_address character varying,
    ethnic_group character(1),
    exit_code character varying,
    xxxgender character(1),
    grade character varying,
    id_case_mgr integer,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    phone character varying,
    primary_disability character varying,
    primary_language character varying,
    xxxprimary_language_family character varying,
    program_provider character varying,
    xxxstatus character(1),
    ward boolean,
    ward_surrogate boolean,
    ward_surrogate_nn boolean,
    ward_surrogate_other character varying,
    id_list_team character varying,
    id_list_guardian character varying,
    status character varying,
    gender character varying,
    checkout_id_user integer,
    checkout_time integer,
    date_web_notify date,
    id_student_local integer,
    change_type text,
    last_auto_update timestamp with time zone,
    transition_plan boolean,
    pub_school_student boolean,
    id_case_mgr_old integer,
    id_team_list_old text,
    sesis_exit_code smallint,
    program_provider_name character varying,
    program_provider_code character varying,
    data_source character varying,
    ssn character varying,
    medicaid character varying,
    ei_ref_date character varying,
    eval_date character varying,
    medicaid_off boolean,
    ssn_off boolean,
    id_ser_cord integer,
    id_ei_case_mgr integer,
    transitioned boolean,
    "001" character varying,
    "002" character varying,
    "003" character varying,
    "004" character varying,
    "005" character varying,
    "006" character varying,
    "007" character varying,
    "008" character varying,
    "009" character varying,
    "010" character varying,
    "011" character varying,
    "012" character varying,
    "013" character varying,
    "014" character varying,
    "015" character varying,
    "016" character varying,
    "017" character varying,
    "018" character varying,
    "019" character varying,
    "020" character varying,
    "021" character varying,
    "022" character varying,
    "023" character varying,
    "024" character varying,
    "025" character varying,
    "026" character varying,
    "027" character varying,
    "028" character varying,
    "029" character varying,
    "030" character varying,
    "031" character varying,
    "032" character varying,
    "033" character varying,
    "034" character varying,
    "035" character varying,
    "036" character varying,
    "037" character varying,
    "038" character varying,
    "039" character varying,
    "040" character varying,
    "041" character varying,
    "042" character varying,
    "043" character varying,
    "044" character varying,
    "045" character varying,
    "046" character varying,
    "047" character varying,
    "048" character varying,
    "049" character varying,
    "050" character varying,
    "051" character varying,
    "052" character varying,
    "053" character varying,
    "054" character varying,
    "055" character varying,
    "056" character varying,
    "057" character varying,
    "058" character varying,
    from_id_county character(2),
    from_id_district character(4),
    from_id_school character(3),
    id_sesis_snapshot integer DEFAULT nextval(('iep_sesis_sna_id_sesis_snap_seq'::text)::regclass),
    "059" character varying,
    "060" character varying,
    "061" character varying,
    removed boolean,
    removed_note character varying,
    "099" character varying,
    "100" character varying
);


ALTER TABLE public.iep_sesis_snapshot2 OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: iep_session_zend; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_session_zend (
    timestamp_created timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    expiration integer,
    id_session character(32) NOT NULL,
    id_user integer DEFAULT 10000001 NOT NULL,
    ip character varying,
    platform character varying,
    value character varying,
    version real,
    status character varying DEFAULT 'Active'::character varying,
    token_key character varying,
    token_timeout timestamp without time zone,
    zfvalue character varying,
    token_key_non_zf character varying,
    note character varying,
    siteaccessgranted boolean DEFAULT false,
    first_id_user integer
);


ALTER TABLE public.iep_session_zend OWNER TO postgres;

--
-- Name: iep_student_20070828; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_student_20070828 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character varying,
    address_zip character varying,
    date_last_iep date,
    date_last_iep_update date,
    date_last_mdt date,
    dob date,
    email_address character varying,
    ethnic_group character(1),
    exit_code character varying,
    xxxgender character(1),
    grade character varying,
    id_case_mgr integer,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    phone character varying,
    primary_disability character varying,
    primary_language character varying,
    xxxprimary_language_family character varying,
    program_provider character varying,
    xxxstatus character(1),
    ward boolean,
    ward_surrogate boolean,
    ward_surrogate_nn boolean,
    ward_surrogate_other character varying,
    id_list_team character varying,
    id_list_guardian character varying,
    status character varying,
    gender character varying,
    checkout_id_user integer,
    checkout_time integer,
    date_web_notify date,
    id_student_local integer,
    change_type text,
    last_auto_update timestamp with time zone,
    transition_plan boolean,
    pub_school_student boolean,
    id_case_mgr_old integer,
    id_team_list_old text,
    data_source text,
    sesis_exit_code smallint,
    program_provider_name character varying,
    program_provider_code character varying,
    ssn character varying,
    medicaid character varying,
    ei_ref_date character varying,
    eval_date character varying,
    medicaid_off boolean,
    ssn_off boolean,
    id_ser_cord integer,
    id_ei_case_mgr integer,
    transitioned boolean,
    nonpubcounty character(2),
    nonpubdistrict character(4),
    nonpubschool character(3),
    vere_ss_update boolean,
    sesis_exit_date date,
    program_provider_id_school character varying,
    ell_student boolean,
    unique_id_state bigint,
    unique_id_state_duplicate bigint,
    id_county_orphan character(2),
    id_district_orphan character(4),
    id_school_orphan character(3)
);


ALTER TABLE public.iep_student_20070828 OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: iep_student_deleted; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_student_deleted (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character varying,
    address_zip character varying,
    date_last_iep date,
    date_last_iep_update date,
    date_last_mdt date,
    dob date,
    email_address character varying,
    ethnic_group character(1),
    exit_code character varying,
    xxxgender character(1),
    grade character varying,
    id_case_mgr integer,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    phone character varying,
    primary_disability character varying,
    primary_language character varying,
    xxxprimary_language_family character varying,
    program_provider character varying,
    xxxstatus character(1),
    ward boolean,
    ward_surrogate boolean,
    ward_surrogate_nn boolean,
    ward_surrogate_other character varying,
    id_list_team character varying,
    id_list_guardian character varying,
    status character varying,
    gender character varying,
    checkout_id_user integer,
    checkout_time integer,
    date_web_notify date,
    id_student_local integer,
    change_type text,
    last_auto_update timestamp with time zone,
    transition_plan boolean,
    pub_school_student boolean,
    id_case_mgr_old integer,
    id_team_list_old text,
    data_source text,
    sesis_exit_code smallint,
    program_provider_name character varying,
    program_provider_code character varying,
    ssn character varying,
    medicaid character varying,
    ei_ref_date character varying,
    eval_date character varying,
    medicaid_off boolean,
    ssn_off boolean,
    id_ser_cord integer,
    id_ei_case_mgr integer,
    transitioned boolean,
    nonpubcounty character(2),
    nonpubdistrict character(4),
    nonpubschool character(3),
    vere_ss_update boolean,
    sesis_exit_date date,
    program_provider_id_school character varying,
    ell_student boolean,
    unique_id_state bigint,
    unique_id_state_duplicate bigint,
    id_county_orphan character(2),
    id_district_orphan character(4),
    id_school_orphan character(3),
    parental_placement boolean,
    exclude_from_nssrs_report boolean,
    alternate_assessment boolean
);


ALTER TABLE public.iep_student_deleted OWNER TO postgres;

--
-- Name: iep_student_id_student_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_student_id_student_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_student_id_student_seq OWNER TO postgres;

--
-- Name: iep_student_team; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_student_team (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_student_team integer DEFAULT nextval(('iep_student_team_id_seq'::text)::regclass) NOT NULL,
    id_student integer NOT NULL,
    id_personnel integer NOT NULL,
    date_added timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    date_removed timestamp with time zone,
    status character varying DEFAULT 'Active'::character varying NOT NULL,
    flag_view integer,
    flag_edit integer,
    flag_create integer,
    id_personnel_old integer,
    flag_ei_only integer
);


ALTER TABLE public.iep_student_team OWNER TO postgres;

--
-- Name: iep_student_team_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_student_team_id_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_student_team_id_seq OWNER TO postgres;

--
-- Name: iep_student_teambu; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_student_teambu (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    id_student_team integer,
    id_student integer,
    id_personnel integer,
    date_added timestamp with time zone,
    date_removed timestamp with time zone,
    status character varying,
    flag_view integer,
    flag_edit integer,
    flag_create integer,
    id_personnel_old integer,
    flag_ei_only integer
);


ALTER TABLE public.iep_student_teambu OWNER TO postgres;

--
-- Name: iep_supp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_supp (
    id_author integer NOT NULL,
    id_author_last_mod integer NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    checkout_id_user integer,
    checkout_time integer,
    id_supp integer DEFAULT nextval(('id_form_004_supp_seq'::text)::regclass) NOT NULL,
    id_form_name character varying NOT NULL,
    id_form_id integer NOT NULL,
    id_student integer NOT NULL,
    title character varying,
    page_status character varying,
    text_content character varying,
    name_first character varying,
    name_middle character varying,
    name_last character varying
);


ALTER TABLE public.iep_supp OWNER TO postgres;

--
-- Name: iep_survey; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_survey (
    id_survey integer DEFAULT nextval(('"iep_survey_id_survey_seq"'::text)::regclass) NOT NULL,
    name character varying,
    district character varying,
    school character varying,
    hours bigint,
    like_least character varying,
    like_most character varying,
    useable character varying,
    changes character varying,
    comments character varying,
    like_add character varying
);


ALTER TABLE public.iep_survey OWNER TO postgres;

--
-- Name: iep_survey_id_survey_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_survey_id_survey_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_survey_id_survey_seq OWNER TO postgres;

--
-- Name: iep_team_district; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_team_district (
    timestamp_created timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    timestamp_last_mod timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    id_iep_team_district serial NOT NULL,
    id_form_004 integer,
    participant_name character varying,
    relationship_desc character varying,
    relationship_district character varying,
    sortnum integer,
    date_signed date,
    relationship_other character varying,
    status character varying DEFAULT 'Active'::character varying,
    id_author integer,
    id_author_last_mod integer,
    id_student integer
);


ALTER TABLE public.iep_team_district OWNER TO postgres;

--
-- Name: iep_team_member; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_team_member (
    id_iep_team_member serial NOT NULL,
    id_form_004 integer,
    participant_name character varying,
    absent boolean,
    positin_desc character varying,
    timestamp_created timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone,
    timestamp_last_mod timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone,
    absent_reason character varying,
    sortnum integer,
    meeting_date date,
    status character varying DEFAULT 'Active'::character varying
);


ALTER TABLE public.iep_team_member OWNER TO postgres;

--
-- Name: iep_team_member_input; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_team_member_input (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone,
    timestamp_last_mod timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone,
    checkout_id_user integer,
    checkout_time integer,
    id_iep_team_member_input serial NOT NULL,
    id_iep_absence integer,
    id_form_004 integer,
    id_form_003 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    input_information character varying,
    status character varying DEFAULT 'Draft'::character varying
);


ALTER TABLE public.iep_team_member_input OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: iep_team_member_input_jesse; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_team_member_input_jesse (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp without time zone,
    timestamp_last_mod timestamp without time zone,
    checkout_id_user integer,
    checkout_time integer,
    id_iep_team_member_input integer,
    id_iep_absence integer,
    id_form_004 integer,
    id_form_003 integer,
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    input_information character varying
);


ALTER TABLE public.iep_team_member_input_jesse OWNER TO postgres;

--
-- Name: iep_team_other_id_iep_team_other_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_team_other_id_iep_team_other_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_team_other_id_iep_team_other_seq OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: iep_team_other; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_team_other (
    timestamp_created timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    timestamp_last_mod timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    id_iep_team_other integer DEFAULT nextval('iep_team_other_id_iep_team_other_seq'::regclass) NOT NULL,
    id_form_004 integer,
    participant_name character varying,
    relationship_desc character varying,
    relationship_other character varying,
    sortnum integer,
    status character varying DEFAULT 'Active'::character varying,
    id_author integer,
    id_author_last_mod integer,
    id_student integer
);


ALTER TABLE public.iep_team_other OWNER TO postgres;

--
-- Name: iep_transfer__id_transfer_r_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE iep_transfer__id_transfer_r_seq
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.iep_transfer__id_transfer_r_seq OWNER TO postgres;

--
-- Name: iep_transfer_request; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE iep_transfer_request (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_transfer_request integer DEFAULT nextval(('"iep_transfer__id_transfer_r_seq"'::text)::regclass) NOT NULL,
    id_county_from character(2),
    id_district_from character(4),
    id_school_from character(3),
    id_county_to character(2),
    id_district_to character(4),
    id_school_to character(3),
    student_count integer,
    student_name_list character varying,
    transfer_type character varying,
    student_id_list character varying
);


ALTER TABLE public.iep_transfer_request OWNER TO postgres;

--
-- Name: iep_transfer_request_full; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW iep_transfer_request_full AS
    SELECT tr.id_author, tr.id_author_last_mod, tr.timestamp_created, tr.timestamp_last_mod, tr.id_transfer_request, tr.id_county_from, tr.id_district_from, tr.id_school_from, tr.id_county_to, tr.id_district_to, tr.id_school_to, tr.student_count, tr.student_name_list, tr.transfer_type, d1.name_district AS district_from, s1.name_school AS school_from, d2.name_district AS district_to, s2.name_school AS school_to FROM ((((iep_transfer_request tr LEFT JOIN iep_district d1 ON ((((tr.id_county_from)::text = (d1.id_county)::text) AND ((tr.id_district_from)::text = (d1.id_district)::text)))) LEFT JOIN iep_district d2 ON ((((tr.id_county_to)::text = (d2.id_county)::text) AND ((tr.id_district_to)::text = (d2.id_district)::text)))) LEFT JOIN iep_school s1 ON (((((tr.id_county_from)::text = (s1.id_county)::text) AND ((tr.id_district_from)::text = (s1.id_district)::text)) AND ((tr.id_school_from)::text = (s1.id_school)::text)))) LEFT JOIN iep_school s2 ON (((((tr.id_county_to)::text = (s2.id_county)::text) AND ((tr.id_district_to)::text = (s2.id_district)::text)) AND ((tr.id_school_to)::text = (s2.id_school)::text))));


ALTER TABLE public.iep_transfer_request_full OWNER TO postgres;

--
-- Name: ifsp_goals; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ifsp_goals (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_ifsp_goals integer DEFAULT nextval(('"ifsp_goals_id_ifsp_goals_seq"'::text)::regclass) NOT NULL,
    id_form_013 integer,
    id_student integer,
    status character varying,
    goal_outcome character varying,
    goal_strengths character varying,
    goal_what_done character varying,
    goal_prog_often character varying,
    goal_prog_whom character varying,
    goal_prog_measured character varying,
    goal_review_date character varying,
    goal_progress character varying,
    goal_comments character varying,
    fk_id_ifsp_goals integer,
    goal_met boolean,
    goal_review_date_new date,
    goal_met_imported boolean
);


ALTER TABLE public.ifsp_goals OWNER TO postgres;

--
-- Name: ifsp_goals_id_ifsp_goals_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ifsp_goals_id_ifsp_goals_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.ifsp_goals_id_ifsp_goals_seq OWNER TO postgres;

--
-- Name: ifsp_parents; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ifsp_parents (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_ifsp_parents integer DEFAULT nextval(('"ifsp_parents_id_ifsp_parent_seq"'::text)::regclass) NOT NULL,
    id_form_013 integer,
    id_student integer,
    pg_family_lang character varying,
    pg_name character varying,
    pg_role character varying,
    pg_home_phone character varying,
    pg_work_phone character varying,
    pg_address character varying,
    status character varying
);


ALTER TABLE public.ifsp_parents OWNER TO postgres;

--
-- Name: ifsp_parents_id_ifsp_parent_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ifsp_parents_id_ifsp_parent_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.ifsp_parents_id_ifsp_parent_seq OWNER TO postgres;

--
-- Name: ifsp_services; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ifsp_services (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_form_013 integer,
    id_student integer,
    id_ifsp_services integer DEFAULT nextval(('"ifsp_services_id_ifsp_servi_seq"'::text)::regclass) NOT NULL,
    status character varying,
    service_service character varying,
    service_justification character varying,
    service_how_often character varying,
    service_tpd character varying,
    service_tpd_unit character varying,
    service_dwm character varying,
    service_dwm_unit character varying,
    service_mpy character varying,
    service_group_ind character varying,
    service_natural character varying,
    service_how_much character varying,
    service_where character varying,
    service_start date,
    service_end date,
    service_who_pays character varying,
    service_who_pays_other character varying,
    service_responsible character varying,
    service_responsible_other character varying,
    service_other character varying,
    service_where_other character varying
);


ALTER TABLE public.ifsp_services OWNER TO postgres;

--
-- Name: ifsp_services_id_ifsp_servi_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ifsp_services_id_ifsp_servi_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.ifsp_services_id_ifsp_servi_seq OWNER TO postgres;

--
-- Name: ifsp_team_mem_id_ifsp_team__seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ifsp_team_mem_id_ifsp_team__seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.ifsp_team_mem_id_ifsp_team__seq OWNER TO postgres;

--
-- Name: ifsp_team_members; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ifsp_team_members (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_ifsp_team_members integer DEFAULT nextval(('"ifsp_team_mem_id_ifsp_team__seq"'::text)::regclass) NOT NULL,
    id_form_013 integer,
    id_student integer,
    tm_signature character varying,
    tm_role character varying,
    tm_address character varying,
    status character varying,
    tm_sig_on_file character varying,
    tm_role_other character varying
);


ALTER TABLE public.ifsp_team_members OWNER TO postgres;

--
-- Name: ifsp_team_oth_id_ifsp_team__seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ifsp_team_oth_id_ifsp_team__seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.ifsp_team_oth_id_ifsp_team__seq OWNER TO postgres;

--
-- Name: ifsp_team_other; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ifsp_team_other (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_ifsp_team_other integer DEFAULT nextval(('"ifsp_team_oth_id_ifsp_team__seq"'::text)::regclass) NOT NULL,
    id_student integer,
    id_form_013 integer,
    tmo_role character varying,
    tmo_address character varying,
    tmo_initial character varying,
    tmo_name character varying,
    status character varying
);


ALTER TABLE public.ifsp_team_other OWNER TO postgres;

--
-- Name: ifsp_tran_pla_id_ifsp_tran__seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ifsp_tran_pla_id_ifsp_tran__seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.ifsp_tran_pla_id_ifsp_tran__seq OWNER TO postgres;

--
-- Name: ifsp_tran_plan_participants; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ifsp_tran_plan_participants (
    id_author integer DEFAULT 0 NOT NULL,
    id_author_last_mod integer DEFAULT 0 NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_ifsp_tran_plan_participants integer DEFAULT nextval(('"ifsp_tran_pla_id_ifsp_tran__seq"'::text)::regclass) NOT NULL,
    id_form_013 integer,
    id_student integer,
    tpp_to_be_done character varying,
    tpp_responsible character varying,
    tpp_time_line character varying,
    tpp_date_completed character varying,
    status character varying,
    not_used boolean DEFAULT false
);


ALTER TABLE public.ifsp_tran_plan_participants OWNER TO postgres;

--
-- Name: languages; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE languages (
    name character varying
);


ALTER TABLE public.languages OWNER TO postgres;

--
-- Name: lps_mdt_paragraphs; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE lps_mdt_paragraphs (
    p_id character varying(20),
    p_text text
);


ALTER TABLE public.lps_mdt_paragraphs OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: lps_student_backup_08192008; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE lps_student_backup_08192008 (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character varying,
    address_zip character varying,
    date_last_iep date,
    date_last_iep_update date,
    date_last_mdt date,
    dob date,
    email_address character varying,
    ethnic_group character(1),
    exit_code character varying,
    xxxgender character(1),
    grade character varying,
    id_case_mgr integer,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    phone character varying,
    primary_disability character varying,
    primary_language character varying,
    xxxprimary_language_family character varying,
    program_provider character varying,
    xxxstatus character(1),
    ward boolean,
    ward_surrogate boolean,
    ward_surrogate_nn boolean,
    ward_surrogate_other character varying,
    id_list_team character varying,
    id_list_guardian character varying,
    status character varying,
    gender character varying,
    checkout_id_user integer,
    checkout_time integer,
    date_web_notify date,
    id_student_local integer,
    change_type text,
    last_auto_update timestamp with time zone,
    transition_plan boolean,
    pub_school_student boolean,
    id_case_mgr_old integer,
    id_team_list_old text,
    data_source text,
    sesis_exit_code smallint,
    program_provider_name character varying,
    program_provider_code character varying,
    ssn character varying,
    medicaid character varying,
    ei_ref_date character varying,
    eval_date character varying,
    medicaid_off boolean,
    ssn_off boolean,
    id_ser_cord integer,
    id_ei_case_mgr integer,
    transitioned boolean,
    nonpubcounty character(2),
    nonpubdistrict character(4),
    nonpubschool character(3),
    vere_ss_update boolean,
    sesis_exit_date date,
    program_provider_id_school character varying,
    ell_student boolean,
    unique_id_state bigint,
    unique_id_state_duplicate bigint,
    id_county_orphan character(2),
    id_district_orphan character(4),
    id_school_orphan character(3),
    parental_placement boolean
);


ALTER TABLE public.lps_student_backup_08192008 OWNER TO postgres;

--
-- Name: master_form_id_form_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE master_form_id_form_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.master_form_id_form_seq OWNER TO postgres;

--
-- Name: my_caseload; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW my_caseload AS
    SELECT unique_matches.id_personnel, s.status, s.id_student, s.name_first, s.name_last, (((s.name_first)::text || ' '::text) || (s.name_last)::text) AS name_full, s.gender, s.alternate_assessment, s.grade, s.pub_school_student, (SELECT iep_form_004.id_form_004 FROM iep_form_004 WHERE (((iep_form_004.status)::text = 'Final'::text) AND (iep_form_004.id_student = s.id_student)) ORDER BY iep_form_004.date_conference DESC, iep_form_004.timestamp_created DESC LIMIT 1) AS final_id_form_004, (SELECT iep_form_004.date_conference FROM iep_form_004 WHERE (((iep_form_004.status)::text = 'Final'::text) AND (iep_form_004.id_student = s.id_student)) ORDER BY iep_form_004.date_conference DESC, iep_form_004.timestamp_created DESC LIMIT 1) AS final_date_form_004, (SELECT iep_form_004.primary_disability_drop FROM iep_form_004 WHERE (((iep_form_004.status)::text = 'Final'::text) AND (iep_form_004.id_student = s.id_student)) ORDER BY iep_form_004.date_conference DESC, iep_form_004.timestamp_created DESC LIMIT 1) AS primary_disability_drop, get_related_services((SELECT iep_form_004.id_form_004 FROM iep_form_004 WHERE (((iep_form_004.status)::text = 'Final'::text) AND (iep_form_004.id_student = s.id_student)) ORDER BY iep_form_004.date_conference DESC, iep_form_004.timestamp_created DESC LIMIT 1)) AS related_services, (SELECT iep_form_002.id_form_002 FROM iep_form_002 WHERE (((iep_form_002.status)::text = 'Final'::text) AND (iep_form_002.id_student = s.id_student)) ORDER BY iep_form_002.date_mdt DESC, iep_form_002.timestamp_created DESC LIMIT 1) AS final_id_form_002, (SELECT iep_form_002.date_mdt FROM iep_form_002 WHERE (((iep_form_002.status)::text = 'Final'::text) AND (iep_form_002.id_student = s.id_student)) ORDER BY iep_form_002.date_mdt DESC, iep_form_002.timestamp_created DESC LIMIT 1) AS final_date_form_002, (SELECT iep_form_002.disability_primary FROM iep_form_002 WHERE (((iep_form_002.status)::text = 'Final'::text) AND (iep_form_002.id_student = s.id_student)) ORDER BY iep_form_002.date_mdt DESC, iep_form_002.timestamp_created DESC LIMIT 1) AS disability_primary, (SELECT iep_form_002.initial_verification_date FROM iep_form_002 WHERE (((iep_form_002.status)::text = 'Final'::text) AND (iep_form_002.id_student = s.id_student)) ORDER BY iep_form_002.date_mdt DESC, iep_form_002.timestamp_created DESC LIMIT 1) AS initial_verification_date, get_name_school((s.id_county)::text, (s.id_district)::text, (s.id_school)::text) AS school_building, get_team_member_names(s.id_student) AS team_member_names, (SELECT iep_personnel.name_first FROM iep_personnel WHERE (s.id_case_mgr = iep_personnel.id_personnel)) AS case_mgr_name_first, (SELECT iep_personnel.name_last FROM iep_personnel WHERE (s.id_case_mgr = iep_personnel.id_personnel)) AS case_mgr_name_last, (SELECT (((iep_personnel.name_first)::text || ' '::text) || (iep_personnel.name_last)::text) FROM iep_personnel WHERE (s.id_case_mgr = iep_personnel.id_personnel)) AS case_mgr_name_full FROM ((SELECT all_matches.id_student AS id_stu, all_matches.id_personnel, min(all_matches."class") AS "class", CASE WHEN (min(all_matches."class") = 1) THEN 'ADMIN'::text WHEN (min(all_matches."class") = 2) THEN 'DM'::text WHEN (min(all_matches."class") = 3) THEN 'ADM'::text WHEN (min(all_matches."class") = 4) THEN 'SM'::text WHEN (min(all_matches."class") = 5) THEN 'ASM'::text WHEN ((min(all_matches."class") = 6) AND (all_matches.id_personnel = all_matches.id_case_mgr)) THEN 'CM'::text WHEN ((min(all_matches."class") = 6) AND (all_matches.id_personnel = all_matches.id_ei_case_mgr)) THEN 'EICM'::text WHEN ((min(all_matches."class") = 6) AND (all_matches.id_personnel = all_matches.id_ser_cord)) THEN 'SC'::text WHEN ((min(all_matches."class") = 6) AND (EXISTS (SELECT 1 FROM iep_student_team st WHERE (((st.id_personnel = st.id_personnel) AND (st.id_student = st.id_student)) AND ((st.status)::text = 'Active'::text))))) THEN 'TEAM'::text WHEN (min(all_matches."class") = 7) THEN 'TEAM'::text WHEN ((min(all_matches."class") = 8) AND (all_matches.id_personnel = all_matches.id_case_mgr)) THEN 'CM'::text WHEN ((min(all_matches."class") = 8) AND (all_matches.id_personnel = all_matches.id_ei_case_mgr)) THEN 'EICM'::text WHEN ((min(all_matches."class") = 8) AND (all_matches.id_personnel = all_matches.id_ser_cord)) THEN 'SC'::text WHEN ((min(all_matches."class") = 8) AND (EXISTS (SELECT 1 FROM iep_student_team st WHERE (((st.id_personnel = st.id_personnel) AND (st.id_student = st.id_student)) AND ((st.status)::text = 'Active'::text))))) THEN 'TEAM'::text WHEN (min(all_matches."class") = 9) THEN 'PA'::text WHEN (min(all_matches."class") = 10) THEN 'SC'::text ELSE NULL::text END AS access_type FROM ((((((SELECT iep_student.id_student, iep_student.id_case_mgr, iep_student.id_ei_case_mgr, iep_student.id_ser_cord, iep_personnel.id_personnel, iep_privileges."class" FROM ((iep_personnel iep_personnel JOIN iep_privileges iep_privileges ON ((((iep_personnel.id_personnel = iep_privileges.id_personnel) AND ((iep_personnel.status)::text = 'Active'::text)) AND ((iep_privileges.status)::text = 'Active'::text)))) JOIN iep_student iep_student ON ((iep_privileges."class" = 1))) UNION SELECT iep_student.id_student, iep_student.id_case_mgr, iep_student.id_ei_case_mgr, iep_student.id_ser_cord, iep_personnel.id_personnel, iep_privileges."class" FROM ((iep_personnel iep_personnel JOIN iep_privileges iep_privileges ON ((((iep_personnel.id_personnel = iep_privileges.id_personnel) AND ((iep_personnel.status)::text = 'Active'::text)) AND ((iep_privileges.status)::text = 'Active'::text)))) JOIN iep_student iep_student ON (((((iep_privileges."class" = 2) OR (iep_privileges."class" = 3)) AND (iep_privileges.id_district = iep_student.id_district)) AND (iep_privileges.id_county = iep_student.id_county))))) UNION SELECT iep_student.id_student, iep_student.id_case_mgr, iep_student.id_ei_case_mgr, iep_student.id_ser_cord, iep_personnel.id_personnel, iep_privileges."class" FROM ((iep_personnel iep_personnel JOIN iep_privileges iep_privileges ON ((((iep_personnel.id_personnel = iep_privileges.id_personnel) AND ((iep_personnel.status)::text = 'Active'::text)) AND ((iep_privileges.status)::text = 'Active'::text)))) JOIN iep_student iep_student ON ((((((iep_privileges."class" = 4) OR (iep_privileges."class" = 5)) AND (iep_privileges.id_school = iep_student.id_school)) AND (iep_privileges.id_district = iep_student.id_district)) AND (iep_privileges.id_county = iep_student.id_county))))) UNION SELECT iep_student.id_student, iep_student.id_case_mgr, iep_student.id_ei_case_mgr, iep_student.id_ser_cord, iep_personnel.id_personnel, iep_privileges."class" FROM ((iep_personnel iep_personnel JOIN iep_privileges iep_privileges ON ((((iep_personnel.id_personnel = iep_privileges.id_personnel) AND ((iep_personnel.status)::text = 'Active'::text)) AND ((iep_privileges.status)::text = 'Active'::text)))) JOIN iep_student iep_student ON ((((((iep_privileges."class" = 6) AND (iep_privileges.id_school = iep_student.id_school)) AND (iep_privileges.id_district = iep_student.id_district)) AND (iep_privileges.id_county = iep_student.id_county)) AND (((iep_personnel.id_personnel = iep_student.id_case_mgr) OR (iep_personnel.id_personnel = iep_student.id_ei_case_mgr)) OR (EXISTS (SELECT 1 FROM iep_student_team st WHERE (((st.id_personnel = iep_personnel.id_personnel) AND (st.id_student = iep_student.id_student)) AND ((st.status)::text = 'Active'::text))))))))) UNION SELECT iep_student.id_student, iep_student.id_case_mgr, iep_student.id_ei_case_mgr, iep_student.id_ser_cord, iep_personnel.id_personnel, iep_privileges."class" FROM ((iep_personnel iep_personnel JOIN iep_privileges iep_privileges ON ((((iep_personnel.id_personnel = iep_privileges.id_personnel) AND ((iep_personnel.status)::text = 'Active'::text)) AND ((iep_privileges.status)::text = 'Active'::text)))) JOIN iep_student iep_student ON ((((((iep_privileges."class" = 7) AND (iep_privileges.id_school = iep_student.id_school)) AND (iep_privileges.id_district = iep_student.id_district)) AND (iep_privileges.id_county = iep_student.id_county)) AND (EXISTS (SELECT 1 FROM iep_student_team st WHERE (((st.id_personnel = iep_personnel.id_personnel) AND (st.id_student = iep_student.id_student)) AND ((st.status)::text = 'Active'::text)))))))) UNION SELECT iep_student.id_student, iep_student.id_case_mgr, iep_student.id_ei_case_mgr, iep_student.id_ser_cord, iep_personnel.id_personnel, iep_privileges."class" FROM ((iep_personnel iep_personnel JOIN iep_privileges iep_privileges ON ((((iep_personnel.id_personnel = iep_privileges.id_personnel) AND ((iep_personnel.status)::text = 'Active'::text)) AND ((iep_privileges.status)::text = 'Active'::text)))) JOIN iep_student iep_student ON ((((((iep_privileges."class" = 8) AND (iep_privileges.id_school = iep_student.id_school)) AND (iep_privileges.id_district = iep_student.id_district)) AND (iep_privileges.id_county = iep_student.id_county)) AND (((iep_personnel.id_personnel = iep_student.id_ei_case_mgr) OR (iep_personnel.id_personnel = iep_student.id_ser_cord)) OR (EXISTS (SELECT 1 FROM iep_student_team st WHERE (((st.id_personnel = iep_personnel.id_personnel) AND (st.id_student = iep_student.id_student)) AND ((st.status)::text = 'Active'::text))))))))) UNION SELECT iep_student.id_student, iep_student.id_case_mgr, iep_student.id_ei_case_mgr, iep_student.id_ser_cord, iep_personnel.id_personnel, iep_privileges."class" FROM ((iep_personnel iep_personnel JOIN iep_privileges iep_privileges ON ((((iep_personnel.id_personnel = iep_privileges.id_personnel) AND ((iep_personnel.status)::text = 'Active'::text)) AND ((iep_privileges.status)::text = 'Active'::text)))) JOIN iep_student iep_student ON ((((((iep_privileges."class" = 10) AND (iep_privileges.id_school = iep_student.id_school)) AND (iep_privileges.id_district = iep_student.id_district)) AND (iep_privileges.id_county = iep_student.id_county)) AND ((iep_personnel.id_personnel = iep_student.id_ser_cord) OR (EXISTS (SELECT 1 FROM iep_student_team st WHERE (((st.id_personnel = iep_personnel.id_personnel) AND (st.id_student = iep_student.id_student)) AND ((st.status)::text = 'Active'::text))))))))) all_matches GROUP BY all_matches.id_personnel, all_matches.id_student, all_matches.id_case_mgr, all_matches.id_ei_case_mgr, all_matches.id_ser_cord) unique_matches LEFT JOIN iep_student s ON ((unique_matches.id_stu = s.id_student)));


ALTER TABLE public.my_caseload OWNER TO postgres;

--
-- Name: my_students; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW my_students AS
    SELECT unique_matches.id_stu, unique_matches.id_personnel, unique_matches."class", unique_matches.access_type, s.id_author, s.id_author_last_mod, s.timestamp_created, s.timestamp_last_mod, s.address_street1, s.address_street2, s.address_city, s.address_state, s.address_zip, s.date_last_iep, s.date_last_iep_update, s.date_last_mdt, s.dob, s.email_address, s.ethnic_group, s.exit_code, s.xxxgender, s.grade, s.id_case_mgr, s.id_county, s.id_district, s.id_school, s.id_student, s.name_first, s.name_middle, s.name_last, s.phone, s.primary_disability, s.primary_language, s.xxxprimary_language_family, s.program_provider, s.xxxstatus, s.ward, s.ward_surrogate, s.ward_surrogate_nn, s.ward_surrogate_other, s.id_list_team, s.id_list_guardian, s.status, s.gender, s.checkout_id_user, s.checkout_time, s.date_web_notify, s.id_student_local, s.change_type, s.last_auto_update, s.transition_plan, s.pub_school_student, s.id_case_mgr_old, s.id_team_list_old, s.data_source, s.sesis_exit_code, s.program_provider_name, s.program_provider_code, s.ssn, s.medicaid, s.ei_ref_date, s.eval_date, s.medicaid_off, s.ssn_off, s.id_ser_cord, s.id_ei_case_mgr, s.transitioned, s.nonpubcounty, s.nonpubdistrict, s.nonpubschool, s.vere_ss_update, s.sesis_exit_date, s.program_provider_id_school, s.ell_student, s.unique_id_state, s.unique_id_state_duplicate, s.id_county_orphan, s.id_district_orphan, s.id_school_orphan, s.parental_placement, s.exclude_from_nssrs_report, s.alternate_assessment, (SELECT iep_personnel.name_first FROM iep_personnel WHERE (s.id_case_mgr = iep_personnel.id_personnel)) AS case_mgr_name_first, (SELECT iep_personnel.name_last FROM iep_personnel WHERE (s.id_case_mgr = iep_personnel.id_personnel)) AS case_mgr_name_last FROM ((SELECT all_matches.id_student AS id_stu, all_matches.id_personnel, min(all_matches."class") AS "class", CASE WHEN (min(all_matches."class") = 1) THEN 'ADMIN'::text WHEN (min(all_matches."class") = 2) THEN 'DM'::text WHEN (min(all_matches."class") = 3) THEN 'ADM'::text WHEN (min(all_matches."class") = 4) THEN 'SM'::text WHEN (min(all_matches."class") = 5) THEN 'ASM'::text WHEN ((min(all_matches."class") = 6) AND (all_matches.id_personnel = all_matches.id_case_mgr)) THEN 'CM'::text WHEN ((min(all_matches."class") = 6) AND (all_matches.id_personnel = all_matches.id_ei_case_mgr)) THEN 'EICM'::text WHEN ((min(all_matches."class") = 6) AND (all_matches.id_personnel = all_matches.id_ser_cord)) THEN 'SC'::text WHEN ((min(all_matches."class") = 6) AND (EXISTS (SELECT 1 FROM iep_student_team st WHERE (((st.id_personnel = st.id_personnel) AND (st.id_student = st.id_student)) AND ((st.status)::text = 'Active'::text))))) THEN 'TEAM'::text WHEN (min(all_matches."class") = 7) THEN 'TEAM'::text WHEN ((min(all_matches."class") = 8) AND (all_matches.id_personnel = all_matches.id_case_mgr)) THEN 'CM'::text WHEN ((min(all_matches."class") = 8) AND (all_matches.id_personnel = all_matches.id_ei_case_mgr)) THEN 'EICM'::text WHEN ((min(all_matches."class") = 8) AND (all_matches.id_personnel = all_matches.id_ser_cord)) THEN 'SC'::text WHEN ((min(all_matches."class") = 8) AND (EXISTS (SELECT 1 FROM iep_student_team st WHERE (((st.id_personnel = st.id_personnel) AND (st.id_student = st.id_student)) AND ((st.status)::text = 'Active'::text))))) THEN 'TEAM'::text WHEN (min(all_matches."class") = 9) THEN 'PA'::text WHEN (min(all_matches."class") = 10) THEN 'SC'::text ELSE NULL::text END AS access_type FROM ((((((SELECT iep_student.id_student, iep_student.id_case_mgr, iep_student.id_ei_case_mgr, iep_student.id_ser_cord, iep_personnel.id_personnel, iep_privileges."class" FROM ((iep_personnel iep_personnel JOIN iep_privileges iep_privileges ON ((((iep_personnel.id_personnel = iep_privileges.id_personnel) AND ((iep_personnel.status)::text = 'Active'::text)) AND ((iep_privileges.status)::text = 'Active'::text)))) JOIN iep_student iep_student ON ((iep_privileges."class" = 1))) UNION SELECT iep_student.id_student, iep_student.id_case_mgr, iep_student.id_ei_case_mgr, iep_student.id_ser_cord, iep_personnel.id_personnel, iep_privileges."class" FROM ((iep_personnel iep_personnel JOIN iep_privileges iep_privileges ON ((((iep_personnel.id_personnel = iep_privileges.id_personnel) AND ((iep_personnel.status)::text = 'Active'::text)) AND ((iep_privileges.status)::text = 'Active'::text)))) JOIN iep_student iep_student ON (((((iep_privileges."class" = 2) OR (iep_privileges."class" = 3)) AND (iep_privileges.id_district = iep_student.id_district)) AND (iep_privileges.id_county = iep_student.id_county))))) UNION SELECT iep_student.id_student, iep_student.id_case_mgr, iep_student.id_ei_case_mgr, iep_student.id_ser_cord, iep_personnel.id_personnel, iep_privileges."class" FROM ((iep_personnel iep_personnel JOIN iep_privileges iep_privileges ON ((((iep_personnel.id_personnel = iep_privileges.id_personnel) AND ((iep_personnel.status)::text = 'Active'::text)) AND ((iep_privileges.status)::text = 'Active'::text)))) JOIN iep_student iep_student ON ((((((iep_privileges."class" = 4) OR (iep_privileges."class" = 5)) AND (iep_privileges.id_school = iep_student.id_school)) AND (iep_privileges.id_district = iep_student.id_district)) AND (iep_privileges.id_county = iep_student.id_county))))) UNION SELECT iep_student.id_student, iep_student.id_case_mgr, iep_student.id_ei_case_mgr, iep_student.id_ser_cord, iep_personnel.id_personnel, iep_privileges."class" FROM ((iep_personnel iep_personnel JOIN iep_privileges iep_privileges ON ((((iep_personnel.id_personnel = iep_privileges.id_personnel) AND ((iep_personnel.status)::text = 'Active'::text)) AND ((iep_privileges.status)::text = 'Active'::text)))) JOIN iep_student iep_student ON ((((((iep_privileges."class" = 6) AND (iep_privileges.id_school = iep_student.id_school)) AND (iep_privileges.id_district = iep_student.id_district)) AND (iep_privileges.id_county = iep_student.id_county)) AND (((iep_personnel.id_personnel = iep_student.id_case_mgr) OR (iep_personnel.id_personnel = iep_student.id_ei_case_mgr)) OR (EXISTS (SELECT 1 FROM iep_student_team st WHERE (((st.id_personnel = iep_personnel.id_personnel) AND (st.id_student = iep_student.id_student)) AND ((st.status)::text = 'Active'::text))))))))) UNION SELECT iep_student.id_student, iep_student.id_case_mgr, iep_student.id_ei_case_mgr, iep_student.id_ser_cord, iep_personnel.id_personnel, iep_privileges."class" FROM ((iep_personnel iep_personnel JOIN iep_privileges iep_privileges ON ((((iep_personnel.id_personnel = iep_privileges.id_personnel) AND ((iep_personnel.status)::text = 'Active'::text)) AND ((iep_privileges.status)::text = 'Active'::text)))) JOIN iep_student iep_student ON ((((((iep_privileges."class" = 7) AND (iep_privileges.id_school = iep_student.id_school)) AND (iep_privileges.id_district = iep_student.id_district)) AND (iep_privileges.id_county = iep_student.id_county)) AND (EXISTS (SELECT 1 FROM iep_student_team st WHERE (((st.id_personnel = iep_personnel.id_personnel) AND (st.id_student = iep_student.id_student)) AND ((st.status)::text = 'Active'::text)))))))) UNION SELECT iep_student.id_student, iep_student.id_case_mgr, iep_student.id_ei_case_mgr, iep_student.id_ser_cord, iep_personnel.id_personnel, iep_privileges."class" FROM ((iep_personnel iep_personnel JOIN iep_privileges iep_privileges ON ((((iep_personnel.id_personnel = iep_privileges.id_personnel) AND ((iep_personnel.status)::text = 'Active'::text)) AND ((iep_privileges.status)::text = 'Active'::text)))) JOIN iep_student iep_student ON ((((((iep_privileges."class" = 8) AND (iep_privileges.id_school = iep_student.id_school)) AND (iep_privileges.id_district = iep_student.id_district)) AND (iep_privileges.id_county = iep_student.id_county)) AND (((iep_personnel.id_personnel = iep_student.id_ei_case_mgr) OR (iep_personnel.id_personnel = iep_student.id_ser_cord)) OR (EXISTS (SELECT 1 FROM iep_student_team st WHERE (((st.id_personnel = iep_personnel.id_personnel) AND (st.id_student = iep_student.id_student)) AND ((st.status)::text = 'Active'::text))))))))) UNION SELECT iep_student.id_student, iep_student.id_case_mgr, iep_student.id_ei_case_mgr, iep_student.id_ser_cord, iep_personnel.id_personnel, iep_privileges."class" FROM ((iep_personnel iep_personnel JOIN iep_privileges iep_privileges ON ((((iep_personnel.id_personnel = iep_privileges.id_personnel) AND ((iep_personnel.status)::text = 'Active'::text)) AND ((iep_privileges.status)::text = 'Active'::text)))) JOIN iep_student iep_student ON ((((((iep_privileges."class" = 10) AND (iep_privileges.id_school = iep_student.id_school)) AND (iep_privileges.id_district = iep_student.id_district)) AND (iep_privileges.id_county = iep_student.id_county)) AND ((iep_personnel.id_personnel = iep_student.id_ser_cord) OR (EXISTS (SELECT 1 FROM iep_student_team st WHERE (((st.id_personnel = iep_personnel.id_personnel) AND (st.id_student = iep_student.id_student)) AND ((st.status)::text = 'Active'::text))))))))) all_matches GROUP BY all_matches.id_personnel, all_matches.id_student, all_matches.id_case_mgr, all_matches.id_ei_case_mgr, all_matches.id_ser_cord) unique_matches LEFT JOIN iep_student s ON ((unique_matches.id_stu = s.id_student)));


ALTER TABLE public.my_students OWNER TO postgres;

--
-- Name: my_template_form_data; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE my_template_form_data (
    id_my_template_data serial NOT NULL,
    table_id integer,
    table_name character varying,
    table_keys character varying,
    table_data character varying,
    id_student integer,
    student_name character varying,
    date_created date,
    date_deleted date,
    status character varying,
    created_by integer,
    id_personnel integer,
    template_type character varying
);


ALTER TABLE public.my_template_form_data OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: nssrs_transfers; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nssrs_transfers (
    id_nssrs_transfers serial NOT NULL,
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    nssrs_001 character varying,
    nssrs_002 character varying,
    nssrs_003 character varying,
    nssrs_004 character varying,
    nssrs_005 character varying,
    nssrs_006 character varying,
    nssrs_007 character varying,
    nssrs_008 character varying,
    nssrs_009 character varying,
    nssrs_010 character varying,
    nssrs_011 character varying,
    nssrs_012 character varying,
    nssrs_013 character varying,
    nssrs_014 character varying,
    nssrs_015 character varying,
    nssrs_016 character varying,
    nssrs_017 character varying,
    nssrs_018 character varying,
    nssrs_019 character varying,
    nssrs_020 character varying,
    nssrs_021 character varying,
    nssrs_022 character varying,
    nssrs_023 character varying,
    nssrs_024 character varying,
    nssrs_025 character varying,
    nssrs_026 character varying,
    nssrs_027 character varying,
    nssrs_028 character varying,
    nssrs_029 character varying,
    nssrs_030 character varying,
    nssrs_031 character varying,
    nssrs_032 character varying,
    nssrs_033 character varying,
    nssrs_034 character varying,
    nssrs_035 character varying,
    nssrs_036 character varying,
    nssrs_037 character varying,
    nssrs_038 character varying,
    nssrs_039 character varying,
    nssrs_040 character varying,
    nssrs_041 character varying,
    nssrs_042 character varying,
    nssrs_043 character varying,
    nssrs_044 character varying,
    nssrs_045 character varying,
    nssrs_046 character varying,
    nssrs_047 character varying,
    nssrs_048 character varying,
    nssrs_049 character varying,
    nssrs_050 character varying,
    nssrs_051 character varying,
    nssrs_052 character varying,
    id_author character varying,
    id_author_last_mod character varying,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character varying,
    address_zip character varying,
    date_last_iep character varying,
    date_last_iep_update character varying,
    date_last_mdt character varying,
    dob character varying,
    email_address character varying,
    ethnic_group character varying,
    exit_code character varying,
    xxxgender character varying,
    grade character varying,
    id_case_mgr character varying,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    phone character varying,
    primary_disability character varying,
    primary_language character varying,
    xxxprimary_language_family character varying,
    program_provider character varying,
    xxxstatus character varying,
    ward character varying,
    ward_surrogate character varying,
    ward_surrogate_nn character varying,
    ward_surrogate_other character varying,
    id_list_team character varying,
    id_list_guardian character varying,
    status character varying,
    gender character varying,
    checkout_id_user character varying,
    checkout_time character varying,
    date_web_notify character varying,
    id_student_local character varying,
    change_type character varying,
    last_auto_update character varying,
    transition_plan character varying,
    pub_school_student character varying,
    id_case_mgr_old character varying,
    id_team_list_old character varying,
    data_source character varying,
    sesis_exit_code character varying,
    program_provider_name character varying,
    program_provider_code character varying,
    ssn character varying,
    medicaid character varying,
    ei_ref_date character varying,
    eval_date character varying,
    medicaid_off character varying,
    ssn_off character varying,
    id_ser_cord character varying,
    id_ei_case_mgr character varying,
    transitioned character varying,
    nonpubcounty character varying,
    nonpubdistrict character varying,
    nonpubschool character varying,
    vere_ss_update character varying,
    sesis_exit_date character varying,
    program_provider_id_school character varying,
    ell_student character varying,
    unique_id_state character varying,
    unique_id_state_duplicate character varying,
    id_county_orphan character varying,
    id_district_orphan character varying,
    id_school_orphan character varying,
    parental_placement character varying,
    name_student_full character varying,
    age character varying,
    address character varying,
    transfer_name_full character varying,
    exclude_from_nssrs_report boolean
);


ALTER TABLE public.nssrs_transfers OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: nssrs_transfers2; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nssrs_transfers2 (
    id_nssrs_transfers integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    nssrs_001 character varying,
    nssrs_002 character varying,
    nssrs_003 character varying,
    nssrs_004 character varying,
    nssrs_005 character varying,
    nssrs_006 character varying,
    nssrs_007 character varying,
    nssrs_008 character varying,
    nssrs_009 character varying,
    nssrs_010 character varying,
    nssrs_011 character varying,
    nssrs_012 character varying,
    nssrs_013 character varying,
    nssrs_014 character varying,
    nssrs_015 character varying,
    nssrs_016 character varying,
    nssrs_017 character varying,
    nssrs_018 character varying,
    nssrs_019 character varying,
    nssrs_020 character varying,
    nssrs_021 character varying,
    nssrs_022 character varying,
    nssrs_023 character varying,
    nssrs_024 character varying,
    nssrs_025 character varying,
    nssrs_026 character varying,
    nssrs_027 character varying,
    nssrs_028 character varying,
    nssrs_029 character varying,
    nssrs_030 character varying,
    nssrs_031 character varying,
    nssrs_032 character varying,
    nssrs_033 character varying,
    nssrs_034 character varying,
    nssrs_035 character varying,
    nssrs_036 character varying,
    nssrs_037 character varying,
    nssrs_038 character varying,
    nssrs_039 character varying,
    nssrs_040 character varying,
    nssrs_041 character varying,
    nssrs_042 character varying,
    nssrs_043 character varying,
    nssrs_044 character varying,
    nssrs_045 character varying,
    nssrs_046 character varying,
    nssrs_047 character varying,
    nssrs_048 character varying,
    nssrs_049 character varying,
    nssrs_050 character varying,
    nssrs_051 character varying,
    nssrs_052 character varying,
    id_author character varying,
    id_author_last_mod character varying,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character varying,
    address_zip character varying,
    date_last_iep character varying,
    date_last_iep_update character varying,
    date_last_mdt character varying,
    dob character varying,
    email_address character varying,
    ethnic_group character varying,
    exit_code character varying,
    xxxgender character varying,
    grade character varying,
    id_case_mgr character varying,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    phone character varying,
    primary_disability character varying,
    primary_language character varying,
    xxxprimary_language_family character varying,
    program_provider character varying,
    xxxstatus character varying,
    ward character varying,
    ward_surrogate character varying,
    ward_surrogate_nn character varying,
    ward_surrogate_other character varying,
    id_list_team character varying,
    id_list_guardian character varying,
    status character varying,
    gender character varying,
    checkout_id_user character varying,
    checkout_time character varying,
    date_web_notify character varying,
    id_student_local character varying,
    change_type character varying,
    last_auto_update character varying,
    transition_plan character varying,
    pub_school_student character varying,
    id_case_mgr_old character varying,
    id_team_list_old character varying,
    data_source character varying,
    sesis_exit_code character varying,
    program_provider_name character varying,
    program_provider_code character varying,
    ssn character varying,
    medicaid character varying,
    ei_ref_date character varying,
    eval_date character varying,
    medicaid_off character varying,
    ssn_off character varying,
    id_ser_cord character varying,
    id_ei_case_mgr character varying,
    transitioned character varying,
    nonpubcounty character varying,
    nonpubdistrict character varying,
    nonpubschool character varying,
    vere_ss_update character varying,
    sesis_exit_date character varying,
    program_provider_id_school character varying,
    ell_student character varying,
    unique_id_state character varying,
    unique_id_state_duplicate character varying,
    id_county_orphan character varying,
    id_district_orphan character varying,
    id_school_orphan character varying,
    parental_placement character varying,
    name_student_full character varying,
    age character varying,
    address character varying
);


ALTER TABLE public.nssrs_transfers2 OWNER TO postgres;

--
-- Name: nssrs_transfers_backup; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nssrs_transfers_backup (
    id_nssrs_transfers integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    nssrs_001 character varying,
    nssrs_002 character varying,
    nssrs_003 character varying,
    nssrs_004 character varying,
    nssrs_005 character varying,
    nssrs_006 character varying,
    nssrs_007 character varying,
    nssrs_008 character varying,
    nssrs_009 character varying,
    nssrs_010 character varying,
    nssrs_011 character varying,
    nssrs_012 character varying,
    nssrs_013 character varying,
    nssrs_014 character varying,
    nssrs_015 character varying,
    nssrs_016 character varying,
    nssrs_017 character varying,
    nssrs_018 character varying,
    nssrs_019 character varying,
    nssrs_020 character varying,
    nssrs_021 character varying,
    nssrs_022 character varying,
    nssrs_023 character varying,
    nssrs_024 character varying,
    nssrs_025 character varying,
    nssrs_026 character varying,
    nssrs_027 character varying,
    nssrs_028 character varying,
    nssrs_029 character varying,
    nssrs_030 character varying,
    nssrs_031 character varying,
    nssrs_032 character varying,
    nssrs_033 character varying,
    nssrs_034 character varying,
    nssrs_035 character varying,
    nssrs_036 character varying,
    nssrs_037 character varying,
    nssrs_038 character varying,
    nssrs_039 character varying,
    nssrs_040 character varying,
    nssrs_041 character varying,
    nssrs_042 character varying,
    nssrs_043 character varying,
    nssrs_044 character varying,
    nssrs_045 character varying,
    nssrs_046 character varying,
    nssrs_047 character varying,
    nssrs_048 character varying,
    nssrs_049 character varying,
    nssrs_050 character varying,
    nssrs_051 character varying,
    nssrs_052 character varying,
    id_author character varying,
    id_author_last_mod character varying,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character varying,
    address_zip character varying,
    date_last_iep character varying,
    date_last_iep_update character varying,
    date_last_mdt character varying,
    dob character varying,
    email_address character varying,
    ethnic_group character varying,
    exit_code character varying,
    xxxgender character varying,
    grade character varying,
    id_case_mgr character varying,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    phone character varying,
    primary_disability character varying,
    primary_language character varying,
    xxxprimary_language_family character varying,
    program_provider character varying,
    xxxstatus character varying,
    ward character varying,
    ward_surrogate character varying,
    ward_surrogate_nn character varying,
    ward_surrogate_other character varying,
    id_list_team character varying,
    id_list_guardian character varying,
    status character varying,
    gender character varying,
    checkout_id_user character varying,
    checkout_time character varying,
    date_web_notify character varying,
    id_student_local character varying,
    change_type character varying,
    last_auto_update character varying,
    transition_plan character varying,
    pub_school_student character varying,
    id_case_mgr_old character varying,
    id_team_list_old character varying,
    data_source character varying,
    sesis_exit_code character varying,
    program_provider_name character varying,
    program_provider_code character varying,
    ssn character varying,
    medicaid character varying,
    ei_ref_date character varying,
    eval_date character varying,
    medicaid_off character varying,
    ssn_off character varying,
    id_ser_cord character varying,
    id_ei_case_mgr character varying,
    transitioned character varying,
    nonpubcounty character varying,
    nonpubdistrict character varying,
    nonpubschool character varying,
    vere_ss_update character varying,
    sesis_exit_date character varying,
    program_provider_id_school character varying,
    ell_student character varying,
    unique_id_state character varying,
    unique_id_state_duplicate character varying,
    id_county_orphan character varying,
    id_district_orphan character varying,
    id_school_orphan character varying,
    parental_placement character varying,
    name_student_full character varying,
    age character varying,
    address character varying,
    transfer_name_full character varying,
    exclude_from_nssrs_report boolean
);


ALTER TABLE public.nssrs_transfers_backup OWNER TO postgres;

--
-- Name: old_form_versions; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW old_form_versions AS
    (SELECT iep_form_001.id_student, '001' AS form FROM iep_form_001 WHERE (iep_form_001.version_number < 2) UNION SELECT iep_form_002.id_student, '002' AS form FROM iep_form_002 WHERE (iep_form_002.version_number < 4)) UNION SELECT iep_form_004.id_student, '004' AS form FROM iep_form_004 WHERE (iep_form_004.version_number < 3);


ALTER TABLE public.old_form_versions OWNER TO postgres;

--
-- Name: personnel_short; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW personnel_short AS
    SELECT iep_personnel.name_last, iep_personnel.name_first, iep_personnel.email_address, iep_personnel.id_personnel, iep_personnel.id_personnel_master FROM iep_personnel;


ALTER TABLE public.personnel_short OWNER TO postgres;

--
-- Name: pr_backup_updated_utf8header; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE pr_backup_updated_utf8header (
    id_form_010 integer
);


ALTER TABLE public.pr_backup_updated_utf8header OWNER TO postgres;

--
-- Name: privileges_full; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW privileges_full AS
    (SELECT (((p.name_first)::text || (' '::character varying)::text) || (p.name_last)::text) AS name, p.email_address AS email, pv.id_personnel, c.name_county, NULL::text AS name_district, NULL::text AS name_school, translate_user_class_short(int4(pv."class")) AS "role" FROM iep_personnel p, iep_county c, iep_privileges pv WHERE ((((pv.id_personnel = p.id_personnel) AND (pv.id_county = c.id_county)) AND (pv.id_district IS NULL)) AND (pv.id_school IS NULL)) UNION SELECT (((p.name_first)::text || (' '::character varying)::text) || (p.name_last)::text) AS name, p.email_address AS email, pv.id_personnel, c.name_county, d.name_district, NULL::text AS name_school, translate_user_class_short(int4(pv."class")) AS "role" FROM iep_personnel p, iep_county c, iep_district d, iep_privileges pv WHERE ((((pv.id_personnel = p.id_personnel) AND (pv.id_county = c.id_county)) AND (pv.id_district = d.id_district)) AND (pv.id_county = d.id_county))) UNION SELECT (((p.name_first)::text || (' '::character varying)::text) || (p.name_last)::text) AS name, p.email_address AS email, pv.id_personnel, c.name_county, d.name_district, s.name_school, translate_user_class_short(int4(pv."class")) AS "role" FROM iep_personnel p, iep_county c, iep_district d, iep_school s, iep_privileges pv WHERE ((((((pv.id_personnel = p.id_personnel) AND (pv.id_county = c.id_county)) AND (pv.id_district = d.id_district)) AND (pv.id_school = s.id_school)) AND (pv.id_county = d.id_county)) AND (pv.id_county = s.id_county)) ORDER BY 3, 4, 5, 6;


ALTER TABLE public.privileges_full OWNER TO postgres;

--
-- Name: saved_parts; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE saved_parts (
    id_saved_part serial NOT NULL,
    table_id integer,
    table_name character varying,
    table_keys character varying,
    table_data character varying,
    id_student integer,
    student_name character varying,
    date_created date,
    date_deleted date,
    status character varying,
    created_by integer
);


ALTER TABLE public.saved_parts OWNER TO postgres;

--
-- Name: school_list_short; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW school_list_short AS
    SELECT (SELECT c.name_county FROM iep_county c WHERE (c.id_county = s.id_county)) AS name_county, (SELECT d.name_district FROM iep_district d WHERE ((d.id_district = s.id_district) AND (d.id_county = s.id_county))) AS name_district, s.name_school, (SELECT count(*) AS count FROM iep_student st WHERE (((st.id_county = s.id_county) AND (st.id_district = s.id_district)) AND (st.id_school = s.id_school))) AS student_count FROM iep_school s WHERE ((s.status)::text = ('Active'::character varying)::text) ORDER BY (SELECT c.name_county FROM iep_county c WHERE (c.id_county = s.id_county)), (SELECT d.name_district FROM iep_district d WHERE ((d.id_district = s.id_district) AND (d.id_county = s.id_county))), s.name_school;


ALTER TABLE public.school_list_short OWNER TO postgres;

--
-- Name: session_logger; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE session_logger (
    timestamp_created timestamp with time zone DEFAULT "timestamp"('now'::text) NOT NULL,
    id_session_logger serial NOT NULL,
    id_session character varying,
    session_data character varying,
    expiration character varying,
    note character varying,
    expired boolean,
    currtime integer
);


ALTER TABLE public.session_logger OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: sessions; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE sessions (
    id character(32),
    lifetime timestamp without time zone,
    data text
);


ALTER TABLE public.sessions OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: stu_help; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE stu_help (
    name_first character varying,
    name_last character varying,
    id_student integer,
    id_student_local integer,
    status character varying,
    form_count integer,
    timestamp_created timestamp with time zone,
    same_name_count integer
);


ALTER TABLE public.stu_help OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: student_chart; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE student_chart (
    timestamp_created timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    timestamp_last_mod timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    id_student_chart serial NOT NULL,
    id_student integer,
    chart_type character varying DEFAULT 'simplechart'::character varying,
    goal_desc character varying,
    label_x character varying,
    label_y character varying,
    data_x character varying,
    data_y character varying,
    data_type_x character varying DEFAULT 'date'::character varying,
    data_type_y character varying DEFAULT 'float'::character varying,
    secondary_plot_charts character varying,
    chart_color character varying DEFAULT 'black'::character varying,
    status character varying DEFAULT 'Active'::character varying,
    goal_line character varying,
    line_style character varying DEFAULT 'solid'::character varying
);


ALTER TABLE public.student_chart OWNER TO postgres;

--
-- Name: student_list; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW student_list AS
    SELECT s.name_last, s.name_first, s.id_student, (((p1.name_first)::text || (' '::character varying)::text) || (p1.name_last)::text) AS case_mgr, sc.name_school, s.id_county, s.id_district, s.id_school FROM iep_student s, iep_personnel p1, iep_school sc WHERE ((((s.id_case_mgr = p1.id_personnel) AND (s.id_county = sc.id_county)) AND (s.id_district = sc.id_district)) AND (s.id_school = sc.id_school));


ALTER TABLE public.student_list OWNER TO postgres;

--
-- Name: student_search4; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE student_search4 (
    id_student integer,
    id_student_local integer,
    "class" smallint,
    id_personnel integer,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    status character varying,
    pub_school_student boolean,
    address character varying,
    phone character varying,
    id_case_mgr integer,
    id_ei_case_mgr integer,
    id_ser_cord integer,
    access_type character varying,
    id_list_team character varying,
    unique_id_state bigint
);


ALTER TABLE public.student_search4 OWNER TO postgres;

--
-- Name: student_search4_id_student_search4_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE student_search4_id_student_search4_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.student_search4_id_student_search4_seq OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: student_search4_nostudentrec; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE student_search4_nostudentrec (
    id_student integer,
    id_student_local integer,
    "class" smallint,
    id_personnel integer,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    status character varying,
    pub_school_student boolean,
    address character varying,
    phone character varying,
    id_case_mgr integer,
    id_ei_case_mgr integer,
    id_ser_cord integer,
    access_type character varying,
    id_list_team character varying,
    unique_id_state bigint
);


ALTER TABLE public.student_search4_nostudentrec OWNER TO postgres;

--
-- Name: table_sizes; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW table_sizes AS
    SELECT c1.relname AS "Name", c1.reltuples AS "Rows", round((0.008192 * (c1.relpages)::numeric), 2) AS "Base Size", round((0.008192 * (CASE WHEN ((SELECT c2.relpages FROM pg_class c2 WHERE (c2.oid = c1.reltoastrelid)) IS NULL) THEN 0 ELSE (SELECT c2.relpages FROM pg_class c2 WHERE (c2.oid = c1.reltoastrelid)) END)::numeric), 2) AS "Toast Size", round((0.008192 * (CASE WHEN ((SELECT c3.relpages FROM pg_class c2, pg_class c3 WHERE ((c1.reltoastrelid = c2.oid) AND (c2.reltoastidxid = c3.oid))) IS NULL) THEN 0 ELSE (SELECT c3.relpages FROM pg_class c2, pg_class c3 WHERE ((c1.reltoastrelid = c2.oid) AND (c2.reltoastidxid = c3.oid))) END)::numeric), 2) AS "Toast Index Size", round(CASE WHEN ((SELECT sum(((c2.relpages)::numeric * 0.008192)) AS sum FROM pg_class c2, pg_index i WHERE ((c1.oid = i.indrelid) AND (i.indexrelid = c2.oid))) IS NULL) THEN (0)::numeric ELSE (SELECT sum(((c2.relpages)::numeric * 0.008192)) AS sum FROM pg_class c2, pg_index i WHERE ((c1.oid = i.indrelid) AND (i.indexrelid = c2.oid))) END, 2) AS index_size, round(((0.008192 * (((c1.relpages + CASE WHEN ((SELECT c2.relpages FROM pg_class c2 WHERE (c2.oid = c1.reltoastrelid)) IS NULL) THEN 0 ELSE (SELECT c2.relpages FROM pg_class c2 WHERE (c2.oid = c1.reltoastrelid)) END) + CASE WHEN ((SELECT c3.relpages FROM pg_class c2, pg_class c3 WHERE ((c1.reltoastrelid = c2.oid) AND (c2.reltoastidxid = c3.oid))) IS NULL) THEN 0 ELSE (SELECT c3.relpages FROM pg_class c2, pg_class c3 WHERE ((c1.reltoastrelid = c2.oid) AND (c2.reltoastidxid = c3.oid))) END))::numeric) + CASE WHEN ((SELECT sum(((c2.relpages)::numeric * 0.008192)) AS sum FROM pg_class c2, pg_index i WHERE ((c1.oid = i.indrelid) AND (i.indexrelid = c2.oid))) IS NULL) THEN (0)::numeric ELSE (SELECT sum(((c2.relpages)::numeric * 0.008192)) AS sum FROM pg_class c2, pg_index i WHERE ((c1.oid = i.indrelid) AND (i.indexrelid = c2.oid))) END), 2) AS "Total Size MB" FROM (pg_class c1 LEFT JOIN pg_namespace n ON ((n.oid = c1.relnamespace))) WHERE ((((c1.relkind = 'r'::"char") OR (c1.relkind = ''::"char")) AND ((n.nspname <> 'pg_catalog'::name) AND (n.nspname <> 'pg_toast'::name))) AND pg_table_is_visible(c1.oid)) ORDER BY round(((0.008192 * (((c1.relpages + CASE WHEN ((SELECT c2.relpages FROM pg_class c2 WHERE (c2.oid = c1.reltoastrelid)) IS NULL) THEN 0 ELSE (SELECT c2.relpages FROM pg_class c2 WHERE (c2.oid = c1.reltoastrelid)) END) + CASE WHEN ((SELECT c3.relpages FROM pg_class c2, pg_class c3 WHERE ((c1.reltoastrelid = c2.oid) AND (c2.reltoastidxid = c3.oid))) IS NULL) THEN 0 ELSE (SELECT c3.relpages FROM pg_class c2, pg_class c3 WHERE ((c1.reltoastrelid = c2.oid) AND (c2.reltoastidxid = c3.oid))) END))::numeric) + CASE WHEN ((SELECT sum(((c2.relpages)::numeric * 0.008192)) AS sum FROM pg_class c2, pg_index i WHERE ((c1.oid = i.indrelid) AND (i.indexrelid = c2.oid))) IS NULL) THEN (0)::numeric ELSE (SELECT sum(((c2.relpages)::numeric * 0.008192)) AS sum FROM pg_class c2, pg_index i WHERE ((c1.oid = i.indrelid) AND (i.indexrelid = c2.oid))) END), 2) DESC;


ALTER TABLE public.table_sizes OWNER TO postgres;

--
-- Name: team_by_personnel; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW team_by_personnel AS
    SELECT (((s.name_last)::text || (', '::character varying)::text) || (s.name_first)::text) AS student, (((p.name_last)::text || (', '::character varying)::text) || (p.name_first)::text) AS personnel, st.id_student, st.status FROM iep_student_team st, iep_personnel p, iep_student s WHERE ((st.id_personnel = p.id_personnel) AND (st.id_student = s.id_student)) ORDER BY (((s.name_last)::text || (', '::character varying)::text) || (s.name_first)::text), (((p.name_last)::text || (', '::character varying)::text) || (p.name_first)::text);


ALTER TABLE public.team_by_personnel OWNER TO postgres;

--
-- Name: team_by_student; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW team_by_student AS
    SELECT (((s.name_last)::text || (', '::character varying)::text) || (s.name_first)::text) AS student, (((p.name_last)::text || (', '::character varying)::text) || (p.name_first)::text) AS personnel, p."class", st.id_student, (SELECT count(*) AS count FROM iep_student_team st2 WHERE (st2.id_student = st.id_student)) AS team_count, st.status, st.date_added, st.date_removed FROM iep_student_team st, iep_personnel p, iep_student s WHERE ((st.id_personnel = p.id_personnel) AND (st.id_student = s.id_student)) ORDER BY (((s.name_last)::text || (', '::character varying)::text) || (s.name_first)::text), (((p.name_last)::text || (', '::character varying)::text) || (p.name_first)::text);


ALTER TABLE public.team_by_student OWNER TO postgres;

--
-- Name: usage_stats; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW usage_stats AS
    SELECT (SELECT count(*) AS count FROM iep_student WHERE ((iep_student.status)::text = ('Active'::character varying)::text)) AS "Active Students", ((((((((((SELECT count(*) AS count FROM iep_form_001 f, iep_student s WHERE ((f.id_student = s.id_student) AND ((s.status)::text = ('Active'::character varying)::text))) + (SELECT count(*) AS count FROM iep_form_002 f, iep_student s WHERE ((f.id_student = s.id_student) AND ((s.status)::text = ('Active'::character varying)::text)))) + (SELECT count(*) AS count FROM iep_form_003 f, iep_student s WHERE ((f.id_student = s.id_student) AND ((s.status)::text = ('Active'::character varying)::text)))) + (SELECT count(*) AS count FROM iep_form_004 f, iep_student s WHERE ((f.id_student = s.id_student) AND ((s.status)::text = ('Active'::character varying)::text)))) + (SELECT count(*) AS count FROM iep_form_005 f, iep_student s WHERE ((f.id_student = s.id_student) AND ((s.status)::text = ('Active'::character varying)::text)))) + (SELECT count(*) AS count FROM iep_form_006 f, iep_student s WHERE ((f.id_student = s.id_student) AND ((s.status)::text = ('Active'::character varying)::text)))) + (SELECT count(*) AS count FROM iep_form_007 f, iep_student s WHERE ((f.id_student = s.id_student) AND ((s.status)::text = ('Active'::character varying)::text)))) + (SELECT count(*) AS count FROM iep_form_008 f, iep_student s WHERE ((f.id_student = s.id_student) AND ((s.status)::text = ('Active'::character varying)::text)))) + (SELECT count(*) AS count FROM iep_form_009 f, iep_student s WHERE ((f.id_student = s.id_student) AND ((s.status)::text = ('Active'::character varying)::text)))) + (SELECT count(*) AS count FROM iep_form_010 f, iep_student s WHERE ((f.id_student = s.id_student) AND ((s.status)::text = ('Active'::character varying)::text)))) AS "Active Forms", (SELECT count(*) AS count FROM iep_personnel WHERE ((iep_personnel.status)::text = ('Active'::character varying)::text)) AS "Active Personnel", (SELECT count(*) AS count FROM iep_district WHERE ((iep_district.status)::text = ('Active'::character varying)::text)) AS "Active Districts", (SELECT count(*) AS count FROM iep_school WHERE ((iep_school.status)::text = ('Active'::character varying)::text)) AS "Active Schools";


ALTER TABLE public.usage_stats OWNER TO postgres;

--
-- Name: view_all_student; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW view_all_student AS
    SELECT iep_student.id_author, iep_student.id_author_last_mod, iep_student.timestamp_created, iep_student.timestamp_last_mod, iep_student.address_street1, iep_student.address_street2, iep_student.address_city, iep_student.address_state, iep_student.address_zip, iep_student.date_last_iep, iep_student.date_last_iep_update, iep_student.date_last_mdt, iep_student.dob, iep_student.email_address, iep_student.ethnic_group, iep_student.exit_code, iep_student.xxxgender, iep_student.grade, iep_student.id_case_mgr, iep_student.id_county, iep_student.id_district, iep_student.id_school, iep_student.id_student, iep_student.name_first, iep_student.name_middle, iep_student.name_last, iep_student.phone, iep_student.primary_disability, iep_student.primary_language, iep_student.xxxprimary_language_family, iep_student.program_provider, iep_student.xxxstatus, iep_student.ward, iep_student.ward_surrogate, iep_student.ward_surrogate_nn, iep_student.ward_surrogate_other, iep_student.id_list_team, iep_student.id_list_guardian, iep_student.status, iep_student.gender, iep_student.checkout_id_user, iep_student.checkout_time, iep_student.date_web_notify, iep_student.id_student_local, iep_student.change_type, iep_student.last_auto_update, iep_student.transition_plan, iep_student.pub_school_student, iep_student.id_case_mgr_old, iep_student.id_team_list_old, iep_student.data_source, iep_student.sesis_exit_code, iep_student.program_provider_name, iep_student.program_provider_code, iep_student.ssn, iep_student.medicaid, iep_student.ei_ref_date, iep_student.eval_date, iep_student.medicaid_off, iep_student.ssn_off, iep_student.id_ser_cord, iep_student.id_ei_case_mgr, iep_student.transitioned, iep_student.nonpubcounty, iep_student.nonpubdistrict, iep_student.nonpubschool, iep_student.vere_ss_update, iep_student.sesis_exit_date, iep_student.program_provider_id_school, iep_student.ell_student, iep_student.unique_id_state, iep_student.unique_id_state_duplicate, iep_student.id_county_orphan, iep_student.id_district_orphan, iep_student.id_school_orphan, iep_student.parental_placement, iep_student.exclude_from_nssrs_report, CASE WHEN (iep_student.name_middle IS NULL) THEN (((((iep_student.name_first)::text || ' '::text) || (iep_student.name_middle)::text) || ' '::text) || (iep_student.name_last)::text) ELSE (((iep_student.name_first)::text || ' '::text) || (iep_student.name_last)::text) END AS name_student, CASE WHEN (iep_student.id_student_local IS NULL) THEN iep_student.id_student ELSE iep_student.id_student_local END AS student_display, date_part('year'::text, age((iep_student.dob)::timestamp with time zone)) AS age, CASE WHEN (date_trunc('day'::text, (date_trunc('day'::text, (iep_student.dob)::timestamp with time zone) + '15 years 1 day'::interval)) <= date_trunc('day'::text, now())) THEN 'true'::text ELSE 'false'::text END AS force_tran_plan, CASE WHEN (iep_student.address_street2 IS NOT NULL) THEN (((((((((iep_student.address_street1)::text || ' '::text) || (iep_student.address_street2)::text) || ' '::text) || (iep_student.address_city)::text) || ', '::text) || (iep_student.address_state)::text) || ' '::text) || (iep_student.address_zip)::text) ELSE (((((((iep_student.address_street1)::text || ' '::text) || (iep_student.address_city)::text) || ', '::text) || (iep_student.address_state)::text) || ' '::text) || (iep_student.address_zip)::text) END AS address, get_most_recent_mdt_disability_primary(iep_student.id_student) AS most_recent_dis, get_most_recent_mdt_date_conference(iep_student.id_student) AS most_recent_date_mdt, get_most_recent_iep_date_conference(iep_student.id_student) AS most_recent_date_iep, get_name_county((iep_student.id_county)::text) AS name_county, get_name_district((iep_student.id_county)::text, (iep_student.id_district)::text) AS name_district, get_name_school((iep_student.id_county)::text, (iep_student.id_district)::text, (iep_student.id_school)::text) AS name_school, get_name_personnel(iep_student.id_case_mgr) AS name_case_mgr, get_name_personnel(iep_student.id_ei_case_mgr) AS name_ei_case_mgr, get_name_personnel(iep_student.id_ser_cord) AS name_ser_cord, get_guardian_names(iep_student.id_student) AS parents FROM iep_student;


ALTER TABLE public.view_all_student OWNER TO postgres;

--
-- Name: view_student; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW view_student AS
    SELECT iep_student.id_author, iep_student.id_author_last_mod, iep_student.timestamp_created, iep_student.timestamp_last_mod, iep_student.address_street1, iep_student.address_street2, iep_student.address_city, iep_student.address_state, iep_student.address_zip, iep_student.date_last_iep, iep_student.date_last_iep_update, iep_student.date_last_mdt, iep_student.dob, iep_student.email_address, iep_student.ethnic_group, iep_student.exit_code, iep_student.xxxgender, iep_student.grade, iep_student.id_case_mgr, iep_student.id_county, iep_student.id_district, iep_student.id_school, iep_student.id_student, iep_student.name_first, iep_student.name_middle, iep_student.name_last, iep_student.phone, iep_student.primary_disability, iep_student.primary_language, iep_student.xxxprimary_language_family, iep_student.program_provider, iep_student.xxxstatus, iep_student.ward, iep_student.ward_surrogate, iep_student.ward_surrogate_nn, iep_student.ward_surrogate_other, iep_student.id_list_team, iep_student.id_list_guardian, iep_student.status, iep_student.gender, iep_student.checkout_id_user, iep_student.checkout_time, iep_student.date_web_notify, iep_student.id_student_local, iep_student.change_type, iep_student.last_auto_update, iep_student.transition_plan, iep_student.pub_school_student, iep_student.id_case_mgr_old, iep_student.id_team_list_old, iep_student.data_source, iep_student.sesis_exit_code, iep_student.program_provider_name, iep_student.program_provider_code, iep_student.ssn, iep_student.medicaid, iep_student.ei_ref_date, iep_student.eval_date, iep_student.medicaid_off, iep_student.ssn_off, iep_student.id_ser_cord, iep_student.id_ei_case_mgr, iep_student.transitioned, iep_student.nonpubcounty, iep_student.nonpubdistrict, iep_student.nonpubschool, iep_student.vere_ss_update, iep_student.sesis_exit_date, iep_student.program_provider_id_school, iep_student.ell_student, iep_student.unique_id_state, iep_student.unique_id_state_duplicate, iep_student.id_county_orphan, iep_student.id_district_orphan, iep_student.id_school_orphan, iep_student.parental_placement, iep_student.exclude_from_nssrs_report, CASE WHEN (iep_student.name_middle IS NULL) THEN (((((iep_student.name_first)::text || ' '::text) || (iep_student.name_middle)::text) || ' '::text) || (iep_student.name_last)::text) ELSE (((iep_student.name_first)::text || ' '::text) || (iep_student.name_last)::text) END AS name_student, CASE WHEN (iep_student.id_student_local IS NULL) THEN iep_student.id_student ELSE iep_student.id_student_local END AS student_display, date_part('year'::text, age((iep_student.dob)::timestamp with time zone)) AS age, CASE WHEN (date_trunc('day'::text, (date_trunc('day'::text, (iep_student.dob)::timestamp with time zone) + '15 years 1 day'::interval)) <= date_trunc('day'::text, now())) THEN 'true'::text ELSE 'false'::text END AS force_tran_plan, CASE WHEN (iep_student.address_street2 IS NOT NULL) THEN (((((((((iep_student.address_street1)::text || ' '::text) || (iep_student.address_street2)::text) || ' '::text) || (iep_student.address_city)::text) || ', '::text) || (iep_student.address_state)::text) || ' '::text) || (iep_student.address_zip)::text) ELSE (((((((iep_student.address_street1)::text || ' '::text) || (iep_student.address_city)::text) || ', '::text) || (iep_student.address_state)::text) || ' '::text) || (iep_student.address_zip)::text) END AS address, get_most_recent_mdt_disability_primary(iep_student.id_student) AS most_recent_dis, get_most_recent_mdt_date_conference(iep_student.id_student) AS most_recent_date_mdt, get_most_recent_iep_date_conference(iep_student.id_student) AS most_recent_date_iep, get_name_county((iep_student.id_county)::text) AS name_county, get_name_district((iep_student.id_county)::text, (iep_student.id_district)::text) AS name_district, get_name_school((iep_student.id_county)::text, (iep_student.id_district)::text, (iep_student.id_school)::text) AS name_school, get_name_personnel(iep_student.id_case_mgr) AS name_case_mgr, get_name_personnel(iep_student.id_ei_case_mgr) AS name_ei_case_mgr, get_name_personnel(iep_student.id_ser_cord) AS name_ser_cord, get_guardian_names(iep_student.id_student) AS parents FROM iep_student WHERE ((iep_student.status)::text = 'Active'::text);


ALTER TABLE public.view_student OWNER TO postgres;

--
-- Name: viewrelationsizes; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW viewrelationsizes AS
    SELECT c1.relname AS "Name", c1.reltuples AS "Rows", round((((current_setting('block_size'::text))::numeric / 1000000.0) * (c1.relpages)::numeric), 2) AS "Base Size", round((((current_setting('block_size'::text))::numeric / 1000000.0) * (COALESCE((SELECT c2.relpages FROM pg_class c2 WHERE (c2.oid = c1.reltoastrelid)), 0))::numeric), 2) AS "Toast Size", round((((current_setting('block_size'::text))::numeric / 1000000.0) * (COALESCE((SELECT c3.relpages FROM pg_class c2, pg_class c3 WHERE ((c1.reltoastrelid = c2.oid) AND (c2.reltoastidxid = c3.oid))), 0))::numeric), 2) AS "Toast Index Size", round(COALESCE((SELECT sum(((c2.relpages)::numeric * ((current_setting('block_size'::text))::numeric / 1000000.0))) AS sum FROM pg_class c2, pg_index i WHERE ((c1.oid = i.indrelid) AND (i.indexrelid = c2.oid))), (0)::numeric), 2) AS index_size, round(((((current_setting('block_size'::text))::numeric / 1000000.0) * (((c1.relpages)::numeric + (COALESCE((SELECT c2.relpages FROM pg_class c2 WHERE (c2.oid = c1.reltoastrelid)), 0))::numeric) + (COALESCE((SELECT c3.relpages FROM pg_class c2, pg_class c3 WHERE ((c1.reltoastrelid = c2.oid) AND (c2.reltoastidxid = c3.oid))), 0))::numeric)) + COALESCE((SELECT sum(((c2.relpages)::numeric * ((current_setting('block_size'::text))::numeric / 1000000.0))) AS sum FROM pg_class c2, pg_index i WHERE ((c1.oid = i.indrelid) AND (i.indexrelid = c2.oid))), (0)::numeric)), 2) AS "Total Size MB" FROM (pg_class c1 LEFT JOIN pg_namespace n ON ((n.oid = c1.relnamespace))) WHERE (((((c1.relkind = 'r'::"char") OR (c1.relkind = ''::"char")) AND (n.nspname <> 'pg_catalog'::name)) AND (n.nspname <> 'pg_toast'::name)) AND pg_table_is_visible(c1.oid)) ORDER BY round(((((current_setting('block_size'::text))::numeric / 1000000.0) * (((c1.relpages)::numeric + (COALESCE((SELECT c2.relpages FROM pg_class c2 WHERE (c2.oid = c1.reltoastrelid)), 0))::numeric) + (COALESCE((SELECT c3.relpages FROM pg_class c2, pg_class c3 WHERE ((c1.reltoastrelid = c2.oid) AND (c2.reltoastidxid = c3.oid))), 0))::numeric)) + COALESCE((SELECT sum(((c2.relpages)::numeric * ((current_setting('block_size'::text))::numeric / 1000000.0))) AS sum FROM pg_class c2, pg_index i WHERE ((c1.oid = i.indrelid) AND (i.indexrelid = c2.oid))), (0)::numeric)), 2) DESC;


ALTER TABLE public.viewrelationsizes OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: x_backup_np_parent; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE x_backup_np_parent (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character(2),
    address_zip character varying,
    email_address character varying,
    id_guardian integer,
    id_student integer,
    name_first character varying,
    name_last character varying,
    name_middle character varying,
    relation_to_child character varying,
    xxxprimary_language character varying,
    phone_home character varying,
    phone_work character varying,
    status character varying,
    user_name character varying,
    "password" character varying,
    password_reset_flag boolean,
    date_last_pw_change timestamp with time zone,
    date_expiration date,
    checkout_id_user integer,
    checkout_time integer,
    online_access character varying,
    id_student_local integer,
    id_guardian_local integer,
    last_auto_update timestamp with time zone,
    last_login timestamp with time zone,
    data_source text
);


ALTER TABLE public.x_backup_np_parent OWNER TO postgres;

--
-- Name: x_backup_np_student; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE x_backup_np_student (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character varying,
    address_zip character varying,
    date_last_iep date,
    date_last_iep_update date,
    date_last_mdt date,
    dob date,
    email_address character varying,
    ethnic_group character(1),
    exit_code character varying,
    xxxgender character(1),
    grade character varying,
    id_case_mgr integer,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    phone character varying,
    primary_disability character varying,
    primary_language character varying,
    xxxprimary_language_family character varying,
    program_provider character varying,
    xxxstatus character(1),
    ward boolean,
    ward_surrogate boolean,
    ward_surrogate_nn boolean,
    ward_surrogate_other character varying,
    id_list_team character varying,
    id_list_guardian character varying,
    status character varying,
    gender character varying,
    checkout_id_user integer,
    checkout_time integer,
    date_web_notify date,
    id_student_local integer,
    change_type text,
    last_auto_update timestamp with time zone,
    transition_plan boolean,
    pub_school_student boolean,
    id_case_mgr_old integer,
    id_team_list_old text,
    data_source text,
    sesis_exit_code smallint,
    program_provider_name character varying,
    program_provider_code character varying,
    ssn character varying,
    medicaid character varying,
    ei_ref_date character varying,
    eval_date character varying,
    medicaid_off boolean,
    ssn_off boolean,
    id_ser_cord integer,
    id_ei_case_mgr integer,
    transitioned boolean,
    nonpubcounty character(2),
    nonpubdistrict character(4),
    nonpubschool character(3),
    vere_ss_update boolean,
    sesis_exit_date date,
    program_provider_id_school character varying,
    ell_student boolean,
    unique_id_state bigint,
    unique_id_state_duplicate bigint
);


ALTER TABLE public.x_backup_np_student OWNER TO postgres;

--
-- Name: x_backup_ppn_parent; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE x_backup_ppn_parent (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character(2),
    address_zip character varying,
    email_address character varying,
    id_guardian integer,
    id_student integer,
    name_first character varying,
    name_last character varying,
    name_middle character varying,
    relation_to_child character varying,
    xxxprimary_language character varying,
    phone_home character varying,
    phone_work character varying,
    status character varying,
    user_name character varying,
    "password" character varying,
    password_reset_flag boolean,
    date_last_pw_change timestamp with time zone,
    date_expiration date,
    checkout_id_user integer,
    checkout_time integer,
    online_access character varying,
    id_student_local integer,
    id_guardian_local integer,
    last_auto_update timestamp with time zone,
    last_login timestamp with time zone,
    data_source text
);


ALTER TABLE public.x_backup_ppn_parent OWNER TO postgres;

--
-- Name: x_backup_ppn_student; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE x_backup_ppn_student (
    id_author integer,
    id_author_last_mod integer,
    timestamp_created timestamp with time zone,
    timestamp_last_mod timestamp with time zone,
    address_street1 character varying,
    address_street2 character varying,
    address_city character varying,
    address_state character varying,
    address_zip character varying,
    date_last_iep date,
    date_last_iep_update date,
    date_last_mdt date,
    dob date,
    email_address character varying,
    ethnic_group character(1),
    exit_code character varying,
    xxxgender character(1),
    grade character varying,
    id_case_mgr integer,
    id_county character(2),
    id_district character(4),
    id_school character(3),
    id_student integer,
    name_first character varying,
    name_middle character varying,
    name_last character varying,
    phone character varying,
    primary_disability character varying,
    primary_language character varying,
    xxxprimary_language_family character varying,
    program_provider character varying,
    xxxstatus character(1),
    ward boolean,
    ward_surrogate boolean,
    ward_surrogate_nn boolean,
    ward_surrogate_other character varying,
    id_list_team character varying,
    id_list_guardian character varying,
    status character varying,
    gender character varying,
    checkout_id_user integer,
    checkout_time integer,
    date_web_notify date,
    id_student_local integer,
    change_type text,
    last_auto_update timestamp with time zone,
    transition_plan boolean,
    pub_school_student boolean,
    id_case_mgr_old integer,
    id_team_list_old text,
    data_source text,
    sesis_exit_code smallint,
    program_provider_name character varying,
    program_provider_code character varying,
    ssn character varying,
    medicaid character varying,
    ei_ref_date character varying,
    eval_date character varying,
    medicaid_off boolean,
    ssn_off boolean,
    id_ser_cord integer,
    id_ei_case_mgr integer,
    transitioned boolean,
    nonpubcounty character(2),
    nonpubdistrict character(4),
    nonpubschool character(3),
    vere_ss_update boolean,
    sesis_exit_date date,
    program_provider_id_school character varying,
    ell_student boolean,
    unique_id_state bigint,
    unique_id_state_duplicate bigint
);


ALTER TABLE public.x_backup_ppn_student OWNER TO postgres;

--
-- Name: iep_county_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_county
    ADD CONSTRAINT iep_county_pkey PRIMARY KEY (id_county);


--
-- Name: iep_district_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_district
    ADD CONSTRAINT iep_district_pkey PRIMARY KEY (id_county, id_district);


--
-- Name: iep_form_001_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_form_001
    ADD CONSTRAINT iep_form_001_pkey PRIMARY KEY (id_form_001);


--
-- Name: iep_form_002_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_form_002
    ADD CONSTRAINT iep_form_002_pkey PRIMARY KEY (id_form_002);


--
-- Name: iep_form_003_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_form_003
    ADD CONSTRAINT iep_form_003_pkey PRIMARY KEY (id_form_003);


--
-- Name: iep_form_004_goal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_form_004_goal
    ADD CONSTRAINT iep_form_004_goal_pkey PRIMARY KEY (id_form_004_goal);


--
-- Name: iep_form_004_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_form_004
    ADD CONSTRAINT iep_form_004_pkey PRIMARY KEY (id_form_004);


--
-- Name: iep_form_005_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_form_005
    ADD CONSTRAINT iep_form_005_pkey PRIMARY KEY (id_form_005);


--
-- Name: iep_form_006_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_form_006
    ADD CONSTRAINT iep_form_006_pkey PRIMARY KEY (id_form_006);


--
-- Name: iep_form_007_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_form_007
    ADD CONSTRAINT iep_form_007_pkey PRIMARY KEY (id_form_007);


--
-- Name: iep_form_008_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_form_008
    ADD CONSTRAINT iep_form_008_pkey PRIMARY KEY (id_form_008);


--
-- Name: iep_form_009_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_form_009
    ADD CONSTRAINT iep_form_009_pkey PRIMARY KEY (id_form_009);


--
-- Name: iep_form_011_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_form_011
    ADD CONSTRAINT iep_form_011_pkey PRIMARY KEY (id_form_011);


--
-- Name: iep_form_012_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_form_012
    ADD CONSTRAINT iep_form_012_pkey PRIMARY KEY (id_form_012);


--
-- Name: iep_form_014_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_form_014
    ADD CONSTRAINT iep_form_014_pkey PRIMARY KEY (id_form_014);


--
-- Name: iep_form_015_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_form_015
    ADD CONSTRAINT iep_form_015_pkey PRIMARY KEY (id_form_015);


--
-- Name: iep_form_016_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_form_016
    ADD CONSTRAINT iep_form_016_pkey PRIMARY KEY (id_form_016);


--
-- Name: iep_guardian_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_guardian
    ADD CONSTRAINT iep_guardian_pkey PRIMARY KEY (id_guardian);


--
-- Name: iep_log_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_log_old
    ADD CONSTRAINT iep_log_pkey PRIMARY KEY (id_log);


--
-- Name: iep_log_pkey2; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_log
    ADD CONSTRAINT iep_log_pkey2 PRIMARY KEY (id_log);


--
-- Name: iep_message_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_message
    ADD CONSTRAINT iep_message_pkey PRIMARY KEY (id_message);


--
-- Name: iep_personnel_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_personnel
    ADD CONSTRAINT iep_personnel_pkey PRIMARY KEY (id_personnel);


--
-- Name: iep_rule51_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_rule51
    ADD CONSTRAINT iep_rule51_pkey PRIMARY KEY (id_rule51);


--
-- Name: iep_school_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_school
    ADD CONSTRAINT iep_school_pkey PRIMARY KEY (id_county, id_district, id_school);


--
-- Name: iep_student_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_student
    ADD CONSTRAINT iep_student_pkey PRIMARY KEY (id_student);


--
-- Name: iep_student_team_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_student_team
    ADD CONSTRAINT iep_student_team_pkey PRIMARY KEY (id_student_team);


--
-- Name: iep_survey_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_survey
    ADD CONSTRAINT iep_survey_pkey PRIMARY KEY (id_survey);


--
-- Name: iep_transfer_request_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY iep_transfer_request
    ADD CONSTRAINT iep_transfer_request_pkey PRIMARY KEY (id_transfer_request);


--
-- Name: data_source_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX data_source_idx ON iep_student USING btree (data_source);


--
-- Name: district_from_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX district_from_key ON iep_transfer_request USING btree (id_county_from, id_district_from);


--
-- Name: district_to_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX district_to_key ON iep_transfer_request USING btree (id_county_to, id_district_to);


--
-- Name: form_001_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_001_student_idx ON iep_form_001 USING btree (id_student);


--
-- Name: form_002_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_002_student_idx ON iep_form_002 USING btree (id_student);


--
-- Name: form_002_supplemental_form_id_form_002; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_002_supplemental_form_id_form_002 ON form_002_supplemental_form USING btree (id_form_002);


--
-- Name: form_002_team_member_id_form_002; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_002_team_member_id_form_002 ON form_002_team_member USING btree (id_form_002);


--
-- Name: form_003_agency_representitive_id_form_003_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_003_agency_representitive_id_form_003_idx ON form_003_agency_representitive USING btree (id_form_003);


--
-- Name: form_003_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_003_student_idx ON iep_form_003 USING btree (id_student);


--
-- Name: form_004_assist_tech_id_form_004_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_004_assist_tech_id_form_004_idx ON form_004_assist_tech USING btree (id_form_004);


--
-- Name: form_004_goal_progress_primary_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_004_goal_progress_primary_idx ON iep_form_004_goal_progress USING btree (id_goal_progress);


--
-- Name: form_004_oid_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_004_oid_idx ON iep_form_004 USING btree (oid);


--
-- Name: form_004_prog_mods_id_form_004_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_004_prog_mods_id_form_004_idx ON form_004_prog_mods USING btree (id_form_004);


--
-- Name: form_004_progress_form_004_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_004_progress_form_004_idx ON iep_form_004_goal_progress USING btree (id_form_004);


--
-- Name: form_004_progress_form_010_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_004_progress_form_010_idx ON iep_form_004_goal_progress USING btree (id_form_010);


--
-- Name: form_004_progress_goal_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_004_progress_goal_idx ON iep_form_004_goal_progress USING btree (id_form_004_goal);


--
-- Name: form_004_related_service_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_004_related_service_idx ON form_004_related_service USING btree (id_form_004);


--
-- Name: form_004_school_supp_id_form_004_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_004_school_supp_id_form_004_idx ON form_004_school_supp USING btree (id_form_004);


--
-- Name: form_004_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_004_student_idx ON iep_form_004 USING btree (id_student);


--
-- Name: form_004_supp_service_id_form_004_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_004_supp_service_id_form_004_idx ON form_004_supp_service USING btree (id_form_004);


--
-- Name: form_005_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_005_student_idx ON iep_form_005 USING btree (id_student);


--
-- Name: form_006_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_006_student_idx ON iep_form_006 USING btree (id_student);


--
-- Name: form_007_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_007_student_idx ON iep_form_007 USING btree (id_student);


--
-- Name: form_008_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_008_student_idx ON iep_form_008 USING btree (id_student);


--
-- Name: form_009_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_009_student_idx ON iep_form_009 USING btree (id_student);


--
-- Name: form_010_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_010_student_idx ON iep_form_010 USING btree (id_student);


--
-- Name: form_011_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_011_student_idx ON iep_form_011 USING btree (id_student);


--
-- Name: form_012_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_012_student_idx ON iep_form_012 USING btree (id_student);


--
-- Name: form_013_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_013_student_idx ON iep_form_013 USING btree (id_student);


--
-- Name: form_014_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_014_student_idx ON iep_form_014 USING btree (id_student);


--
-- Name: form_015_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_015_student_idx ON iep_form_015 USING btree (id_student);


--
-- Name: form_016_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_016_student_idx ON iep_form_016 USING btree (id_student);


--
-- Name: form_017_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX form_017_student_idx ON iep_form_017 USING btree (id_student);


--
-- Name: goal_004_oid_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX goal_004_oid_idx ON iep_form_004_goal USING btree (oid);


--
-- Name: goal_domain_code_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX goal_domain_code_idx ON iep_goal_domain USING btree (domain_code);


--
-- Name: goal_id_form_004_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX goal_id_form_004_idx ON iep_form_004_goal USING btree (id_form_004);


--
-- Name: goal_objective_code_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX goal_objective_code_idx ON iep_goal_objective USING btree (objective_code);


--
-- Name: goal_progress_oid_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX goal_progress_oid_index ON iep_form_004_goal_progress USING btree (oid);


--
-- Name: goal_student_id_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX goal_student_id_idx ON iep_form_004_goal USING btree (id_student);


--
-- Name: goal_subtopic_topic_code_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX goal_subtopic_topic_code_idx ON iep_goal_subtopic USING btree (topic_code);


--
-- Name: goal_topic_domain_code_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX goal_topic_domain_code_idx ON iep_goal_topic USING btree (domain_code);


--
-- Name: guardian_auto_update_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX guardian_auto_update_idx ON iep_guardian USING btree (last_auto_update);


--
-- Name: guardian_import_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX guardian_import_idx ON iep_guardian USING btree (id_guardian_local, id_student_local, data_source);


--
-- Name: guardian_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX guardian_index ON iep_guardian_lps_bu_20070831 USING btree (id_guardian);


--
-- Name: id_author_log_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_author_log_idx ON iep_log_old USING btree (id_author);


--
-- Name: id_author_log_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_author_log_idx2 ON iep_log USING btree (id_author);


--
-- Name: id_county_from; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_county_from ON iep_transfer_request USING btree (id_county_from);


--
-- Name: id_county_to; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_county_to ON iep_transfer_request USING btree (id_county_to);


--
-- Name: id_district_from; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_district_from ON iep_transfer_request USING btree (id_district_from);


--
-- Name: id_district_to; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_district_to ON iep_transfer_request USING btree (id_district_to);


--
-- Name: id_form_010_iep_form_010_ukey; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX id_form_010_iep_form_010_ukey ON iep_form_010 USING btree (id_form_010);


--
-- Name: id_form_010_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_form_010_index ON pr_backup_updated_utf8header USING btree (id_form_010);


--
-- Name: id_iep_team_member; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_iep_team_member ON iep_team_member USING btree (id_iep_team_member);


--
-- Name: id_pers_priv_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_pers_priv_idx ON iep_privileges USING btree (id_personnel);


--
-- Name: id_privileges_unique; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX id_privileges_unique ON iep_privileges USING btree (id_privileges);


--
-- Name: id_school_from; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_school_from ON iep_transfer_request USING btree (id_school_from);


--
-- Name: id_school_to; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_school_to ON iep_transfer_request USING btree (id_school_to);


--
-- Name: id_session_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_session_idx ON iep_session USING btree (id_session);


--
-- Name: id_student_guardian_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_student_guardian_idx ON iep_guardian USING btree (id_student);


--
-- Name: id_student_log_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_student_log_idx ON iep_log_old USING btree (id_student);


--
-- Name: id_student_log_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_student_log_idx2 ON iep_log USING btree (id_student);


--
-- Name: id_user_session; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_user_session ON iep_session USING btree (id_user);


--
-- Name: iep_absence_id_form_003_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_absence_id_form_003_idx ON iep_absence USING btree (id_form_003);


--
-- Name: iep_accom_checklist_id_accom_checklist_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_accom_checklist_id_accom_checklist_idx ON iep_accom_checklist USING btree (id_accom_checklist);


--
-- Name: iep_accom_checklist_id_form_004_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_accom_checklist_id_form_004_idx ON iep_accom_checklist USING btree (id_form_004);


--
-- Name: iep_county_id_county; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_county_id_county ON iep_county USING btree (id_county);


--
-- Name: iep_district_id_county; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_district_id_county ON iep_district USING btree (id_county);


--
-- Name: iep_district_id_district; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_district_id_district ON iep_district USING btree (id_district);


--
-- Name: iep_form_004_secondary_goal_id_form_004_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_form_004_secondary_goal_id_form_004_idx ON iep_form_004_secondary_goal USING btree (id_form_004);


--
-- Name: iep_form_004_supp_id_form_004_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_form_004_supp_id_form_004_idx ON iep_form_004_supp USING btree (id_form_004);


--
-- Name: iep_form_010_id_form_004; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_form_010_id_form_004 ON iep_form_010 USING btree (id_form_004);


--
-- Name: iep_form_013_id_form_013_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX iep_form_013_id_form_013_key ON iep_form_013 USING btree (id_form_013);


--
-- Name: iep_form_017_id_form_017_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX iep_form_017_id_form_017_key ON iep_form_017 USING btree (id_form_017);


--
-- Name: iep_guardian_student_local_id_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_guardian_student_local_id_idx ON iep_guardian USING btree (id_student_local);


--
-- Name: iep_guardian_user_name_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_guardian_user_name_idx ON iep_guardian USING btree (user_name);


--
-- Name: iep_log_rel_record_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_log_rel_record_idx ON iep_log_old USING btree (id_rel_record);


--
-- Name: iep_log_rel_record_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_log_rel_record_idx2 ON iep_log USING btree (id_rel_record);


--
-- Name: iep_messages_id_messages_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX iep_messages_id_messages_key ON iep_messages USING btree (id_messages);


--
-- Name: iep_personnel_id_master; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_personnel_id_master ON iep_personnel USING btree (id_personnel_master);


--
-- Name: iep_personnel_name_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_personnel_name_idx ON iep_personnel USING btree (id_personnel, name_first, name_last);


--
-- Name: iep_personnel_user_name_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_personnel_user_name_idx ON iep_guardian USING btree (user_name);


--
-- Name: iep_privileges_id_privileges_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_privileges_id_privileges_idx ON iep_privileges USING btree (id_privileges);


--
-- Name: iep_school_accsprv; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_school_accsprv ON iep_school USING btree (id_account_sprv);


--
-- Name: iep_school_id_district; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_school_id_district ON iep_school USING btree (id_district);


--
-- Name: iep_school_id_school; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_school_id_school ON iep_school USING btree (id_school);


--
-- Name: iep_school_mgr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_school_mgr ON iep_school USING btree (id_school_mgr);


--
-- Name: iep_school_no_id_iep_school_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX iep_school_no_id_iep_school_key ON iep_school_non_public USING btree (id_iep_school_non_public);


--
-- Name: iep_school_search_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_school_search_idx ON iep_school_name USING btree (id_county, id_district, id_school);


--
-- Name: iep_session_status_token_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_session_status_token_key ON iep_session USING btree (status, token_key);


--
-- Name: iep_session_token_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_session_token_key ON iep_session USING btree (token_key);


--
-- Name: iep_student_cty_district_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_student_cty_district_idx ON iep_student USING btree (id_county, id_district);


--
-- Name: iep_student_exclude_nssrs_rpt; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_student_exclude_nssrs_rpt ON iep_student USING btree (exclude_from_nssrs_report);


--
-- Name: iep_student_local_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_student_local_idx ON iep_student USING btree (id_student_local);


--
-- Name: iep_student_team_id_personnel; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_student_team_id_personnel ON iep_student_team USING btree (id_personnel);


--
-- Name: iep_supp_form_id_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_supp_form_id_idx ON iep_supp USING btree (id_form_id);


--
-- Name: iep_supp_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_supp_student_idx ON iep_supp USING btree (id_student);


--
-- Name: iep_survey_id_survey_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iep_survey_id_survey_key ON iep_survey USING btree (id_survey);


--
-- Name: ifsp_goals_id_ifsp_goals_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ifsp_goals_id_ifsp_goals_key ON ifsp_goals USING btree (id_ifsp_goals);


--
-- Name: ifsp_parents_id_ifsp_parent_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ifsp_parents_id_ifsp_parent_key ON ifsp_parents USING btree (id_ifsp_parents);


--
-- Name: ifsp_services_id_ifsp_servi_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ifsp_services_id_ifsp_servi_key ON ifsp_services USING btree (id_ifsp_services);


--
-- Name: ifsp_team_mem_id_ifsp_team__key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ifsp_team_mem_id_ifsp_team__key ON ifsp_team_members USING btree (id_ifsp_team_members);


--
-- Name: ifsp_team_oth_id_ifsp_team__key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ifsp_team_oth_id_ifsp_team__key ON ifsp_team_other USING btree (id_ifsp_team_other);


--
-- Name: ifsp_tran_pla_id_ifsp_tran__key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ifsp_tran_pla_id_ifsp_tran__key ON ifsp_tran_plan_participants USING btree (id_ifsp_tran_plan_participants);


--
-- Name: last_name_lower; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX last_name_lower ON iep_student USING btree (lower((name_last)::text));


--
-- Name: log_id_student_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX log_id_student_idx ON iep_log_old USING btree (id_student);


--
-- Name: log_id_student_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX log_id_student_idx2 ON iep_log USING btree (id_student);


--
-- Name: log_timestamp_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX log_timestamp_index ON iep_log_old USING btree (timestamp_created);


--
-- Name: log_timestamp_index2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX log_timestamp_index2 ON iep_log USING btree (timestamp_created);


--
-- Name: lps_mdt_paragraphs_p_id_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX lps_mdt_paragraphs_p_id_index ON lps_mdt_paragraphs USING btree (p_id);


--
-- Name: master_form_id_form_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX master_form_id_form_key ON master_form USING btree (id_form);


--
-- Name: personnel_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX personnel_index ON iep_student_team USING btree (id_personnel);


--
-- Name: school_from_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX school_from_key ON iep_transfer_request USING btree (id_county_from, id_district_from, id_school_from);


--
-- Name: school_to_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX school_to_key ON iep_transfer_request USING btree (id_county_to, id_district_to, id_school_to);


--
-- Name: ss4_cds; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX ss4_cds ON student_search4 USING btree (id_county, id_district, id_school);


--
-- Name: ss4_county; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX ss4_county ON student_search4 USING btree (id_county);


--
-- Name: ss4_id_cm; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX ss4_id_cm ON student_search4 USING btree (id_case_mgr);


--
-- Name: ss4_id_eicm; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX ss4_id_eicm ON student_search4 USING btree (id_ei_case_mgr);


--
-- Name: ss4_id_per_status; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX ss4_id_per_status ON student_search4 USING btree (id_personnel, status);


--
-- Name: ss4_id_sc; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX ss4_id_sc ON student_search4 USING btree (id_ser_cord);


--
-- Name: ss4_id_st_status; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX ss4_id_st_status ON student_search4 USING btree (id_student, status);


--
-- Name: ss4_state_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ss4_state_id ON student_search4 USING btree (unique_id_state, id_personnel);


--
-- Name: ss4_unique; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ss4_unique ON student_search4 USING btree (id_student, id_personnel);


--
-- Name: student_gender_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX student_gender_idx ON iep_student USING btree (gender);


--
-- Name: student_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX student_id ON iep_guardian USING btree (id_student);


--
-- Name: student_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX student_index ON iep_student_team USING btree (id_student);


--
-- Name: student_language_initcaplower; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX student_language_initcaplower ON iep_student USING btree (initcap(lower((primary_language)::text)));


--
-- Name: student_language_titlecase_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX student_language_titlecase_idx ON iep_student USING btree (lower((primary_language)::text));


--
-- Name: team_district_id_form_004_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX team_district_id_form_004_idx ON iep_team_district USING btree (id_form_004);


--
-- Name: team_member_id_form_004_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX team_member_id_form_004_idx ON iep_team_member USING btree (id_form_004);


--
-- Name: team_other_id_form_004_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX team_other_id_form_004_idx ON iep_team_other USING btree (id_form_004);


--
-- Name: timestamp_created_session; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX timestamp_created_session ON iep_session USING btree (timestamp_created);


--
-- Name: unique_id_form_004_supp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX unique_id_form_004_supp ON iep_form_004_supp USING btree (id_form_004_supp);


--
-- Name: unique_iep_school_name; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX unique_iep_school_name ON iep_school_name USING btree (id_cds);


--
-- Name: unique_pk_form_013; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX unique_pk_form_013 ON iep_form_013 USING btree (id_form_013);


--
-- Name: user_pass_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX user_pass_idx ON iep_personnel USING btree (user_name, "password");


--
-- Name: zend_id_session_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX zend_id_session_idx ON iep_session_zend USING btree (id_session);


--
-- Name: zend_id_user_session; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX zend_id_user_session ON iep_session_zend USING btree (id_user);


--
-- Name: zend_iep_session_status_token_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX zend_iep_session_status_token_key ON iep_session_zend USING btree (status, token_key);


--
-- Name: zend_iep_session_token_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX zend_iep_session_token_key ON iep_session_zend USING btree (token_key);


--
-- Name: zend_timestamp_created_session; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX zend_timestamp_created_session ON iep_session_zend USING btree (timestamp_created);


--
-- Name: RI_ConstraintTrigger_312123430; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER "<unnamed>"
    AFTER DELETE ON iep_student
    FROM iep_guardian
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('<unnamed>', 'iep_guardian', 'iep_student', 'UNSPECIFIED', 'id_student', 'id_student');


--
-- Name: RI_ConstraintTrigger_312123431; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER "<unnamed>"
    AFTER DELETE ON iep_student
    FROM iep_guardian
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('<unnamed>', 'iep_guardian', 'iep_student', 'UNSPECIFIED', 'id_student', 'id_student');


--
-- Name: RI_ConstraintTrigger_312123432; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER "<unnamed>"
    AFTER INSERT OR UPDATE ON iep_guardian
    FROM iep_student
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('<unnamed>', 'iep_guardian', 'iep_student', 'UNSPECIFIED', 'id_student', 'id_student');


--
-- Name: RI_ConstraintTrigger_312123433; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER "<unnamed>"
    AFTER DELETE ON iep_student
    FROM iep_guardian
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_cascade_del"('<unnamed>', 'iep_guardian', 'iep_student', 'UNSPECIFIED', 'id_student', 'id_student');


--
-- Name: RI_ConstraintTrigger_312123434; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER "<unnamed>"
    AFTER UPDATE ON iep_student
    FROM iep_guardian
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('<unnamed>', 'iep_guardian', 'iep_student', 'UNSPECIFIED', 'id_student', 'id_student');


--
-- Name: check_student_change_status; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER check_student_change_status
    BEFORE UPDATE ON iep_student
    FOR EACH ROW
    EXECUTE PROCEDURE student_change_status('');


--
-- Name: create_cds_rows; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER create_cds_rows
    AFTER INSERT ON iep_school
    FOR EACH ROW
    EXECUTE PROCEDURE create_cds('');


--
-- Name: delete_cds_rows; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER delete_cds_rows
    AFTER DELETE ON iep_school
    FOR EACH ROW
    EXECUTE PROCEDURE delete_cds('');


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_024
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_001
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_002
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_003
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_004
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_005
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_006
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_007
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_008
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_009
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_010
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_011
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_012
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_013
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_014
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_015
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_016
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_017
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_018
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_019
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_020
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_021
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_022
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: form_version_number; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER form_version_number
    BEFORE INSERT ON iep_form_023
    FOR EACH ROW
    EXECUTE PROCEDURE form_version_number();


--
-- Name: iep_county_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_county_modtime
    BEFORE UPDATE ON iep_county
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_district_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_district_modtime
    BEFORE UPDATE ON iep_district
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_001_lookup_dob; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_001_lookup_dob
    BEFORE INSERT OR UPDATE ON iep_form_001
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_dob('');


--
-- Name: iep_form_001_lookup_grade; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_001_lookup_grade
    BEFORE INSERT OR UPDATE ON iep_form_001
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_grade('');


--
-- Name: iep_form_001_lookup_id_case_mgr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_001_lookup_id_case_mgr
    BEFORE INSERT OR UPDATE ON iep_form_001
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_case_mgr('');


--
-- Name: iep_form_001_lookup_id_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_001_lookup_id_county
    BEFORE INSERT OR UPDATE ON iep_form_001
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_county('');


--
-- Name: iep_form_001_lookup_id_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_001_lookup_id_district
    BEFORE INSERT OR UPDATE ON iep_form_001
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_district('');


--
-- Name: iep_form_001_lookup_id_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_001_lookup_id_school
    BEFORE INSERT OR UPDATE ON iep_form_001
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_school('');


--
-- Name: iep_form_001_lookup_name_case_m; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_001_lookup_name_case_m
    BEFORE INSERT OR UPDATE ON iep_form_001
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_case_mgr('');


--
-- Name: iep_form_001_lookup_name_distri; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_001_lookup_name_distri
    BEFORE INSERT OR UPDATE ON iep_form_001
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_district('');


--
-- Name: iep_form_001_lookup_name_first; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_001_lookup_name_first
    BEFORE INSERT OR UPDATE ON iep_form_001
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_first('');


--
-- Name: iep_form_001_lookup_name_last; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_001_lookup_name_last
    BEFORE INSERT OR UPDATE ON iep_form_001
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_last('');


--
-- Name: iep_form_001_lookup_name_middle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_001_lookup_name_middle
    BEFORE INSERT OR UPDATE ON iep_form_001
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_middle('');


--
-- Name: iep_form_001_lookup_name_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_001_lookup_name_school
    BEFORE INSERT OR UPDATE ON iep_form_001
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_school('');


--
-- Name: iep_form_001_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_001_modtime
    BEFORE UPDATE ON iep_form_001
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_002_lookup_dob; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_002_lookup_dob
    BEFORE INSERT OR UPDATE ON iep_form_002
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_dob('');


--
-- Name: iep_form_002_lookup_grade; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_002_lookup_grade
    BEFORE INSERT OR UPDATE ON iep_form_002
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_grade('');


--
-- Name: iep_form_002_lookup_id_case_mgr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_002_lookup_id_case_mgr
    BEFORE INSERT OR UPDATE ON iep_form_002
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_case_mgr('');


--
-- Name: iep_form_002_lookup_id_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_002_lookup_id_county
    BEFORE INSERT OR UPDATE ON iep_form_002
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_county('');


--
-- Name: iep_form_002_lookup_id_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_002_lookup_id_district
    BEFORE INSERT OR UPDATE ON iep_form_002
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_district('');


--
-- Name: iep_form_002_lookup_id_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_002_lookup_id_school
    BEFORE INSERT OR UPDATE ON iep_form_002
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_school('');


--
-- Name: iep_form_002_lookup_name_case_m; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_002_lookup_name_case_m
    BEFORE INSERT OR UPDATE ON iep_form_002
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_case_mgr('');


--
-- Name: iep_form_002_lookup_name_distri; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_002_lookup_name_distri
    BEFORE INSERT OR UPDATE ON iep_form_002
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_district('');


--
-- Name: iep_form_002_lookup_name_first; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_002_lookup_name_first
    BEFORE INSERT OR UPDATE ON iep_form_002
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_first('');


--
-- Name: iep_form_002_lookup_name_last; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_002_lookup_name_last
    BEFORE INSERT OR UPDATE ON iep_form_002
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_last('');


--
-- Name: iep_form_002_lookup_name_middle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_002_lookup_name_middle
    BEFORE INSERT OR UPDATE ON iep_form_002
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_middle('');


--
-- Name: iep_form_002_lookup_name_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_002_lookup_name_school
    BEFORE INSERT OR UPDATE ON iep_form_002
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_school('');


--
-- Name: iep_form_002_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_002_modtime
    BEFORE UPDATE ON iep_form_002
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_003_lookup_dob; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_003_lookup_dob
    BEFORE INSERT OR UPDATE ON iep_form_003
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_dob('');


--
-- Name: iep_form_003_lookup_grade; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_003_lookup_grade
    BEFORE INSERT OR UPDATE ON iep_form_003
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_grade('');


--
-- Name: iep_form_003_lookup_id_case_mgr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_003_lookup_id_case_mgr
    BEFORE INSERT OR UPDATE ON iep_form_003
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_case_mgr('');


--
-- Name: iep_form_003_lookup_id_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_003_lookup_id_county
    BEFORE INSERT OR UPDATE ON iep_form_003
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_county('');


--
-- Name: iep_form_003_lookup_id_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_003_lookup_id_district
    BEFORE INSERT OR UPDATE ON iep_form_003
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_district('');


--
-- Name: iep_form_003_lookup_id_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_003_lookup_id_school
    BEFORE INSERT OR UPDATE ON iep_form_003
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_school('');


--
-- Name: iep_form_003_lookup_name_case_m; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_003_lookup_name_case_m
    BEFORE INSERT OR UPDATE ON iep_form_003
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_case_mgr('');


--
-- Name: iep_form_003_lookup_name_distri; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_003_lookup_name_distri
    BEFORE INSERT OR UPDATE ON iep_form_003
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_district('');


--
-- Name: iep_form_003_lookup_name_first; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_003_lookup_name_first
    BEFORE INSERT OR UPDATE ON iep_form_003
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_first('');


--
-- Name: iep_form_003_lookup_name_last; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_003_lookup_name_last
    BEFORE INSERT OR UPDATE ON iep_form_003
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_last('');


--
-- Name: iep_form_003_lookup_name_middle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_003_lookup_name_middle
    BEFORE INSERT OR UPDATE ON iep_form_003
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_middle('');


--
-- Name: iep_form_003_lookup_name_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_003_lookup_name_school
    BEFORE INSERT OR UPDATE ON iep_form_003
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_school('');


--
-- Name: iep_form_003_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_003_modtime
    BEFORE UPDATE ON iep_form_003
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_004_lookup_dob; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_004_lookup_dob
    BEFORE INSERT OR UPDATE ON iep_form_004
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_dob('');


--
-- Name: iep_form_004_lookup_grade; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_004_lookup_grade
    BEFORE INSERT OR UPDATE ON iep_form_004
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_grade('');


--
-- Name: iep_form_004_lookup_id_case_mgr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_004_lookup_id_case_mgr
    BEFORE INSERT OR UPDATE ON iep_form_004
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_case_mgr('');


--
-- Name: iep_form_004_lookup_id_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_004_lookup_id_county
    BEFORE INSERT OR UPDATE ON iep_form_004
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_county('');


--
-- Name: iep_form_004_lookup_id_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_004_lookup_id_district
    BEFORE INSERT OR UPDATE ON iep_form_004
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_district('');


--
-- Name: iep_form_004_lookup_id_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_004_lookup_id_school
    BEFORE INSERT OR UPDATE ON iep_form_004
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_school('');


--
-- Name: iep_form_004_lookup_name_case_m; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_004_lookup_name_case_m
    BEFORE INSERT OR UPDATE ON iep_form_004
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_case_mgr('');


--
-- Name: iep_form_004_lookup_name_distri; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_004_lookup_name_distri
    BEFORE INSERT OR UPDATE ON iep_form_004
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_district('');


--
-- Name: iep_form_004_lookup_name_first; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_004_lookup_name_first
    BEFORE INSERT OR UPDATE ON iep_form_004
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_first('');


--
-- Name: iep_form_004_lookup_name_last; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_004_lookup_name_last
    BEFORE INSERT OR UPDATE ON iep_form_004
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_last('');


--
-- Name: iep_form_004_lookup_name_middle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_004_lookup_name_middle
    BEFORE INSERT OR UPDATE ON iep_form_004
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_middle('');


--
-- Name: iep_form_004_lookup_name_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_004_lookup_name_school
    BEFORE INSERT OR UPDATE ON iep_form_004
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_school('');


--
-- Name: iep_form_004_lookup_phone; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_004_lookup_phone
    BEFORE INSERT OR UPDATE ON iep_form_004
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_phone('');


--
-- Name: iep_form_004_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_004_modtime
    BEFORE UPDATE ON iep_form_004
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_004_supp_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_004_supp_modtime
    BEFORE INSERT OR UPDATE ON iep_form_004_supp
    FOR EACH ROW
    EXECUTE PROCEDURE modtime();


--
-- Name: iep_form_005_lookup_dob; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_005_lookup_dob
    BEFORE INSERT OR UPDATE ON iep_form_005
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_dob('');


--
-- Name: iep_form_005_lookup_grade; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_005_lookup_grade
    BEFORE INSERT OR UPDATE ON iep_form_005
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_grade('');


--
-- Name: iep_form_005_lookup_id_case_mgr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_005_lookup_id_case_mgr
    BEFORE INSERT OR UPDATE ON iep_form_005
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_case_mgr('');


--
-- Name: iep_form_005_lookup_id_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_005_lookup_id_county
    BEFORE INSERT OR UPDATE ON iep_form_005
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_county('');


--
-- Name: iep_form_005_lookup_id_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_005_lookup_id_district
    BEFORE INSERT OR UPDATE ON iep_form_005
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_district('');


--
-- Name: iep_form_005_lookup_id_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_005_lookup_id_school
    BEFORE INSERT OR UPDATE ON iep_form_005
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_school('');


--
-- Name: iep_form_005_lookup_name_case_m; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_005_lookup_name_case_m
    BEFORE INSERT OR UPDATE ON iep_form_005
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_case_mgr('');


--
-- Name: iep_form_005_lookup_name_distri; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_005_lookup_name_distri
    BEFORE INSERT OR UPDATE ON iep_form_005
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_district('');


--
-- Name: iep_form_005_lookup_name_first; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_005_lookup_name_first
    BEFORE INSERT OR UPDATE ON iep_form_005
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_first('');


--
-- Name: iep_form_005_lookup_name_last; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_005_lookup_name_last
    BEFORE INSERT OR UPDATE ON iep_form_005
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_last('');


--
-- Name: iep_form_005_lookup_name_middle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_005_lookup_name_middle
    BEFORE INSERT OR UPDATE ON iep_form_005
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_middle('');


--
-- Name: iep_form_005_lookup_name_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_005_lookup_name_school
    BEFORE INSERT OR UPDATE ON iep_form_005
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_school('');


--
-- Name: iep_form_005_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_005_modtime
    BEFORE UPDATE ON iep_form_005
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_006_lookup_dob; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_006_lookup_dob
    BEFORE INSERT OR UPDATE ON iep_form_006
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_dob('');


--
-- Name: iep_form_006_lookup_grade; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_006_lookup_grade
    BEFORE INSERT OR UPDATE ON iep_form_006
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_grade('');


--
-- Name: iep_form_006_lookup_id_case_mgr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_006_lookup_id_case_mgr
    BEFORE INSERT OR UPDATE ON iep_form_006
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_case_mgr('');


--
-- Name: iep_form_006_lookup_id_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_006_lookup_id_county
    BEFORE INSERT OR UPDATE ON iep_form_006
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_county('');


--
-- Name: iep_form_006_lookup_id_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_006_lookup_id_district
    BEFORE INSERT OR UPDATE ON iep_form_006
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_district('');


--
-- Name: iep_form_006_lookup_id_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_006_lookup_id_school
    BEFORE INSERT OR UPDATE ON iep_form_006
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_school('');


--
-- Name: iep_form_006_lookup_name_case_m; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_006_lookup_name_case_m
    BEFORE INSERT OR UPDATE ON iep_form_006
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_case_mgr('');


--
-- Name: iep_form_006_lookup_name_distri; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_006_lookup_name_distri
    BEFORE INSERT OR UPDATE ON iep_form_006
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_district('');


--
-- Name: iep_form_006_lookup_name_first; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_006_lookup_name_first
    BEFORE INSERT OR UPDATE ON iep_form_006
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_first('');


--
-- Name: iep_form_006_lookup_name_last; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_006_lookup_name_last
    BEFORE INSERT OR UPDATE ON iep_form_006
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_last('');


--
-- Name: iep_form_006_lookup_name_middle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_006_lookup_name_middle
    BEFORE INSERT OR UPDATE ON iep_form_006
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_middle('');


--
-- Name: iep_form_006_lookup_name_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_006_lookup_name_school
    BEFORE INSERT OR UPDATE ON iep_form_006
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_school('');


--
-- Name: iep_form_006_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_006_modtime
    BEFORE UPDATE ON iep_form_006
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_007_lookup_dob; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_007_lookup_dob
    BEFORE INSERT OR UPDATE ON iep_form_007
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_dob('');


--
-- Name: iep_form_007_lookup_grade; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_007_lookup_grade
    BEFORE INSERT OR UPDATE ON iep_form_007
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_grade('');


--
-- Name: iep_form_007_lookup_id_case_mgr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_007_lookup_id_case_mgr
    BEFORE INSERT OR UPDATE ON iep_form_007
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_case_mgr('');


--
-- Name: iep_form_007_lookup_id_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_007_lookup_id_county
    BEFORE INSERT OR UPDATE ON iep_form_007
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_county('');


--
-- Name: iep_form_007_lookup_id_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_007_lookup_id_district
    BEFORE INSERT OR UPDATE ON iep_form_007
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_district('');


--
-- Name: iep_form_007_lookup_id_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_007_lookup_id_school
    BEFORE INSERT OR UPDATE ON iep_form_007
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_school('');


--
-- Name: iep_form_007_lookup_name_case_m; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_007_lookup_name_case_m
    BEFORE INSERT OR UPDATE ON iep_form_007
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_case_mgr('');


--
-- Name: iep_form_007_lookup_name_distri; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_007_lookup_name_distri
    BEFORE INSERT OR UPDATE ON iep_form_007
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_district('');


--
-- Name: iep_form_007_lookup_name_first; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_007_lookup_name_first
    BEFORE INSERT OR UPDATE ON iep_form_007
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_first('');


--
-- Name: iep_form_007_lookup_name_last; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_007_lookup_name_last
    BEFORE INSERT OR UPDATE ON iep_form_007
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_last('');


--
-- Name: iep_form_007_lookup_name_middle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_007_lookup_name_middle
    BEFORE INSERT OR UPDATE ON iep_form_007
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_middle('');


--
-- Name: iep_form_007_lookup_name_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_007_lookup_name_school
    BEFORE INSERT OR UPDATE ON iep_form_007
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_school('');


--
-- Name: iep_form_007_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_007_modtime
    BEFORE UPDATE ON iep_form_007
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_008_lookup_dob; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_008_lookup_dob
    BEFORE INSERT OR UPDATE ON iep_form_008
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_dob('');


--
-- Name: iep_form_008_lookup_grade; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_008_lookup_grade
    BEFORE INSERT OR UPDATE ON iep_form_008
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_grade('');


--
-- Name: iep_form_008_lookup_id_case_mgr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_008_lookup_id_case_mgr
    BEFORE INSERT OR UPDATE ON iep_form_008
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_case_mgr('');


--
-- Name: iep_form_008_lookup_id_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_008_lookup_id_county
    BEFORE INSERT OR UPDATE ON iep_form_008
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_county('');


--
-- Name: iep_form_008_lookup_id_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_008_lookup_id_district
    BEFORE INSERT OR UPDATE ON iep_form_008
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_district('');


--
-- Name: iep_form_008_lookup_id_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_008_lookup_id_school
    BEFORE INSERT OR UPDATE ON iep_form_008
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_school('');


--
-- Name: iep_form_008_lookup_name_case_m; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_008_lookup_name_case_m
    BEFORE INSERT OR UPDATE ON iep_form_008
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_case_mgr('');


--
-- Name: iep_form_008_lookup_name_distri; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_008_lookup_name_distri
    BEFORE INSERT OR UPDATE ON iep_form_008
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_district('');


--
-- Name: iep_form_008_lookup_name_first; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_008_lookup_name_first
    BEFORE INSERT OR UPDATE ON iep_form_008
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_first('');


--
-- Name: iep_form_008_lookup_name_last; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_008_lookup_name_last
    BEFORE INSERT OR UPDATE ON iep_form_008
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_last('');


--
-- Name: iep_form_008_lookup_name_middle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_008_lookup_name_middle
    BEFORE INSERT OR UPDATE ON iep_form_008
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_middle('');


--
-- Name: iep_form_008_lookup_name_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_008_lookup_name_school
    BEFORE INSERT OR UPDATE ON iep_form_008
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_school('');


--
-- Name: iep_form_008_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_008_modtime
    BEFORE UPDATE ON iep_form_008
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_009_lookup_dob; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_009_lookup_dob
    BEFORE INSERT OR UPDATE ON iep_form_009
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_dob('');


--
-- Name: iep_form_009_lookup_grade; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_009_lookup_grade
    BEFORE INSERT OR UPDATE ON iep_form_009
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_grade('');


--
-- Name: iep_form_009_lookup_id_case_mgr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_009_lookup_id_case_mgr
    BEFORE INSERT OR UPDATE ON iep_form_009
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_case_mgr('');


--
-- Name: iep_form_009_lookup_id_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_009_lookup_id_county
    BEFORE INSERT OR UPDATE ON iep_form_009
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_county('');


--
-- Name: iep_form_009_lookup_id_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_009_lookup_id_district
    BEFORE INSERT OR UPDATE ON iep_form_009
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_district('');


--
-- Name: iep_form_009_lookup_id_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_009_lookup_id_school
    BEFORE INSERT OR UPDATE ON iep_form_009
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_school('');


--
-- Name: iep_form_009_lookup_name_case_m; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_009_lookup_name_case_m
    BEFORE INSERT OR UPDATE ON iep_form_009
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_case_mgr('');


--
-- Name: iep_form_009_lookup_name_distri; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_009_lookup_name_distri
    BEFORE INSERT OR UPDATE ON iep_form_009
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_district('');


--
-- Name: iep_form_009_lookup_name_first; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_009_lookup_name_first
    BEFORE INSERT OR UPDATE ON iep_form_009
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_first('');


--
-- Name: iep_form_009_lookup_name_last; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_009_lookup_name_last
    BEFORE INSERT OR UPDATE ON iep_form_009
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_last('');


--
-- Name: iep_form_009_lookup_name_middle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_009_lookup_name_middle
    BEFORE INSERT OR UPDATE ON iep_form_009
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_middle('');


--
-- Name: iep_form_009_lookup_name_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_009_lookup_name_school
    BEFORE INSERT OR UPDATE ON iep_form_009
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_school('');


--
-- Name: iep_form_009_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_009_modtime
    BEFORE UPDATE ON iep_form_009
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_010_lookup_dob; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_010_lookup_dob
    BEFORE INSERT OR UPDATE ON iep_form_010
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_dob('');


--
-- Name: iep_form_010_lookup_grade; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_010_lookup_grade
    BEFORE INSERT OR UPDATE ON iep_form_010
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_grade('');


--
-- Name: iep_form_010_lookup_id_case_mgr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_010_lookup_id_case_mgr
    BEFORE INSERT OR UPDATE ON iep_form_010
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_case_mgr('');


--
-- Name: iep_form_010_lookup_id_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_010_lookup_id_county
    BEFORE INSERT OR UPDATE ON iep_form_010
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_county('');


--
-- Name: iep_form_010_lookup_id_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_010_lookup_id_district
    BEFORE INSERT OR UPDATE ON iep_form_010
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_district('');


--
-- Name: iep_form_010_lookup_id_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_010_lookup_id_school
    BEFORE INSERT OR UPDATE ON iep_form_010
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_school('');


--
-- Name: iep_form_010_lookup_name_case_m; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_010_lookup_name_case_m
    BEFORE INSERT OR UPDATE ON iep_form_010
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_case_mgr('');


--
-- Name: iep_form_010_lookup_name_distri; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_010_lookup_name_distri
    BEFORE INSERT OR UPDATE ON iep_form_010
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_district('');


--
-- Name: iep_form_010_lookup_name_first; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_010_lookup_name_first
    BEFORE INSERT OR UPDATE ON iep_form_010
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_first('');


--
-- Name: iep_form_010_lookup_name_last; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_010_lookup_name_last
    BEFORE INSERT OR UPDATE ON iep_form_010
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_last('');


--
-- Name: iep_form_010_lookup_name_middle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_010_lookup_name_middle
    BEFORE INSERT OR UPDATE ON iep_form_010
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_middle('');


--
-- Name: iep_form_010_lookup_name_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_010_lookup_name_school
    BEFORE INSERT OR UPDATE ON iep_form_010
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_school('');


--
-- Name: iep_form_010_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_010_modtime
    BEFORE UPDATE ON iep_form_010
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_011_lookup_dob; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_011_lookup_dob
    BEFORE INSERT OR UPDATE ON iep_form_011
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_dob('');


--
-- Name: iep_form_011_lookup_grade; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_011_lookup_grade
    BEFORE INSERT OR UPDATE ON iep_form_011
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_grade('');


--
-- Name: iep_form_011_lookup_id_case_mgr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_011_lookup_id_case_mgr
    BEFORE INSERT OR UPDATE ON iep_form_011
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_case_mgr('');


--
-- Name: iep_form_011_lookup_id_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_011_lookup_id_county
    BEFORE INSERT OR UPDATE ON iep_form_011
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_county('');


--
-- Name: iep_form_011_lookup_id_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_011_lookup_id_district
    BEFORE INSERT OR UPDATE ON iep_form_011
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_district('');


--
-- Name: iep_form_011_lookup_id_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_011_lookup_id_school
    BEFORE INSERT OR UPDATE ON iep_form_011
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_school('');


--
-- Name: iep_form_011_lookup_name_case_m; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_011_lookup_name_case_m
    BEFORE INSERT OR UPDATE ON iep_form_011
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_case_mgr('');


--
-- Name: iep_form_011_lookup_name_distri; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_011_lookup_name_distri
    BEFORE INSERT OR UPDATE ON iep_form_011
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_district('');


--
-- Name: iep_form_011_lookup_name_first; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_011_lookup_name_first
    BEFORE INSERT OR UPDATE ON iep_form_011
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_first('');


--
-- Name: iep_form_011_lookup_name_last; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_011_lookup_name_last
    BEFORE INSERT OR UPDATE ON iep_form_011
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_last('');


--
-- Name: iep_form_011_lookup_name_middle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_011_lookup_name_middle
    BEFORE INSERT OR UPDATE ON iep_form_011
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_middle('');


--
-- Name: iep_form_011_lookup_name_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_011_lookup_name_school
    BEFORE INSERT OR UPDATE ON iep_form_011
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_school('');


--
-- Name: iep_form_011_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_011_modtime
    BEFORE UPDATE ON iep_form_011
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_012_lookup_dob; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_012_lookup_dob
    BEFORE INSERT OR UPDATE ON iep_form_012
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_dob('');


--
-- Name: iep_form_012_lookup_grade; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_012_lookup_grade
    BEFORE INSERT OR UPDATE ON iep_form_012
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_grade('');


--
-- Name: iep_form_012_lookup_id_case_mgr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_012_lookup_id_case_mgr
    BEFORE INSERT OR UPDATE ON iep_form_012
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_case_mgr('');


--
-- Name: iep_form_012_lookup_id_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_012_lookup_id_county
    BEFORE INSERT OR UPDATE ON iep_form_012
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_county('');


--
-- Name: iep_form_012_lookup_id_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_012_lookup_id_district
    BEFORE INSERT OR UPDATE ON iep_form_012
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_district('');


--
-- Name: iep_form_012_lookup_id_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_012_lookup_id_school
    BEFORE INSERT OR UPDATE ON iep_form_012
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_school('');


--
-- Name: iep_form_012_lookup_name_case_m; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_012_lookup_name_case_m
    BEFORE INSERT OR UPDATE ON iep_form_012
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_case_mgr('');


--
-- Name: iep_form_012_lookup_name_distri; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_012_lookup_name_distri
    BEFORE INSERT OR UPDATE ON iep_form_012
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_district('');


--
-- Name: iep_form_012_lookup_name_first; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_012_lookup_name_first
    BEFORE INSERT OR UPDATE ON iep_form_012
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_first('');


--
-- Name: iep_form_012_lookup_name_last; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_012_lookup_name_last
    BEFORE INSERT OR UPDATE ON iep_form_012
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_last('');


--
-- Name: iep_form_012_lookup_name_middle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_012_lookup_name_middle
    BEFORE INSERT OR UPDATE ON iep_form_012
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_middle('');


--
-- Name: iep_form_012_lookup_name_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_012_lookup_name_school
    BEFORE INSERT OR UPDATE ON iep_form_012
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_school('');


--
-- Name: iep_form_012_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_012_modtime
    BEFORE INSERT OR UPDATE ON iep_form_012
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_013_lookup_dob; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_013_lookup_dob
    BEFORE INSERT OR UPDATE ON iep_form_013
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_dob('');


--
-- Name: iep_form_013_lookup_grade; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_013_lookup_grade
    BEFORE INSERT OR UPDATE ON iep_form_013
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_grade('');


--
-- Name: iep_form_013_lookup_id_case_mgr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_013_lookup_id_case_mgr
    BEFORE INSERT OR UPDATE ON iep_form_013
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_case_mgr('');


--
-- Name: iep_form_013_lookup_id_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_013_lookup_id_county
    BEFORE INSERT OR UPDATE ON iep_form_013
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_county('');


--
-- Name: iep_form_013_lookup_id_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_013_lookup_id_district
    BEFORE INSERT OR UPDATE ON iep_form_013
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_district('');


--
-- Name: iep_form_013_lookup_id_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_013_lookup_id_school
    BEFORE INSERT OR UPDATE ON iep_form_013
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_school('');


--
-- Name: iep_form_013_lookup_name_case_m; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_013_lookup_name_case_m
    BEFORE INSERT OR UPDATE ON iep_form_013
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_case_mgr('');


--
-- Name: iep_form_013_lookup_name_distri; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_013_lookup_name_distri
    BEFORE INSERT OR UPDATE ON iep_form_013
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_district('');


--
-- Name: iep_form_013_lookup_name_first; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_013_lookup_name_first
    BEFORE INSERT OR UPDATE ON iep_form_013
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_first('');


--
-- Name: iep_form_013_lookup_name_last; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_013_lookup_name_last
    BEFORE INSERT OR UPDATE ON iep_form_013
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_last('');


--
-- Name: iep_form_013_lookup_name_middle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_013_lookup_name_middle
    BEFORE INSERT OR UPDATE ON iep_form_013
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_middle('');


--
-- Name: iep_form_013_lookup_name_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_013_lookup_name_school
    BEFORE INSERT OR UPDATE ON iep_form_013
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_school('');


--
-- Name: iep_form_013_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_013_modtime
    BEFORE INSERT OR UPDATE ON iep_form_013
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_014_lookup_dob; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_014_lookup_dob
    BEFORE INSERT OR UPDATE ON iep_form_014
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_dob('');


--
-- Name: iep_form_014_lookup_grade; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_014_lookup_grade
    BEFORE INSERT OR UPDATE ON iep_form_014
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_grade('');


--
-- Name: iep_form_014_lookup_id_case_mgr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_014_lookup_id_case_mgr
    BEFORE INSERT OR UPDATE ON iep_form_014
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_case_mgr('');


--
-- Name: iep_form_014_lookup_id_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_014_lookup_id_county
    BEFORE INSERT OR UPDATE ON iep_form_014
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_county('');


--
-- Name: iep_form_014_lookup_id_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_014_lookup_id_district
    BEFORE INSERT OR UPDATE ON iep_form_014
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_district('');


--
-- Name: iep_form_014_lookup_id_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_014_lookup_id_school
    BEFORE INSERT OR UPDATE ON iep_form_014
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_school('');


--
-- Name: iep_form_014_lookup_name_case_m; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_014_lookup_name_case_m
    BEFORE INSERT OR UPDATE ON iep_form_014
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_case_mgr('');


--
-- Name: iep_form_014_lookup_name_distri; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_014_lookup_name_distri
    BEFORE INSERT OR UPDATE ON iep_form_014
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_district('');


--
-- Name: iep_form_014_lookup_name_first; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_014_lookup_name_first
    BEFORE INSERT OR UPDATE ON iep_form_014
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_first('');


--
-- Name: iep_form_014_lookup_name_last; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_014_lookup_name_last
    BEFORE INSERT OR UPDATE ON iep_form_014
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_last('');


--
-- Name: iep_form_014_lookup_name_middle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_014_lookup_name_middle
    BEFORE INSERT OR UPDATE ON iep_form_014
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_middle('');


--
-- Name: iep_form_014_lookup_name_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_014_lookup_name_school
    BEFORE INSERT OR UPDATE ON iep_form_014
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_school('');


--
-- Name: iep_form_014_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_014_modtime
    BEFORE UPDATE ON iep_form_014
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_015_lookup_dob; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_015_lookup_dob
    BEFORE INSERT OR UPDATE ON iep_form_015
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_dob('');


--
-- Name: iep_form_015_lookup_grade; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_015_lookup_grade
    BEFORE INSERT OR UPDATE ON iep_form_015
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_grade('');


--
-- Name: iep_form_015_lookup_id_case_mgr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_015_lookup_id_case_mgr
    BEFORE INSERT OR UPDATE ON iep_form_015
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_case_mgr('');


--
-- Name: iep_form_015_lookup_id_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_015_lookup_id_county
    BEFORE INSERT OR UPDATE ON iep_form_015
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_county('');


--
-- Name: iep_form_015_lookup_id_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_015_lookup_id_district
    BEFORE INSERT OR UPDATE ON iep_form_015
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_district('');


--
-- Name: iep_form_015_lookup_id_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_015_lookup_id_school
    BEFORE INSERT OR UPDATE ON iep_form_015
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_school('');


--
-- Name: iep_form_015_lookup_name_case_m; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_015_lookup_name_case_m
    BEFORE INSERT OR UPDATE ON iep_form_015
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_case_mgr('');


--
-- Name: iep_form_015_lookup_name_distri; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_015_lookup_name_distri
    BEFORE INSERT OR UPDATE ON iep_form_015
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_district('');


--
-- Name: iep_form_015_lookup_name_first; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_015_lookup_name_first
    BEFORE INSERT OR UPDATE ON iep_form_015
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_first('');


--
-- Name: iep_form_015_lookup_name_last; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_015_lookup_name_last
    BEFORE INSERT OR UPDATE ON iep_form_015
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_last('');


--
-- Name: iep_form_015_lookup_name_middle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_015_lookup_name_middle
    BEFORE INSERT OR UPDATE ON iep_form_015
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_middle('');


--
-- Name: iep_form_015_lookup_name_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_015_lookup_name_school
    BEFORE INSERT OR UPDATE ON iep_form_015
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_school('');


--
-- Name: iep_form_015_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_015_modtime
    BEFORE UPDATE ON iep_form_015
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_016_lookup_dob; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_016_lookup_dob
    BEFORE INSERT OR UPDATE ON iep_form_016
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_dob('');


--
-- Name: iep_form_016_lookup_grade; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_016_lookup_grade
    BEFORE INSERT OR UPDATE ON iep_form_016
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_grade('');


--
-- Name: iep_form_016_lookup_id_case_mgr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_016_lookup_id_case_mgr
    BEFORE INSERT OR UPDATE ON iep_form_016
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_case_mgr('');


--
-- Name: iep_form_016_lookup_id_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_016_lookup_id_county
    BEFORE INSERT OR UPDATE ON iep_form_016
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_county('');


--
-- Name: iep_form_016_lookup_id_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_016_lookup_id_district
    BEFORE INSERT OR UPDATE ON iep_form_016
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_district('');


--
-- Name: iep_form_016_lookup_id_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_016_lookup_id_school
    BEFORE INSERT OR UPDATE ON iep_form_016
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_id_school('');


--
-- Name: iep_form_016_lookup_name_case_m; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_016_lookup_name_case_m
    BEFORE INSERT OR UPDATE ON iep_form_016
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_case_mgr('');


--
-- Name: iep_form_016_lookup_name_distri; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_016_lookup_name_distri
    BEFORE INSERT OR UPDATE ON iep_form_016
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_district('');


--
-- Name: iep_form_016_lookup_name_first; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_016_lookup_name_first
    BEFORE INSERT OR UPDATE ON iep_form_016
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_first('');


--
-- Name: iep_form_016_lookup_name_last; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_016_lookup_name_last
    BEFORE INSERT OR UPDATE ON iep_form_016
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_last('');


--
-- Name: iep_form_016_lookup_name_middle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_016_lookup_name_middle
    BEFORE INSERT OR UPDATE ON iep_form_016
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_student_name_middle('');


--
-- Name: iep_form_016_lookup_name_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_016_lookup_name_school
    BEFORE INSERT OR UPDATE ON iep_form_016
    FOR EACH ROW
    EXECUTE PROCEDURE lookup_name_school('');


--
-- Name: iep_form_016_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_016_modtime
    BEFORE UPDATE ON iep_form_016
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_form_017_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_form_017_modtime
    BEFORE UPDATE ON iep_form_017
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_guardian_get_student_id; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_guardian_get_student_id
    BEFORE INSERT OR UPDATE ON iep_guardian
    FOR EACH ROW
    EXECUTE PROCEDURE set_master_student_id();


--
-- Name: iep_guardian_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_guardian_modtime
    BEFORE UPDATE ON iep_guardian
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_guardian_set_grd_list_del; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_guardian_set_grd_list_del
    AFTER DELETE ON iep_guardian
    FOR EACH ROW
    EXECUTE PROCEDURE iep_guardian_set_guardian_list_('');


--
-- Name: iep_guardian_set_id_list; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_guardian_set_id_list
    AFTER INSERT OR UPDATE ON iep_guardian
    FOR EACH ROW
    EXECUTE PROCEDURE iep_guardian_set_guardian_list('');


--
-- Name: iep_message_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_message_modtime
    BEFORE UPDATE ON iep_message
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_personnel_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_personnel_modtime
    BEFORE UPDATE ON iep_personnel
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_school_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_school_modtime
    BEFORE UPDATE ON iep_school
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_session_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_session_modtime
    BEFORE UPDATE ON iep_session
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_student_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_student_modtime
    BEFORE UPDATE ON iep_student
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_student_team_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_student_team_modtime
    BEFORE UPDATE ON iep_student_team
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: iep_team_district_intisortnum; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_team_district_intisortnum
    BEFORE INSERT ON iep_team_district
    FOR EACH ROW
    EXECUTE PROCEDURE iep_team_district_intisortnum('');


--
-- Name: iep_team_other_intisortnum; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_team_other_intisortnum
    BEFORE INSERT ON iep_team_other
    FOR EACH ROW
    EXECUTE PROCEDURE iep_team_other_intisortnum('');


--
-- Name: iep_transfer_request_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER iep_transfer_request_modtime
    BEFORE UPDATE ON iep_transfer_request
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: ifsp_goals_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER ifsp_goals_modtime
    BEFORE UPDATE ON ifsp_goals
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: ifsp_parents_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER ifsp_parents_modtime
    BEFORE UPDATE ON ifsp_parents
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: ifsp_services_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER ifsp_services_modtime
    BEFORE UPDATE ON ifsp_services
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: ifsp_team_members_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER ifsp_team_members_modtime
    BEFORE UPDATE ON ifsp_team_members
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: ifsp_team_other_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER ifsp_team_other_modtime
    BEFORE UPDATE ON ifsp_team_other
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: ifsp_tran_plan_participants_mod; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER ifsp_tran_plan_participants_mod
    BEFORE UPDATE ON ifsp_tran_plan_participants
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: master_form_modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER master_form_modtime
    BEFORE UPDATE ON master_form
    FOR EACH ROW
    EXECUTE PROCEDURE modtime('');


--
-- Name: modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER modtime
    BEFORE INSERT ON iep_form_018
    FOR EACH ROW
    EXECUTE PROCEDURE modtime();


--
-- Name: modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER modtime
    BEFORE INSERT ON iep_form_018_agency
    FOR EACH ROW
    EXECUTE PROCEDURE modtime();


--
-- Name: modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER modtime
    BEFORE INSERT ON iep_form_018_goal
    FOR EACH ROW
    EXECUTE PROCEDURE modtime();


--
-- Name: modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER modtime
    BEFORE INSERT ON iep_form_018_supp
    FOR EACH ROW
    EXECUTE PROCEDURE modtime();


--
-- Name: modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER modtime
    BEFORE INSERT ON iep_form_018_team_member
    FOR EACH ROW
    EXECUTE PROCEDURE modtime();


--
-- Name: modtime; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER modtime
    BEFORE INSERT ON iep_form_004_secondary_goal
    FOR EACH ROW
    EXECUTE PROCEDURE modtime();


--
-- Name: set_guardian_password; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER set_guardian_password
    BEFORE INSERT ON iep_guardian
    FOR EACH ROW
    EXECUTE PROCEDURE set_password();


--
-- Name: set_guardian_user_name; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER set_guardian_user_name
    BEFORE INSERT ON iep_guardian
    FOR EACH ROW
    EXECUTE PROCEDURE set_user_name('');


--
-- Name: ss4_alter_priv; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER ss4_alter_priv
    AFTER UPDATE ON iep_privileges
    FOR EACH ROW
    EXECUTE PROCEDURE ss4_alter_priv('');


--
-- Name: ss4_alter_student; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER ss4_alter_student
    AFTER UPDATE ON iep_student
    FOR EACH ROW
    EXECUTE PROCEDURE ss4_alter_student('');


--
-- Name: ss4_create_student; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER ss4_create_student
    AFTER INSERT ON iep_student
    FOR EACH ROW
    EXECUTE PROCEDURE ss4_create_student('');


--
-- Name: ss4_maintain_id_list_team; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER ss4_maintain_id_list_team
    AFTER UPDATE ON iep_student_team
    FOR EACH ROW
    EXECUTE PROCEDURE ss4_maintain_id_list_team('');


--
-- Name: ss4_maintain_id_list_team_delete; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER ss4_maintain_id_list_team_delete
    AFTER DELETE ON iep_student_team
    FOR EACH ROW
    EXECUTE PROCEDURE ss4_maintain_id_list_team_delete('');


--
-- Name: state_id_unique; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER state_id_unique
    BEFORE UPDATE ON iep_student
    FOR EACH ROW
    EXECUTE PROCEDURE state_id_unique('');


--
-- Name: student_maintain_non_pub; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER student_maintain_non_pub
    BEFORE UPDATE ON iep_student
    FOR EACH ROW
    EXECUTE PROCEDURE student_maintain_non_pub('');


--
-- Name: student_update; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER student_update
    BEFORE UPDATE ON iep_student
    FOR EACH ROW
    EXECUTE PROCEDURE student_update('');


--
-- Name: update_cds_rows_county; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_cds_rows_county
    AFTER UPDATE ON iep_county
    FOR EACH ROW
    EXECUTE PROCEDURE update_cds_county('');


--
-- Name: update_cds_rows_district; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_cds_rows_district
    AFTER UPDATE ON iep_district
    FOR EACH ROW
    EXECUTE PROCEDURE update_cds_district('');


--
-- Name: update_cds_rows_school; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_cds_rows_school
    AFTER UPDATE ON iep_school
    FOR EACH ROW
    EXECUTE PROCEDURE update_cds_school('');


--
-- Name: uppercase_imp_code; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER uppercase_imp_code
    BEFORE UPDATE ON iep_district
    FOR EACH ROW
    EXECUTE PROCEDURE uppercase_imp_code('');


--
-- Name: fk_id_county; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_district
    ADD CONSTRAINT fk_id_county FOREIGN KEY (id_county) REFERENCES iep_county(id_county) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_district; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_school
    ADD CONSTRAINT fk_id_district FOREIGN KEY (id_county, id_district) REFERENCES iep_district(id_county, id_district) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_form_003; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_team_member_input
    ADD CONSTRAINT fk_id_form_003 FOREIGN KEY (id_form_003) REFERENCES iep_form_003(id_form_003) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_id_form_004; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_004_goal
    ADD CONSTRAINT fk_id_form_004 FOREIGN KEY (id_form_004) REFERENCES iep_form_004(id_form_004) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_id_form_004; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_team_member
    ADD CONSTRAINT fk_id_form_004 FOREIGN KEY (id_form_004) REFERENCES iep_form_004(id_form_004) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_id_form_004; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_team_member_input
    ADD CONSTRAINT fk_id_form_004 FOREIGN KEY (id_form_004) REFERENCES iep_form_004(id_form_004) ON UPDATE CASCADE;


--
-- Name: fk_id_form_004_goal; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_004_goal_progress
    ADD CONSTRAINT fk_id_form_004_goal FOREIGN KEY (id_form_004_goal) REFERENCES iep_form_004_goal(id_form_004_goal) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_id_form_013; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ifsp_goals
    ADD CONSTRAINT fk_id_form_013 FOREIGN KEY (id_form_013) REFERENCES iep_form_013(id_form_013) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_id_form_013; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ifsp_parents
    ADD CONSTRAINT fk_id_form_013 FOREIGN KEY (id_form_013) REFERENCES iep_form_013(id_form_013) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_id_form_013; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ifsp_team_other
    ADD CONSTRAINT fk_id_form_013 FOREIGN KEY (id_form_013) REFERENCES iep_form_013(id_form_013) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_id_form_013; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ifsp_services
    ADD CONSTRAINT fk_id_form_013 FOREIGN KEY (id_form_013) REFERENCES iep_form_013(id_form_013) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_id_form_013; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ifsp_team_members
    ADD CONSTRAINT fk_id_form_013 FOREIGN KEY (id_form_013) REFERENCES iep_form_013(id_form_013) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_id_form_013; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ifsp_tran_plan_participants
    ADD CONSTRAINT fk_id_form_013 FOREIGN KEY (id_form_013) REFERENCES iep_form_013(id_form_013) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_001
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_002
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_003
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_004
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_005
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_006
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_007
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_008
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_009
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_011
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_012
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_013
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_014
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_015
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_016
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_form_017
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_guardian
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_log
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_sesis_snapshot
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_sesis_snapshot2
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: fk_id_student; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY iep_student_team
    ADD CONSTRAINT fk_id_student FOREIGN KEY (id_student) REFERENCES iep_student(id_student) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Name: iep_form_013; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_013 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_013 FROM postgres;
GRANT ALL ON TABLE iep_form_013 TO postgres;
GRANT SELECT ON TABLE iep_form_013 TO stylesoft;
GRANT SELECT ON TABLE iep_form_013 TO stylescope;


--
-- Name: iep_school; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_school FROM PUBLIC;
REVOKE ALL ON TABLE iep_school FROM postgres;
GRANT ALL ON TABLE iep_school TO postgres;
GRANT ALL ON TABLE iep_school TO PUBLIC;
GRANT SELECT ON TABLE iep_school TO stylesoft;
GRANT SELECT ON TABLE iep_school TO stylescope;


--
-- Name: iep_student; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_student FROM PUBLIC;
REVOKE ALL ON TABLE iep_student FROM postgres;
GRANT ALL ON TABLE iep_student TO postgres;
GRANT SELECT ON TABLE iep_student TO stylesoft;
GRANT SELECT ON TABLE iep_student TO stylescope;


--
-- Name: admin_settings; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE admin_settings FROM PUBLIC;
REVOKE ALL ON TABLE admin_settings FROM postgres;
GRANT ALL ON TABLE admin_settings TO postgres;
GRANT SELECT ON TABLE admin_settings TO stylesoft;
GRANT SELECT ON TABLE admin_settings TO stylescope;


--
-- Name: archived_forms; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE archived_forms FROM PUBLIC;
REVOKE ALL ON TABLE archived_forms FROM postgres;
GRANT ALL ON TABLE archived_forms TO postgres;
GRANT SELECT ON TABLE archived_forms TO stylesoft;
GRANT SELECT ON TABLE archived_forms TO stylescope;


--
-- Name: bu_fm01; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm01 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm01 FROM postgres;
GRANT ALL ON TABLE bu_fm01 TO postgres;
GRANT SELECT ON TABLE bu_fm01 TO stylesoft;
GRANT SELECT ON TABLE bu_fm01 TO stylescope;


--
-- Name: bu_fm02; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm02 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm02 FROM postgres;
GRANT ALL ON TABLE bu_fm02 TO postgres;
GRANT SELECT ON TABLE bu_fm02 TO stylesoft;
GRANT SELECT ON TABLE bu_fm02 TO stylescope;


--
-- Name: bu_fm03; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm03 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm03 FROM postgres;
GRANT ALL ON TABLE bu_fm03 TO postgres;
GRANT SELECT ON TABLE bu_fm03 TO stylesoft;
GRANT SELECT ON TABLE bu_fm03 TO stylescope;


--
-- Name: bu_fm04; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm04 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm04 FROM postgres;
GRANT ALL ON TABLE bu_fm04 TO postgres;
GRANT SELECT ON TABLE bu_fm04 TO stylesoft;
GRANT SELECT ON TABLE bu_fm04 TO stylescope;


--
-- Name: bu_fm05; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm05 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm05 FROM postgres;
GRANT ALL ON TABLE bu_fm05 TO postgres;
GRANT SELECT ON TABLE bu_fm05 TO stylesoft;
GRANT SELECT ON TABLE bu_fm05 TO stylescope;


--
-- Name: bu_fm06; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm06 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm06 FROM postgres;
GRANT ALL ON TABLE bu_fm06 TO postgres;
GRANT SELECT ON TABLE bu_fm06 TO stylesoft;
GRANT SELECT ON TABLE bu_fm06 TO stylescope;


--
-- Name: bu_fm07; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm07 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm07 FROM postgres;
GRANT ALL ON TABLE bu_fm07 TO postgres;
GRANT SELECT ON TABLE bu_fm07 TO stylesoft;
GRANT SELECT ON TABLE bu_fm07 TO stylescope;


--
-- Name: bu_fm08; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm08 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm08 FROM postgres;
GRANT ALL ON TABLE bu_fm08 TO postgres;
GRANT SELECT ON TABLE bu_fm08 TO stylesoft;
GRANT SELECT ON TABLE bu_fm08 TO stylescope;


--
-- Name: bu_fm09; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm09 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm09 FROM postgres;
GRANT ALL ON TABLE bu_fm09 TO postgres;
GRANT SELECT ON TABLE bu_fm09 TO stylesoft;
GRANT SELECT ON TABLE bu_fm09 TO stylescope;


--
-- Name: bu_fm10; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm10 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm10 FROM postgres;
GRANT ALL ON TABLE bu_fm10 TO postgres;
GRANT SELECT ON TABLE bu_fm10 TO stylesoft;
GRANT SELECT ON TABLE bu_fm10 TO stylescope;


--
-- Name: bu_fm11; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm11 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm11 FROM postgres;
GRANT ALL ON TABLE bu_fm11 TO postgres;
GRANT SELECT ON TABLE bu_fm11 TO stylesoft;
GRANT SELECT ON TABLE bu_fm11 TO stylescope;


--
-- Name: bu_fm12; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm12 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm12 FROM postgres;
GRANT ALL ON TABLE bu_fm12 TO postgres;
GRANT SELECT ON TABLE bu_fm12 TO stylesoft;
GRANT SELECT ON TABLE bu_fm12 TO stylescope;


--
-- Name: bu_fm13; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm13 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm13 FROM postgres;
GRANT ALL ON TABLE bu_fm13 TO postgres;
GRANT SELECT ON TABLE bu_fm13 TO stylesoft;
GRANT SELECT ON TABLE bu_fm13 TO stylescope;


--
-- Name: bu_fm14; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm14 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm14 FROM postgres;
GRANT ALL ON TABLE bu_fm14 TO postgres;
GRANT SELECT ON TABLE bu_fm14 TO stylesoft;
GRANT SELECT ON TABLE bu_fm14 TO stylescope;


--
-- Name: bu_fm15; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm15 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm15 FROM postgres;
GRANT ALL ON TABLE bu_fm15 TO postgres;
GRANT SELECT ON TABLE bu_fm15 TO stylesoft;
GRANT SELECT ON TABLE bu_fm15 TO stylescope;


--
-- Name: bu_fm16; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm16 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm16 FROM postgres;
GRANT ALL ON TABLE bu_fm16 TO postgres;
GRANT SELECT ON TABLE bu_fm16 TO stylesoft;
GRANT SELECT ON TABLE bu_fm16 TO stylescope;


--
-- Name: bu_fm17; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm17 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm17 FROM postgres;
GRANT ALL ON TABLE bu_fm17 TO postgres;
GRANT SELECT ON TABLE bu_fm17 TO stylesoft;
GRANT SELECT ON TABLE bu_fm17 TO stylescope;


--
-- Name: bu_fm18; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_fm18 FROM PUBLIC;
REVOKE ALL ON TABLE bu_fm18 FROM postgres;
GRANT ALL ON TABLE bu_fm18 TO postgres;
GRANT SELECT ON TABLE bu_fm18 TO stylesoft;
GRANT SELECT ON TABLE bu_fm18 TO stylescope;


--
-- Name: bu_guardian; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_guardian FROM PUBLIC;
REVOKE ALL ON TABLE bu_guardian FROM postgres;
GRANT ALL ON TABLE bu_guardian TO postgres;
GRANT SELECT ON TABLE bu_guardian TO stylesoft;
GRANT SELECT ON TABLE bu_guardian TO stylescope;


--
-- Name: bu_log; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_log FROM PUBLIC;
REVOKE ALL ON TABLE bu_log FROM postgres;
GRANT ALL ON TABLE bu_log TO postgres;
GRANT SELECT ON TABLE bu_log TO stylesoft;
GRANT SELECT ON TABLE bu_log TO stylescope;


--
-- Name: bu_student_team; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bu_student_team FROM PUBLIC;
REVOKE ALL ON TABLE bu_student_team FROM postgres;
GRANT ALL ON TABLE bu_student_team TO postgres;
GRANT SELECT ON TABLE bu_student_team TO stylesoft;
GRANT SELECT ON TABLE bu_student_team TO stylescope;


--
-- Name: delete_goal_backup_bug2465; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE delete_goal_backup_bug2465 FROM PUBLIC;
REVOKE ALL ON TABLE delete_goal_backup_bug2465 FROM postgres;
GRANT ALL ON TABLE delete_goal_backup_bug2465 TO postgres;
GRANT SELECT ON TABLE delete_goal_backup_bug2465 TO stylesoft;
GRANT SELECT ON TABLE delete_goal_backup_bug2465 TO stylescope;


--
-- Name: deleted_forms; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE deleted_forms FROM PUBLIC;
REVOKE ALL ON TABLE deleted_forms FROM postgres;
GRANT ALL ON TABLE deleted_forms TO postgres;
GRANT SELECT ON TABLE deleted_forms TO stylesoft;
GRANT SELECT ON TABLE deleted_forms TO stylescope;


--
-- Name: iep_personnel; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_personnel FROM PUBLIC;
REVOKE ALL ON TABLE iep_personnel FROM postgres;
GRANT ALL ON TABLE iep_personnel TO postgres;
GRANT SELECT ON TABLE iep_personnel TO stylesoft;
GRANT SELECT ON TABLE iep_personnel TO stylescope;


--
-- Name: dupe_student_backup_20060831; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE dupe_student_backup_20060831 FROM PUBLIC;
REVOKE ALL ON TABLE dupe_student_backup_20060831 FROM postgres;
GRANT ALL ON TABLE dupe_student_backup_20060831 TO postgres;
GRANT SELECT ON TABLE dupe_student_backup_20060831 TO stylesoft;
GRANT SELECT ON TABLE dupe_student_backup_20060831 TO stylescope;


--
-- Name: form_002_supplemental_form; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE form_002_supplemental_form FROM PUBLIC;
REVOKE ALL ON TABLE form_002_supplemental_form FROM postgres;
GRANT ALL ON TABLE form_002_supplemental_form TO postgres;
GRANT SELECT ON TABLE form_002_supplemental_form TO stylesoft;
GRANT SELECT ON TABLE form_002_supplemental_form TO stylescope;


--
-- Name: form_002_team_member; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE form_002_team_member FROM PUBLIC;
REVOKE ALL ON TABLE form_002_team_member FROM postgres;
GRANT ALL ON TABLE form_002_team_member TO postgres;
GRANT SELECT ON TABLE form_002_team_member TO stylesoft;
GRANT SELECT ON TABLE form_002_team_member TO stylescope;


--
-- Name: form_003_agency_representitive; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE form_003_agency_representitive FROM PUBLIC;
REVOKE ALL ON TABLE form_003_agency_representitive FROM postgres;
GRANT ALL ON TABLE form_003_agency_representitive TO postgres;
GRANT SELECT ON TABLE form_003_agency_representitive TO stylesoft;
GRANT SELECT ON TABLE form_003_agency_representitive TO stylescope;


--
-- Name: form_004_assist_tech; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE form_004_assist_tech FROM PUBLIC;
REVOKE ALL ON TABLE form_004_assist_tech FROM postgres;
GRANT ALL ON TABLE form_004_assist_tech TO postgres;
GRANT SELECT ON TABLE form_004_assist_tech TO stylesoft;
GRANT SELECT ON TABLE form_004_assist_tech TO stylescope;


--
-- Name: form_004_prog_mods; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE form_004_prog_mods FROM PUBLIC;
REVOKE ALL ON TABLE form_004_prog_mods FROM postgres;
GRANT ALL ON TABLE form_004_prog_mods TO postgres;
GRANT SELECT ON TABLE form_004_prog_mods TO stylesoft;
GRANT SELECT ON TABLE form_004_prog_mods TO stylescope;


--
-- Name: form_004_related_service; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE form_004_related_service FROM PUBLIC;
REVOKE ALL ON TABLE form_004_related_service FROM postgres;
GRANT ALL ON TABLE form_004_related_service TO postgres;
GRANT SELECT ON TABLE form_004_related_service TO stylesoft;
GRANT SELECT ON TABLE form_004_related_service TO stylescope;


--
-- Name: form_004_school_supp; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE form_004_school_supp FROM PUBLIC;
REVOKE ALL ON TABLE form_004_school_supp FROM postgres;
GRANT ALL ON TABLE form_004_school_supp TO postgres;
GRANT SELECT ON TABLE form_004_school_supp TO stylesoft;
GRANT SELECT ON TABLE form_004_school_supp TO stylescope;


--
-- Name: form_004_supp_service; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE form_004_supp_service FROM PUBLIC;
REVOKE ALL ON TABLE form_004_supp_service FROM postgres;
GRANT ALL ON TABLE form_004_supp_service TO postgres;
GRANT SELECT ON TABLE form_004_supp_service TO stylesoft;
GRANT SELECT ON TABLE form_004_supp_service TO stylescope;


--
-- Name: iep_form_004_goal; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_004_goal FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_004_goal FROM postgres;
GRANT ALL ON TABLE iep_form_004_goal TO postgres;
GRANT SELECT ON TABLE iep_form_004_goal TO stylesoft;
GRANT SELECT ON TABLE iep_form_004_goal TO stylescope;


--
-- Name: iep_form_004_goal_progress; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_004_goal_progress FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_004_goal_progress FROM postgres;
GRANT ALL ON TABLE iep_form_004_goal_progress TO postgres;
GRANT SELECT ON TABLE iep_form_004_goal_progress TO stylesoft;
GRANT SELECT ON TABLE iep_form_004_goal_progress TO stylescope;


--
-- Name: iep_guardian; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_guardian FROM PUBLIC;
REVOKE ALL ON TABLE iep_guardian FROM postgres;
GRANT ALL ON TABLE iep_guardian TO postgres;
GRANT SELECT ON TABLE iep_guardian TO stylesoft;
GRANT SELECT ON TABLE iep_guardian TO stylescope;


--
-- Name: helper_student_team; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE helper_student_team FROM PUBLIC;
REVOKE ALL ON TABLE helper_student_team FROM postgres;
GRANT ALL ON TABLE helper_student_team TO postgres;
GRANT SELECT ON TABLE helper_student_team TO stylesoft;
GRANT SELECT ON TABLE helper_student_team TO stylescope;


--
-- Name: iep_absence; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_absence FROM PUBLIC;
REVOKE ALL ON TABLE iep_absence FROM postgres;
GRANT ALL ON TABLE iep_absence TO postgres;
GRANT SELECT ON TABLE iep_absence TO stylesoft;
GRANT SELECT ON TABLE iep_absence TO stylescope;


--
-- Name: iep_accom_checklist; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_accom_checklist FROM PUBLIC;
REVOKE ALL ON TABLE iep_accom_checklist FROM postgres;
GRANT ALL ON TABLE iep_accom_checklist TO postgres;
GRANT SELECT ON TABLE iep_accom_checklist TO stylesoft;
GRANT SELECT ON TABLE iep_accom_checklist TO stylescope;


--
-- Name: iep_county; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_county FROM PUBLIC;
REVOKE ALL ON TABLE iep_county FROM postgres;
GRANT ALL ON TABLE iep_county TO postgres;
GRANT SELECT ON TABLE iep_county TO stylesoft;
GRANT SELECT ON TABLE iep_county TO stylescope;


--
-- Name: iep_district; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_district FROM PUBLIC;
REVOKE ALL ON TABLE iep_district FROM postgres;
GRANT ALL ON TABLE iep_district TO postgres;
GRANT ALL ON TABLE iep_district TO PUBLIC;
GRANT SELECT ON TABLE iep_district TO stylesoft;
GRANT SELECT ON TABLE iep_district TO stylescope;


--
-- Name: iep_district_report_date; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_district_report_date FROM PUBLIC;
REVOKE ALL ON TABLE iep_district_report_date FROM postgres;
GRANT ALL ON TABLE iep_district_report_date TO postgres;
GRANT SELECT ON TABLE iep_district_report_date TO stylesoft;
GRANT SELECT ON TABLE iep_district_report_date TO stylescope;


--
-- Name: iep_extracurriculars_saved; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_extracurriculars_saved FROM PUBLIC;
REVOKE ALL ON TABLE iep_extracurriculars_saved FROM postgres;
GRANT ALL ON TABLE iep_extracurriculars_saved TO postgres;
GRANT SELECT ON TABLE iep_extracurriculars_saved TO stylesoft;
GRANT SELECT ON TABLE iep_extracurriculars_saved TO stylescope;


--
-- Name: iep_form_001; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_001 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_001 FROM postgres;
GRANT ALL ON TABLE iep_form_001 TO postgres;
GRANT SELECT ON TABLE iep_form_001 TO stylesoft;
GRANT SELECT ON TABLE iep_form_001 TO stylescope;


--
-- Name: iep_form_002; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_002 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_002 FROM postgres;
GRANT ALL ON TABLE iep_form_002 TO postgres;
GRANT SELECT ON TABLE iep_form_002 TO stylesoft;
GRANT SELECT ON TABLE iep_form_002 TO stylescope;


--
-- Name: iep_form_002_issues; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_002_issues FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_002_issues FROM postgres;
GRANT ALL ON TABLE iep_form_002_issues TO postgres;
GRANT SELECT ON TABLE iep_form_002_issues TO stylesoft;
GRANT SELECT ON TABLE iep_form_002_issues TO stylescope;


--
-- Name: iep_form_003; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_003 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_003 FROM postgres;
GRANT ALL ON TABLE iep_form_003 TO postgres;
GRANT SELECT ON TABLE iep_form_003 TO stylesoft;
GRANT SELECT ON TABLE iep_form_003 TO stylescope;


--
-- Name: iep_form_004; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_004 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_004 FROM postgres;
GRANT ALL ON TABLE iep_form_004 TO postgres;
GRANT SELECT ON TABLE iep_form_004 TO stylesoft;
GRANT SELECT ON TABLE iep_form_004 TO stylescope;


--
-- Name: iep_form_004_goal_orphaned; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_004_goal_orphaned FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_004_goal_orphaned FROM postgres;
GRANT ALL ON TABLE iep_form_004_goal_orphaned TO postgres;
GRANT SELECT ON TABLE iep_form_004_goal_orphaned TO stylesoft;
GRANT SELECT ON TABLE iep_form_004_goal_orphaned TO stylescope;


--
-- Name: iep_form_004_secondary_goal; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_004_secondary_goal FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_004_secondary_goal FROM postgres;
GRANT ALL ON TABLE iep_form_004_secondary_goal TO postgres;
GRANT SELECT ON TABLE iep_form_004_secondary_goal TO stylesoft;
GRANT SELECT ON TABLE iep_form_004_secondary_goal TO stylescope;


--
-- Name: iep_form_004_supp; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_004_supp FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_004_supp FROM postgres;
GRANT ALL ON TABLE iep_form_004_supp TO postgres;
GRANT SELECT ON TABLE iep_form_004_supp TO stylesoft;
GRANT SELECT ON TABLE iep_form_004_supp TO stylescope;


--
-- Name: iep_form_004_supplemental_form; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_004_supplemental_form FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_004_supplemental_form FROM postgres;
GRANT ALL ON TABLE iep_form_004_supplemental_form TO postgres;
GRANT SELECT ON TABLE iep_form_004_supplemental_form TO stylesoft;
GRANT SELECT ON TABLE iep_form_004_supplemental_form TO stylescope;


--
-- Name: iep_form_005; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_005 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_005 FROM postgres;
GRANT ALL ON TABLE iep_form_005 TO postgres;
GRANT SELECT ON TABLE iep_form_005 TO stylesoft;
GRANT SELECT ON TABLE iep_form_005 TO stylescope;


--
-- Name: iep_form_006; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_006 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_006 FROM postgres;
GRANT ALL ON TABLE iep_form_006 TO postgres;
GRANT SELECT ON TABLE iep_form_006 TO stylesoft;
GRANT SELECT ON TABLE iep_form_006 TO stylescope;


--
-- Name: iep_form_007; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_007 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_007 FROM postgres;
GRANT ALL ON TABLE iep_form_007 TO postgres;
GRANT SELECT ON TABLE iep_form_007 TO stylesoft;
GRANT SELECT ON TABLE iep_form_007 TO stylescope;


--
-- Name: iep_form_008; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_008 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_008 FROM postgres;
GRANT ALL ON TABLE iep_form_008 TO postgres;
GRANT SELECT ON TABLE iep_form_008 TO stylesoft;
GRANT SELECT ON TABLE iep_form_008 TO stylescope;


--
-- Name: iep_form_009; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_009 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_009 FROM postgres;
GRANT ALL ON TABLE iep_form_009 TO postgres;
GRANT SELECT ON TABLE iep_form_009 TO stylesoft;
GRANT SELECT ON TABLE iep_form_009 TO stylescope;


--
-- Name: iep_form_010; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_010 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_010 FROM postgres;
GRANT ALL ON TABLE iep_form_010 TO postgres;
GRANT SELECT ON TABLE iep_form_010 TO stylesoft;
GRANT SELECT ON TABLE iep_form_010 TO stylescope;


--
-- Name: iep_form_011; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_011 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_011 FROM postgres;
GRANT ALL ON TABLE iep_form_011 TO postgres;
GRANT SELECT ON TABLE iep_form_011 TO stylesoft;
GRANT SELECT ON TABLE iep_form_011 TO stylescope;


--
-- Name: iep_form_012; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_012 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_012 FROM postgres;
GRANT ALL ON TABLE iep_form_012 TO postgres;
GRANT SELECT ON TABLE iep_form_012 TO stylesoft;
GRANT SELECT ON TABLE iep_form_012 TO stylescope;


--
-- Name: iep_form_014; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_014 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_014 FROM postgres;
GRANT ALL ON TABLE iep_form_014 TO postgres;
GRANT SELECT ON TABLE iep_form_014 TO stylesoft;
GRANT SELECT ON TABLE iep_form_014 TO stylescope;


--
-- Name: iep_form_015; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_015 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_015 FROM postgres;
GRANT ALL ON TABLE iep_form_015 TO postgres;
GRANT SELECT ON TABLE iep_form_015 TO stylesoft;
GRANT SELECT ON TABLE iep_form_015 TO stylescope;


--
-- Name: iep_form_016; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_016 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_016 FROM postgres;
GRANT ALL ON TABLE iep_form_016 TO postgres;
GRANT SELECT ON TABLE iep_form_016 TO stylesoft;
GRANT SELECT ON TABLE iep_form_016 TO stylescope;


--
-- Name: master_form; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE master_form FROM PUBLIC;
REVOKE ALL ON TABLE master_form FROM postgres;
GRANT ALL ON TABLE master_form TO postgres;
GRANT SELECT ON TABLE master_form TO stylesoft;
GRANT SELECT ON TABLE master_form TO stylescope;


--
-- Name: iep_form_017; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_017 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_017 FROM postgres;
GRANT ALL ON TABLE iep_form_017 TO postgres;
GRANT SELECT ON TABLE iep_form_017 TO stylesoft;
GRANT SELECT ON TABLE iep_form_017 TO stylescope;


--
-- Name: iep_form_018; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_018 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_018 FROM postgres;
GRANT ALL ON TABLE iep_form_018 TO postgres;
GRANT SELECT ON TABLE iep_form_018 TO stylesoft;
GRANT SELECT ON TABLE iep_form_018 TO stylescope;


--
-- Name: iep_form_018_agency; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_018_agency FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_018_agency FROM postgres;
GRANT ALL ON TABLE iep_form_018_agency TO postgres;
GRANT SELECT ON TABLE iep_form_018_agency TO stylesoft;
GRANT SELECT ON TABLE iep_form_018_agency TO stylescope;


--
-- Name: iep_form_018_goal; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_018_goal FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_018_goal FROM postgres;
GRANT ALL ON TABLE iep_form_018_goal TO postgres;
GRANT SELECT ON TABLE iep_form_018_goal TO stylesoft;
GRANT SELECT ON TABLE iep_form_018_goal TO stylescope;


--
-- Name: iep_form_018_supp; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_018_supp FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_018_supp FROM postgres;
GRANT ALL ON TABLE iep_form_018_supp TO postgres;
GRANT SELECT ON TABLE iep_form_018_supp TO stylesoft;
GRANT SELECT ON TABLE iep_form_018_supp TO stylescope;


--
-- Name: iep_form_018_team_member; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_018_team_member FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_018_team_member FROM postgres;
GRANT ALL ON TABLE iep_form_018_team_member TO postgres;
GRANT SELECT ON TABLE iep_form_018_team_member TO stylesoft;
GRANT SELECT ON TABLE iep_form_018_team_member TO stylescope;


--
-- Name: iep_form_019; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_019 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_019 FROM postgres;
GRANT ALL ON TABLE iep_form_019 TO postgres;
GRANT SELECT ON TABLE iep_form_019 TO stylesoft;
GRANT SELECT ON TABLE iep_form_019 TO stylescope;


--
-- Name: iep_form_020; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_020 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_020 FROM postgres;
GRANT ALL ON TABLE iep_form_020 TO postgres;
GRANT SELECT ON TABLE iep_form_020 TO stylesoft;
GRANT SELECT ON TABLE iep_form_020 TO stylescope;


--
-- Name: iep_form_021; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_021 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_021 FROM postgres;
GRANT ALL ON TABLE iep_form_021 TO postgres;
GRANT SELECT ON TABLE iep_form_021 TO stylesoft;
GRANT SELECT ON TABLE iep_form_021 TO stylescope;


--
-- Name: iep_form_022; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_022 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_022 FROM postgres;
GRANT ALL ON TABLE iep_form_022 TO postgres;
GRANT SELECT ON TABLE iep_form_022 TO stylesoft;
GRANT SELECT ON TABLE iep_form_022 TO stylescope;


--
-- Name: iep_form_023; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_023 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_023 FROM postgres;
GRANT ALL ON TABLE iep_form_023 TO postgres;
GRANT SELECT ON TABLE iep_form_023 TO stylesoft;
GRANT SELECT ON TABLE iep_form_023 TO stylescope;


--
-- Name: iep_form_024; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_024 FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_024 FROM postgres;
GRANT ALL ON TABLE iep_form_024 TO postgres;
GRANT SELECT ON TABLE iep_form_024 TO stylesoft;
GRANT SELECT ON TABLE iep_form_024 TO stylescope;


--
-- Name: iep_form_024_consent; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_024_consent FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_024_consent FROM postgres;
GRANT ALL ON TABLE iep_form_024_consent TO postgres;
GRANT SELECT ON TABLE iep_form_024_consent TO stylesoft;
GRANT SELECT ON TABLE iep_form_024_consent TO stylescope;


--
-- Name: iep_form_newdupes; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_form_newdupes FROM PUBLIC;
REVOKE ALL ON TABLE iep_form_newdupes FROM postgres;
GRANT ALL ON TABLE iep_form_newdupes TO postgres;
GRANT SELECT ON TABLE iep_form_newdupes TO stylesoft;
GRANT SELECT ON TABLE iep_form_newdupes TO stylescope;


--
-- Name: iep_goal_condition; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_goal_condition FROM PUBLIC;
REVOKE ALL ON TABLE iep_goal_condition FROM postgres;
GRANT ALL ON TABLE iep_goal_condition TO postgres;
GRANT SELECT ON TABLE iep_goal_condition TO stylesoft;
GRANT SELECT ON TABLE iep_goal_condition TO stylescope;


--
-- Name: iep_goal_domain; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_goal_domain FROM PUBLIC;
REVOKE ALL ON TABLE iep_goal_domain FROM postgres;
GRANT ALL ON TABLE iep_goal_domain TO postgres;
GRANT SELECT ON TABLE iep_goal_domain TO stylesoft;
GRANT SELECT ON TABLE iep_goal_domain TO stylescope;


--
-- Name: iep_goal_objective; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_goal_objective FROM PUBLIC;
REVOKE ALL ON TABLE iep_goal_objective FROM postgres;
GRANT ALL ON TABLE iep_goal_objective TO postgres;
GRANT SELECT ON TABLE iep_goal_objective TO stylesoft;
GRANT SELECT ON TABLE iep_goal_objective TO stylescope;


--
-- Name: iep_goal_standard; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_goal_standard FROM PUBLIC;
REVOKE ALL ON TABLE iep_goal_standard FROM postgres;
GRANT ALL ON TABLE iep_goal_standard TO postgres;
GRANT SELECT ON TABLE iep_goal_standard TO stylesoft;
GRANT SELECT ON TABLE iep_goal_standard TO stylescope;


--
-- Name: iep_goal_subtopic; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_goal_subtopic FROM PUBLIC;
REVOKE ALL ON TABLE iep_goal_subtopic FROM postgres;
GRANT ALL ON TABLE iep_goal_subtopic TO postgres;
GRANT SELECT ON TABLE iep_goal_subtopic TO stylesoft;
GRANT SELECT ON TABLE iep_goal_subtopic TO stylescope;


--
-- Name: iep_goal_topic; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_goal_topic FROM PUBLIC;
REVOKE ALL ON TABLE iep_goal_topic FROM postgres;
GRANT ALL ON TABLE iep_goal_topic TO postgres;
GRANT SELECT ON TABLE iep_goal_topic TO stylesoft;
GRANT SELECT ON TABLE iep_goal_topic TO stylescope;


--
-- Name: iep_guardian_lps_bu_20070831; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_guardian_lps_bu_20070831 FROM PUBLIC;
REVOKE ALL ON TABLE iep_guardian_lps_bu_20070831 FROM postgres;
GRANT ALL ON TABLE iep_guardian_lps_bu_20070831 TO postgres;
GRANT SELECT ON TABLE iep_guardian_lps_bu_20070831 TO stylesoft;
GRANT SELECT ON TABLE iep_guardian_lps_bu_20070831 TO stylescope;


--
-- Name: iep_guardian_temp; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_guardian_temp FROM PUBLIC;
REVOKE ALL ON TABLE iep_guardian_temp FROM postgres;
GRANT ALL ON TABLE iep_guardian_temp TO postgres;
GRANT SELECT ON TABLE iep_guardian_temp TO stylesoft;
GRANT SELECT ON TABLE iep_guardian_temp TO stylescope;


--
-- Name: iep_log; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_log FROM PUBLIC;
REVOKE ALL ON TABLE iep_log FROM postgres;
GRANT ALL ON TABLE iep_log TO postgres;
GRANT SELECT ON TABLE iep_log TO stylesoft;
GRANT SELECT ON TABLE iep_log TO stylescope;


--
-- Name: iep_log_deleted; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_log_deleted FROM PUBLIC;
REVOKE ALL ON TABLE iep_log_deleted FROM postgres;
GRANT ALL ON TABLE iep_log_deleted TO postgres;
GRANT SELECT ON TABLE iep_log_deleted TO stylesoft;
GRANT SELECT ON TABLE iep_log_deleted TO stylescope;


--
-- Name: iep_log_old; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_log_old FROM PUBLIC;
REVOKE ALL ON TABLE iep_log_old FROM postgres;
GRANT ALL ON TABLE iep_log_old TO postgres;
GRANT SELECT ON TABLE iep_log_old TO stylesoft;
GRANT SELECT ON TABLE iep_log_old TO stylescope;


--
-- Name: iep_session; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_session FROM PUBLIC;
REVOKE ALL ON TABLE iep_session FROM postgres;
GRANT ALL ON TABLE iep_session TO postgres;
GRANT SELECT ON TABLE iep_session TO stylesoft;
GRANT SELECT ON TABLE iep_session TO stylescope;


--
-- Name: iep_message; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_message FROM PUBLIC;
REVOKE ALL ON TABLE iep_message FROM postgres;
GRANT ALL ON TABLE iep_message TO postgres;
GRANT SELECT ON TABLE iep_message TO stylesoft;
GRANT SELECT ON TABLE iep_message TO stylescope;


--
-- Name: iep_messages; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_messages FROM PUBLIC;
REVOKE ALL ON TABLE iep_messages FROM postgres;
GRANT ALL ON TABLE iep_messages TO postgres;
GRANT SELECT ON TABLE iep_messages TO stylesoft;
GRANT SELECT ON TABLE iep_messages TO stylescope;


--
-- Name: iep_pageviews; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_pageviews FROM PUBLIC;
REVOKE ALL ON TABLE iep_pageviews FROM postgres;
GRANT ALL ON TABLE iep_pageviews TO postgres;
GRANT SELECT ON TABLE iep_pageviews TO stylesoft;
GRANT SELECT ON TABLE iep_pageviews TO stylescope;


--
-- Name: iep_personnel_deleted; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_personnel_deleted FROM PUBLIC;
REVOKE ALL ON TABLE iep_personnel_deleted FROM postgres;
GRANT ALL ON TABLE iep_personnel_deleted TO postgres;
GRANT SELECT ON TABLE iep_personnel_deleted TO stylesoft;
GRANT SELECT ON TABLE iep_personnel_deleted TO stylescope;


--
-- Name: iep_privileges; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_privileges FROM PUBLIC;
REVOKE ALL ON TABLE iep_privileges FROM postgres;
GRANT ALL ON TABLE iep_privileges TO postgres;
GRANT SELECT ON TABLE iep_privileges TO stylesoft;
GRANT SELECT ON TABLE iep_privileges TO stylescope;


--
-- Name: iep_rule51; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_rule51 FROM PUBLIC;
REVOKE ALL ON TABLE iep_rule51 FROM postgres;
GRANT ALL ON TABLE iep_rule51 TO postgres;
GRANT SELECT ON TABLE iep_rule51 TO stylesoft;
GRANT SELECT ON TABLE iep_rule51 TO stylescope;


--
-- Name: iep_school_name; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_school_name FROM PUBLIC;
REVOKE ALL ON TABLE iep_school_name FROM postgres;
GRANT ALL ON TABLE iep_school_name TO postgres;
GRANT SELECT ON TABLE iep_school_name TO stylesoft;
GRANT SELECT ON TABLE iep_school_name TO stylescope;


--
-- Name: iep_school_non_public; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_school_non_public FROM PUBLIC;
REVOKE ALL ON TABLE iep_school_non_public FROM postgres;
GRANT ALL ON TABLE iep_school_non_public TO postgres;
GRANT SELECT ON TABLE iep_school_non_public TO stylesoft;
GRANT SELECT ON TABLE iep_school_non_public TO stylescope;


--
-- Name: iep_school_report_date; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_school_report_date FROM PUBLIC;
REVOKE ALL ON TABLE iep_school_report_date FROM postgres;
GRANT ALL ON TABLE iep_school_report_date TO postgres;
GRANT SELECT ON TABLE iep_school_report_date TO stylesoft;
GRANT SELECT ON TABLE iep_school_report_date TO stylescope;


--
-- Name: iep_sesis_snapshot; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_sesis_snapshot FROM PUBLIC;
REVOKE ALL ON TABLE iep_sesis_snapshot FROM postgres;
GRANT ALL ON TABLE iep_sesis_snapshot TO postgres;
GRANT SELECT ON TABLE iep_sesis_snapshot TO stylesoft;
GRANT SELECT ON TABLE iep_sesis_snapshot TO stylescope;


--
-- Name: iep_sesis_snapshot2; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_sesis_snapshot2 FROM PUBLIC;
REVOKE ALL ON TABLE iep_sesis_snapshot2 FROM postgres;
GRANT ALL ON TABLE iep_sesis_snapshot2 TO postgres;
GRANT SELECT ON TABLE iep_sesis_snapshot2 TO stylesoft;
GRANT SELECT ON TABLE iep_sesis_snapshot2 TO stylescope;


--
-- Name: iep_student_20070828; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_student_20070828 FROM PUBLIC;
REVOKE ALL ON TABLE iep_student_20070828 FROM postgres;
GRANT ALL ON TABLE iep_student_20070828 TO postgres;
GRANT SELECT ON TABLE iep_student_20070828 TO stylesoft;
GRANT SELECT ON TABLE iep_student_20070828 TO stylescope;


--
-- Name: iep_student_deleted; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_student_deleted FROM PUBLIC;
REVOKE ALL ON TABLE iep_student_deleted FROM postgres;
GRANT ALL ON TABLE iep_student_deleted TO postgres;
GRANT SELECT ON TABLE iep_student_deleted TO stylesoft;
GRANT SELECT ON TABLE iep_student_deleted TO stylescope;


--
-- Name: iep_student_team; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_student_team FROM PUBLIC;
REVOKE ALL ON TABLE iep_student_team FROM postgres;
GRANT ALL ON TABLE iep_student_team TO postgres;
GRANT SELECT ON TABLE iep_student_team TO stylesoft;
GRANT SELECT ON TABLE iep_student_team TO stylescope;


--
-- Name: iep_student_teambu; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_student_teambu FROM PUBLIC;
REVOKE ALL ON TABLE iep_student_teambu FROM postgres;
GRANT ALL ON TABLE iep_student_teambu TO postgres;
GRANT SELECT ON TABLE iep_student_teambu TO stylesoft;
GRANT SELECT ON TABLE iep_student_teambu TO stylescope;


--
-- Name: iep_supp; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_supp FROM PUBLIC;
REVOKE ALL ON TABLE iep_supp FROM postgres;
GRANT ALL ON TABLE iep_supp TO postgres;
GRANT SELECT ON TABLE iep_supp TO stylesoft;
GRANT SELECT ON TABLE iep_supp TO stylescope;


--
-- Name: iep_survey; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_survey FROM PUBLIC;
REVOKE ALL ON TABLE iep_survey FROM postgres;
GRANT ALL ON TABLE iep_survey TO postgres;
GRANT SELECT ON TABLE iep_survey TO stylesoft;
GRANT SELECT ON TABLE iep_survey TO stylescope;


--
-- Name: iep_team_district; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_team_district FROM PUBLIC;
REVOKE ALL ON TABLE iep_team_district FROM postgres;
GRANT ALL ON TABLE iep_team_district TO postgres;
GRANT SELECT ON TABLE iep_team_district TO stylesoft;
GRANT SELECT ON TABLE iep_team_district TO stylescope;


--
-- Name: iep_team_member; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_team_member FROM PUBLIC;
REVOKE ALL ON TABLE iep_team_member FROM postgres;
GRANT ALL ON TABLE iep_team_member TO postgres;
GRANT SELECT ON TABLE iep_team_member TO stylesoft;
GRANT SELECT ON TABLE iep_team_member TO stylescope;


--
-- Name: iep_team_member_input; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_team_member_input FROM PUBLIC;
REVOKE ALL ON TABLE iep_team_member_input FROM postgres;
GRANT ALL ON TABLE iep_team_member_input TO postgres;
GRANT SELECT ON TABLE iep_team_member_input TO stylesoft;
GRANT SELECT ON TABLE iep_team_member_input TO stylescope;


--
-- Name: iep_team_member_input_jesse; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_team_member_input_jesse FROM PUBLIC;
REVOKE ALL ON TABLE iep_team_member_input_jesse FROM postgres;
GRANT ALL ON TABLE iep_team_member_input_jesse TO postgres;
GRANT SELECT ON TABLE iep_team_member_input_jesse TO stylesoft;
GRANT SELECT ON TABLE iep_team_member_input_jesse TO stylescope;


--
-- Name: iep_team_other; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_team_other FROM PUBLIC;
REVOKE ALL ON TABLE iep_team_other FROM postgres;
GRANT ALL ON TABLE iep_team_other TO postgres;
GRANT SELECT ON TABLE iep_team_other TO stylesoft;
GRANT SELECT ON TABLE iep_team_other TO stylescope;


--
-- Name: iep_transfer_request; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_transfer_request FROM PUBLIC;
REVOKE ALL ON TABLE iep_transfer_request FROM postgres;
GRANT ALL ON TABLE iep_transfer_request TO postgres;
GRANT ALL ON TABLE iep_transfer_request TO PUBLIC;
GRANT SELECT ON TABLE iep_transfer_request TO stylesoft;
GRANT SELECT ON TABLE iep_transfer_request TO stylescope;


--
-- Name: iep_transfer_request_full; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE iep_transfer_request_full FROM PUBLIC;
REVOKE ALL ON TABLE iep_transfer_request_full FROM postgres;
GRANT ALL ON TABLE iep_transfer_request_full TO postgres;
GRANT ALL ON TABLE iep_transfer_request_full TO PUBLIC;


--
-- Name: ifsp_goals; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ifsp_goals FROM PUBLIC;
REVOKE ALL ON TABLE ifsp_goals FROM postgres;
GRANT ALL ON TABLE ifsp_goals TO postgres;
GRANT SELECT ON TABLE ifsp_goals TO stylesoft;
GRANT SELECT ON TABLE ifsp_goals TO stylescope;


--
-- Name: ifsp_parents; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ifsp_parents FROM PUBLIC;
REVOKE ALL ON TABLE ifsp_parents FROM postgres;
GRANT ALL ON TABLE ifsp_parents TO postgres;
GRANT SELECT ON TABLE ifsp_parents TO stylesoft;
GRANT SELECT ON TABLE ifsp_parents TO stylescope;


--
-- Name: ifsp_services; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ifsp_services FROM PUBLIC;
REVOKE ALL ON TABLE ifsp_services FROM postgres;
GRANT ALL ON TABLE ifsp_services TO postgres;
GRANT SELECT ON TABLE ifsp_services TO stylesoft;
GRANT SELECT ON TABLE ifsp_services TO stylescope;


--
-- Name: ifsp_team_members; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ifsp_team_members FROM PUBLIC;
REVOKE ALL ON TABLE ifsp_team_members FROM postgres;
GRANT ALL ON TABLE ifsp_team_members TO postgres;
GRANT SELECT ON TABLE ifsp_team_members TO stylesoft;
GRANT SELECT ON TABLE ifsp_team_members TO stylescope;


--
-- Name: ifsp_team_other; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ifsp_team_other FROM PUBLIC;
REVOKE ALL ON TABLE ifsp_team_other FROM postgres;
GRANT ALL ON TABLE ifsp_team_other TO postgres;
GRANT SELECT ON TABLE ifsp_team_other TO stylesoft;
GRANT SELECT ON TABLE ifsp_team_other TO stylescope;


--
-- Name: ifsp_tran_plan_participants; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ifsp_tran_plan_participants FROM PUBLIC;
REVOKE ALL ON TABLE ifsp_tran_plan_participants FROM postgres;
GRANT ALL ON TABLE ifsp_tran_plan_participants TO postgres;
GRANT SELECT ON TABLE ifsp_tran_plan_participants TO stylesoft;
GRANT SELECT ON TABLE ifsp_tran_plan_participants TO stylescope;


--
-- Name: languages; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE languages FROM PUBLIC;
REVOKE ALL ON TABLE languages FROM postgres;
GRANT ALL ON TABLE languages TO postgres;
GRANT SELECT ON TABLE languages TO stylesoft;
GRANT SELECT ON TABLE languages TO stylescope;


--
-- Name: lps_mdt_paragraphs; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE lps_mdt_paragraphs FROM PUBLIC;
REVOKE ALL ON TABLE lps_mdt_paragraphs FROM postgres;
GRANT ALL ON TABLE lps_mdt_paragraphs TO postgres;
GRANT SELECT ON TABLE lps_mdt_paragraphs TO stylesoft;
GRANT SELECT ON TABLE lps_mdt_paragraphs TO stylescope;


--
-- Name: lps_student_backup_08192008; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE lps_student_backup_08192008 FROM PUBLIC;
REVOKE ALL ON TABLE lps_student_backup_08192008 FROM postgres;
GRANT ALL ON TABLE lps_student_backup_08192008 TO postgres;
GRANT SELECT ON TABLE lps_student_backup_08192008 TO stylesoft;
GRANT SELECT ON TABLE lps_student_backup_08192008 TO stylescope;


--
-- Name: my_caseload; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE my_caseload FROM PUBLIC;
REVOKE ALL ON TABLE my_caseload FROM postgres;
GRANT ALL ON TABLE my_caseload TO postgres;
GRANT ALL ON TABLE my_caseload TO stylescope;


--
-- Name: nssrs_transfers; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nssrs_transfers FROM PUBLIC;
REVOKE ALL ON TABLE nssrs_transfers FROM postgres;
GRANT ALL ON TABLE nssrs_transfers TO postgres;
GRANT SELECT ON TABLE nssrs_transfers TO stylesoft;
GRANT SELECT ON TABLE nssrs_transfers TO stylescope;


--
-- Name: nssrs_transfers2; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nssrs_transfers2 FROM PUBLIC;
REVOKE ALL ON TABLE nssrs_transfers2 FROM postgres;
GRANT ALL ON TABLE nssrs_transfers2 TO postgres;
GRANT SELECT ON TABLE nssrs_transfers2 TO stylesoft;
GRANT SELECT ON TABLE nssrs_transfers2 TO stylescope;


--
-- Name: nssrs_transfers_backup; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nssrs_transfers_backup FROM PUBLIC;
REVOKE ALL ON TABLE nssrs_transfers_backup FROM postgres;
GRANT ALL ON TABLE nssrs_transfers_backup TO postgres;
GRANT SELECT ON TABLE nssrs_transfers_backup TO stylesoft;
GRANT SELECT ON TABLE nssrs_transfers_backup TO stylescope;


--
-- Name: pr_backup_updated_utf8header; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE pr_backup_updated_utf8header FROM PUBLIC;
REVOKE ALL ON TABLE pr_backup_updated_utf8header FROM postgres;
GRANT ALL ON TABLE pr_backup_updated_utf8header TO postgres;
GRANT SELECT ON TABLE pr_backup_updated_utf8header TO stylesoft;
GRANT SELECT ON TABLE pr_backup_updated_utf8header TO stylescope;


--
-- Name: saved_parts; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE saved_parts FROM PUBLIC;
REVOKE ALL ON TABLE saved_parts FROM postgres;
GRANT ALL ON TABLE saved_parts TO postgres;
GRANT SELECT ON TABLE saved_parts TO stylesoft;
GRANT SELECT ON TABLE saved_parts TO stylescope;


--
-- Name: session_logger; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE session_logger FROM PUBLIC;
REVOKE ALL ON TABLE session_logger FROM postgres;
GRANT ALL ON TABLE session_logger TO postgres;
GRANT SELECT ON TABLE session_logger TO stylesoft;
GRANT SELECT ON TABLE session_logger TO stylescope;


--
-- Name: sessions; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE sessions FROM PUBLIC;
REVOKE ALL ON TABLE sessions FROM postgres;
GRANT ALL ON TABLE sessions TO postgres;
GRANT SELECT ON TABLE sessions TO stylesoft;
GRANT SELECT ON TABLE sessions TO stylescope;


--
-- Name: stu_help; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE stu_help FROM PUBLIC;
REVOKE ALL ON TABLE stu_help FROM postgres;
GRANT ALL ON TABLE stu_help TO postgres;
GRANT SELECT ON TABLE stu_help TO stylesoft;
GRANT SELECT ON TABLE stu_help TO stylescope;


--
-- Name: student_chart; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE student_chart FROM PUBLIC;
REVOKE ALL ON TABLE student_chart FROM postgres;
GRANT ALL ON TABLE student_chart TO postgres;
GRANT SELECT ON TABLE student_chart TO stylesoft;
GRANT SELECT ON TABLE student_chart TO stylescope;


--
-- Name: student_search4; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE student_search4 FROM PUBLIC;
REVOKE ALL ON TABLE student_search4 FROM postgres;
GRANT ALL ON TABLE student_search4 TO postgres;
GRANT SELECT ON TABLE student_search4 TO stylesoft;
GRANT SELECT ON TABLE student_search4 TO stylescope;


--
-- Name: student_search4_nostudentrec; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE student_search4_nostudentrec FROM PUBLIC;
REVOKE ALL ON TABLE student_search4_nostudentrec FROM postgres;
GRANT ALL ON TABLE student_search4_nostudentrec TO postgres;
GRANT SELECT ON TABLE student_search4_nostudentrec TO stylesoft;
GRANT SELECT ON TABLE student_search4_nostudentrec TO stylescope;


--
-- Name: x_backup_np_parent; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE x_backup_np_parent FROM PUBLIC;
REVOKE ALL ON TABLE x_backup_np_parent FROM postgres;
GRANT ALL ON TABLE x_backup_np_parent TO postgres;
GRANT SELECT ON TABLE x_backup_np_parent TO stylesoft;
GRANT SELECT ON TABLE x_backup_np_parent TO stylescope;


--
-- Name: x_backup_np_student; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE x_backup_np_student FROM PUBLIC;
REVOKE ALL ON TABLE x_backup_np_student FROM postgres;
GRANT ALL ON TABLE x_backup_np_student TO postgres;
GRANT SELECT ON TABLE x_backup_np_student TO stylesoft;
GRANT SELECT ON TABLE x_backup_np_student TO stylescope;


--
-- Name: x_backup_ppn_parent; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE x_backup_ppn_parent FROM PUBLIC;
REVOKE ALL ON TABLE x_backup_ppn_parent FROM postgres;
GRANT ALL ON TABLE x_backup_ppn_parent TO postgres;
GRANT SELECT ON TABLE x_backup_ppn_parent TO stylesoft;
GRANT SELECT ON TABLE x_backup_ppn_parent TO stylescope;


--
-- Name: x_backup_ppn_student; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE x_backup_ppn_student FROM PUBLIC;
REVOKE ALL ON TABLE x_backup_ppn_student FROM postgres;
GRANT ALL ON TABLE x_backup_ppn_student TO postgres;
GRANT SELECT ON TABLE x_backup_ppn_student TO stylesoft;
GRANT SELECT ON TABLE x_backup_ppn_student TO stylescope;


--
-- PostgreSQL database dump complete
--

bash-3.2$ 





UPDATE iep_student SET date_web_notify = '11/01/2010', id_county = '99', id_district = '9999', id_school = '999', name_first = 'Zendy', name_middle = null, name_last = 'Crawford', status = 'Transferred to Non-SRS District', dob = '07/30/2002', grade = '6', gender = 'Female', ethnic_group = 'A', pub_school_student = 't', parental_placement = null, primary_language = 'Romanian', ward = 'f', ward_surrogate = 'f', ward_surrogate_nn = 't', ward_surrogate_other = null, address_street1 = '111 way', address_street2 = null, id_student_local = null, nonpubcounty = null, nonpubdistrict = null, nonpubschool = null, address_city = 'Lincoln', address_state = 'NE', address_zip = '66666', phone = null, sesis_exit_code = '01', sesis_exit_date = null, program_provider = null, alternate_assessment = null, ell_student = 't', unique_id_state = null, unique_id_state_duplicate = null, exclude_from_nssrs_report = null, id_ser_cord = null WHERE id_student = 1351026; 


abort;
begin;
CREATE or replace FUNCTION enabletriggers(name) RETURNS boolean
    AS $_$
DECLARE
	rel ALIAS FOR $1;
	stmt varchar;
BEGIN

    stmt := 'alter table ' || rel || ' disable trigger all';
    execute stmt;
    
    return true;
END;
$_$
    LANGUAGE plpgsql STRICT;

CREATE or replace FUNCTION disabletriggers(name) RETURNS boolean
    AS $_$
DECLARE
	rel ALIAS FOR $1;
	stmt varchar;
BEGIN
    stmt := 'alter table ' || rel || ' enable trigger all';
    execute stmt;
    return true;
END;
$_$
    LANGUAGE plpgsql STRICT;







CREATE FUNCTION enabletriggers(name) RETURNS boolean
    AS $_$
DECLARE
	rel ALIAS FOR $1;
	rows INTEGER;
BEGIN
	UPDATE pg_class SET reltriggers =
	       (SELECT count(*) FROM pg_trigger WHERE pg_class.oid = tgrelid)
	       WHERE relname ~~* rel;
	       GET DIAGNOSTICS rows = ROW_COUNT;
	       IF rows > 0 THEN
		  RETURN TRUE;
		  ELSE
			RAISE NOTICE 'Relation does not exists';
			RETURN FALSE;
			END IF;
END;
$_$
    LANGUAGE plpgsql STRICT;

CREATE FUNCTION disabletriggers(name) RETURNS boolean
    AS $_$
DECLARE
	rel ALIAS FOR $1;
	rows INTEGER;
BEGIN
	UPDATE pg_class SET reltriggers = 0 WHERE relname ~~* rel;
	GET DIAGNOSTICS rows = ROW_COUNT;
	IF rows > 0 THEN
	   RETURN TRUE;
	   ELSE
		RAISE NOTICE 'Relation does not exist';
		      RETURN FALSE;
		      END IF;
END;
$_$
    LANGUAGE plpgsql STRICT;



CREATE or replace FUNCTION student_change_status() RETURNS "trigger"
    AS $$DECLARE
     district_rec RECORD;

BEGIN 
IF new.status != old.status THEN 
    IF new.status = 'Active' THEN
        RAISE NOTICE 'STUDENT STATUS: %', new.status;

    ELSIF new.status = 'Remove' THEN
        RAISE NOTICE 'STUDENT STATUS: %', new.status;

    ELSIF new.status = 'Inactive' THEN
        RAISE NOTICE 'STUDENT STATUS: %', new.status;

    ELSIF new.status = 'Never Qualified' THEN
        RAISE NOTICE 'STUDENT STATUS: %', new.status;

        PERFORM student_team_inactivate(new.id_student);
        new.id_case_mgr := NULL;
        new.id_ser_cord := NULL;
        new.id_ei_case_mgr := NULL;


    ELSIF new.status = 'Transferred to Non-SRS District' THEN
        RAISE NOTICE 'STUDENT STATUS: %', new.status;

        PERFORM disabletriggers('iep_student_team');
        PERFORM student_team_inactivate(new.id_student);
        PERFORM enabletriggers('iep_student_team');

        new.id_list_team = get_active_id_list_team(OLD.id_student);
        new.id_case_mgr := NULL;
        new.id_case_mgr := NULL;
        new.id_ser_cord := NULL;
        new.id_ei_case_mgr := NULL;
        
    ELSIF new.status = 'No Longer Qualifies' THEN
        RAISE NOTICE 'STUDENT STATUS: %', new.status;

        PERFORM disabletriggers('iep_student_team');
        PERFORM student_team_inactivate(new.id_student);
        PERFORM enabletriggers('iep_student_team');

        --UPDATE iep_student set id_list_team = get_active_id_list_team(OLD.id_student) WHERE id_student = OLD.id_student;
        --RAISE NOTICE 'student_change_status: UPDATED Student with new team data';
        new.id_list_team = get_active_id_list_team(OLD.id_student);
        new.id_case_mgr := NULL;
        new.id_ser_cord := NULL;
        new.id_ei_case_mgr := NULL;

    END IF;
    
END IF;
   RETURN new; 
END;
$$
    LANGUAGE plpgsql;

